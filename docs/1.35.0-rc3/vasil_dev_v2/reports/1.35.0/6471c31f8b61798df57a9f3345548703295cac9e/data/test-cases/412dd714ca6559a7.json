{
  "uid" : "412dd714ca6559a7",
  "name" : "test_two_scripts_minting",
  "fullName" : "cardano_node_tests.tests.test_plutus_mint_build.TestBuildMinting#test_two_scripts_minting",
  "historyId" : "f17643336cd8a43faee4703c5adebf02",
  "time" : {
    "start" : 1655372907170,
    "stop" : 1655373004916,
    "duration" : 97746
  },
  "description" : "Test minting two tokens with two different Plutus scripts.\n\n        Uses `cardano-cli transaction build` command for building the transactions.\n\n        * fund the token issuer and create a UTxO for collaterals\n        * check that the expected amount was transferred to token issuer's address\n        * mint the tokens using two different Plutus scripts\n        * check that the tokens were minted and collateral UTxOs were not spent\n        * check transaction view output\n        * check expected fees\n        * check expected Plutus cost\n        * (optional) check transactions in db-sync\n        ",
  "descriptionHtml" : "<p>Test minting two tokens with two different Plutus scripts.</p>\n<pre><code>    Uses `cardano-cli transaction build` command for building the transactions.\n\n    * fund the token issuer and create a UTxO for collaterals\n    * check that the expected amount was transferred to token issuer's address\n    * mint the tokens using two different Plutus scripts\n    * check that the tokens were minted and collateral UTxOs were not spent\n    * check transaction view output\n    * check expected fees\n    * check expected Plutus cost\n    * (optional) check transactions in db-sync\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: time: 297744405 vs 408545501\ntime: 312830204 vs 427707230",
  "statusTrace" : "self = <cardano_node_tests.tests.test_plutus_mint_build.TestBuildMinting object at 0x7f2c38ab44c0>, cluster = <ClusterLib: protocol=cardano, tx_era=babbage>\npayment_addrs = [AddressRecord(address='addr_test1vq2f0r4z9hsphysacprye9a37fhvf85mtd83k6x5u74lceq92ngmg', vkey_file=PosixPath('test_tw...ts_minting_ci0_sjs_payment_addr_1.vkey'), skey_file=PosixPath('test_two_scripts_minting_ci0_sjs_payment_addr_1.skey'))]\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.dbsync\n    @pytest.mark.testnets\n    def test_two_scripts_minting(\n        self, cluster: clusterlib.ClusterLib, payment_addrs: List[clusterlib.AddressRecord]\n    ):\n        \"\"\"Test minting two tokens with two different Plutus scripts.\n    \n        Uses `cardano-cli transaction build` command for building the transactions.\n    \n        * fund the token issuer and create a UTxO for collaterals\n        * check that the expected amount was transferred to token issuer's address\n        * mint the tokens using two different Plutus scripts\n        * check that the tokens were minted and collateral UTxOs were not spent\n        * check transaction view output\n        * check expected fees\n        * check expected Plutus cost\n        * (optional) check transactions in db-sync\n        \"\"\"\n        # pylint: disable=too-many-locals,too-many-statements\n        temp_template = common.get_test_id(cluster)\n        payment_addr = payment_addrs[0]\n        issuer_addr = payment_addrs[1]\n    \n        lovelace_amount = 2_000_000\n        token_amount = 5\n        script_fund = 500_000_000\n    \n        # this is higher than `plutus_common.MINTING*_COST`, because the script context has changed\n        # to include more stuff\n        minting_cost_two = plutus_common.ExecutionCost(\n            per_time=408_545_501, per_space=1_126_016, fixed_cost=94_428\n        )\n        minting_time_range_cost_two = plutus_common.ExecutionCost(\n            per_time=427_707_230, per_space=1_188_952, fixed_cost=99_441\n        )\n    \n        protocol_params = cluster.get_protocol_params()\n        minting_cost1 = plutus_common.compute_cost(\n            execution_cost=minting_cost_two, protocol_params=protocol_params\n        )\n        minting_cost2 = plutus_common.compute_cost(\n            execution_cost=minting_time_range_cost_two, protocol_params=protocol_params\n        )\n    \n        issuer_init_balance = cluster.get_address_balance(issuer_addr.address)\n    \n        # Step 1: fund the token issuer\n    \n        tx_files_step1 = clusterlib.TxFiles(\n            signing_key_files=[payment_addr.skey_file],\n        )\n        txouts_step1 = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=script_fund),\n            # for collaterals\n            clusterlib.TxOut(address=issuer_addr.address, amount=minting_cost1.collateral),\n            clusterlib.TxOut(address=issuer_addr.address, amount=minting_cost2.collateral),\n        ]\n        tx_output_step1 = cluster.build_tx(\n            src_address=payment_addr.address,\n            tx_name=f\"{temp_template}_step1\",\n            tx_files=tx_files_step1,\n            txouts=txouts_step1,\n            fee_buffer=2_000_000,\n            # don't join 'change' and 'collateral' txouts, we need separate UTxOs\n            join_txouts=False,\n        )\n        tx_signed_step1 = cluster.sign_tx(\n            tx_body_file=tx_output_step1.out_file,\n            signing_key_files=tx_files_step1.signing_key_files,\n            tx_name=f\"{temp_template}_step1\",\n        )\n        cluster.submit_tx(tx_file=tx_signed_step1, txins=tx_output_step1.txins)\n    \n        issuer_step1_balance = cluster.get_address_balance(issuer_addr.address)\n        assert (\n            issuer_step1_balance\n            == issuer_init_balance\n            + script_fund\n            + minting_cost1.collateral\n            + minting_cost2.collateral\n        ), f\"Incorrect balance for token issuer address `{issuer_addr.address}`\"\n    \n        # Step 2: mint the \"qacoins\"\n    \n        txid_step1 = cluster.get_txid(tx_body_file=tx_output_step1.out_file)\n        mint_utxos = cluster.get_utxo(txin=f\"{txid_step1}#1\")\n        collateral_utxo1 = cluster.get_utxo(txin=f\"{txid_step1}#2\")\n        collateral_utxo2 = cluster.get_utxo(txin=f\"{txid_step1}#3\")\n    \n        slot_step2 = cluster.get_slot_no()\n    \n        # \"time range\" qacoin\n        slots_offset = 200\n        timestamp_offset_ms = int(slots_offset * cluster.slot_length + 5) * 1_000\n    \n        protocol_version = cluster.get_protocol_params()[\"protocolVersion\"][\"major\"]\n        if protocol_version > 5:\n            # POSIX timestamp + offset\n            redeemer_value_timerange = (\n                int(datetime.datetime.now().timestamp() * 1_000) + timestamp_offset_ms\n            )\n        else:\n            # BUG: https://github.com/input-output-hk/cardano-node/issues/3090\n            redeemer_value_timerange = 1_000_000_000_000\n    \n        policyid_timerange = cluster.get_policyid(plutus_common.MINTING_TIME_RANGE_PLUTUS_V1)\n        asset_name_timerange = f\"qacoint{clusterlib.get_rand_str(4)}\".encode(\"utf-8\").hex()\n        token_timerange = f\"{policyid_timerange}.{asset_name_timerange}\"\n        mint_txouts_timerange = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=token_amount, coin=token_timerange)\n        ]\n    \n        # \"anyone can mint\" qacoin\n        redeemer_cbor_file = plutus_common.REDEEMER_42_CBOR\n        policyid_anyone = cluster.get_policyid(plutus_common.MINTING_PLUTUS_V1)\n        asset_name_anyone = f\"qacoina{clusterlib.get_rand_str(4)}\".encode(\"utf-8\").hex()\n        token_anyone = f\"{policyid_anyone}.{asset_name_anyone}\"\n        mint_txouts_anyone = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=token_amount, coin=token_anyone)\n        ]\n    \n        # mint the tokens\n        plutus_mint_data = [\n            clusterlib.Mint(\n                txouts=mint_txouts_timerange,\n                script_file=plutus_common.MINTING_TIME_RANGE_PLUTUS_V1,\n                collaterals=collateral_utxo1,\n                redeemer_value=str(redeemer_value_timerange),\n            ),\n            clusterlib.Mint(\n                txouts=mint_txouts_anyone,\n                script_file=plutus_common.MINTING_PLUTUS_V1,\n                collaterals=collateral_utxo2,\n                redeemer_cbor_file=redeemer_cbor_file,\n            ),\n        ]\n    \n        tx_files_step2 = clusterlib.TxFiles(\n            signing_key_files=[issuer_addr.skey_file],\n        )\n        txouts_step2 = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=lovelace_amount),\n            *mint_txouts_timerange,\n            *mint_txouts_anyone,\n        ]\n        tx_output_step2 = cluster.build_tx(\n            src_address=payment_addr.address,\n            tx_name=f\"{temp_template}_step2\",\n            tx_files=tx_files_step2,\n            txins=mint_utxos,\n            txouts=txouts_step2,\n            mint=plutus_mint_data,\n            invalid_before=slot_step2 - slots_offset,\n            invalid_hereafter=slot_step2 + slots_offset,\n        )\n        plutus_cost = cluster.calculate_plutus_script_cost(\n            src_address=payment_addr.address,\n            tx_name=f\"{temp_template}_step2\",\n            tx_files=tx_files_step2,\n            txins=mint_utxos,\n            txouts=txouts_step2,\n            mint=plutus_mint_data,\n            invalid_before=slot_step2 - slots_offset,\n            invalid_hereafter=slot_step2 + slots_offset,\n        )\n        tx_signed_step2 = cluster.sign_tx(\n            tx_body_file=tx_output_step2.out_file,\n            signing_key_files=tx_files_step2.signing_key_files,\n            tx_name=f\"{temp_template}_step2\",\n        )\n        cluster.submit_tx(tx_file=tx_signed_step2, txins=mint_utxos)\n    \n        assert (\n            cluster.get_address_balance(issuer_addr.address)\n            == issuer_init_balance\n            + minting_cost1.collateral\n            + minting_cost2.collateral\n            + lovelace_amount\n        ), f\"Incorrect balance for token issuer address `{issuer_addr.address}`\"\n    \n        token_utxo_timerange = cluster.get_utxo(\n            address=issuer_addr.address, coins=[token_timerange]\n        )\n        assert (\n            token_utxo_timerange and token_utxo_timerange[0].amount == token_amount\n        ), \"The 'timerange' token was not minted\"\n    \n        token_utxo_anyone = cluster.get_utxo(address=issuer_addr.address, coins=[token_anyone])\n        assert (\n            token_utxo_anyone and token_utxo_anyone[0].amount == token_amount\n        ), \"The 'anyone' token was not minted\"\n    \n        # check expected fees\n        expected_fee_step1 = 168_977\n        assert helpers.is_in_interval(tx_output_step1.fee, expected_fee_step1, frac=0.15)\n    \n        expected_fee_step2 = 633_269\n        assert helpers.is_in_interval(tx_output_step2.fee, expected_fee_step2, frac=0.15)\n    \n>       plutus_common.check_plutus_cost(\n            plutus_cost=plutus_cost,\n            expected_cost=[minting_cost_two, minting_time_range_cost_two],\n        )\n\n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/tests/test_plutus_mint_build.py:574: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nplutus_cost = [{'executionUnits': {'memory': 1126016, 'steps': 297744405}, 'lovelaceCost': 86439, 'scriptHash': 'fda1b6b487bee2e7f64... 'steps': 312830204}, 'lovelaceCost': 91158, 'scriptHash': '2f1c5f2d86e2d956a79bef0a18bf293d5caa552af506aacb455ec954'}]\nexpected_cost = [ExecutionCost(per_time=408545501, per_space=1126016, fixed_cost=94428), ExecutionCost(per_time=427707230, per_space=1188952, fixed_cost=99441)]\n\n    def check_plutus_cost(plutus_cost: List[dict], expected_cost: List[ExecutionCost]):\n        \"\"\"Check plutus transaction cost.\n    \n        units: the time is in picoseconds and the space is in bytes.\n        \"\"\"\n        # sort records by total cost\n        sorted_plutus = sorted(\n            plutus_cost,\n            key=lambda x: x[\"executionUnits\"][\"memory\"]  # type: ignore\n            + x[\"executionUnits\"][\"steps\"]\n            + x[\"lovelaceCost\"],\n        )\n        sorted_expected = sorted(expected_cost, key=lambda x: x.per_space + x.per_time + x.fixed_cost)\n    \n        errors = []\n        for costs, expected_values in zip(sorted_plutus, sorted_expected):\n            tx_time = costs[\"executionUnits\"][\"steps\"]\n            tx_space = costs[\"executionUnits\"][\"memory\"]\n            lovelace_cost = costs[\"lovelaceCost\"]\n    \n            if not helpers.is_in_interval(tx_time, expected_values.per_time, frac=0.15):\n                errors.append(f\"time: {tx_time} vs {expected_values.per_time}\")\n            if not helpers.is_in_interval(tx_space, expected_values.per_space, frac=0.15):\n                errors.append(f\"space: {tx_space} vs {expected_values.per_space}\")\n            if not helpers.is_in_interval(lovelace_cost, expected_values.fixed_cost, frac=0.15):\n                errors.append(f\"fixed cost: {lovelace_cost} vs {expected_values.fixed_cost}\")\n    \n        if errors:\n>           raise AssertionError(\"\\n\".join(errors))\nE           AssertionError: time: 297744405 vs 408545501\nE           time: 312830204 vs 427707230\n\n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/tests/plutus_common.py:162: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1655372825536,
      "stop" : 1655372825536,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1655369880144,
      "stop" : 1655369880144,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1655372825536,
      "stop" : 1655372825536,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1655369880145,
      "stop" : 1655369880146,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1655372825536,
      "stop" : 1655372825536,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "payment_addrs",
    "time" : {
      "start" : 1655372825786,
      "stop" : 1655372907169,
      "duration" : 81383
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1655372825536,
      "stop" : 1655372825536,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1655369880145,
      "stop" : 1655369880145,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster",
    "time" : {
      "start" : 1655372825536,
      "stop" : 1655372825786,
      "duration" : 250
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1655369880146,
      "stop" : 1655369880196,
      "duration" : 50
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1655369880144,
      "stop" : 1655369880145,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1655369880196,
      "stop" : 1655369880197,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1655373004948,
      "stop" : 1655373004948,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1655373004946,
      "stop" : 1655373004948,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1655382172993,
      "stop" : 1655382172993,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1655382172991,
      "stop" : 1655382172992,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "testnets"
  }, {
    "name" : "tag",
    "value" : "dbsync"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='runs only with Alonzo+ TX')"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_plutus_mint_build"
  }, {
    "name" : "subSuite",
    "value" : "TestBuildMinting"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "868881-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_plutus_mint_build"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/226d3f30ecdb15f2868842956c7979f6179e24a9/cardano_node_tests/tests/test_plutus_mint_build.py#L374",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/226d3f30ecdb15f2868842956c7979f6179e24a9/cardano_node_tests/tests/test_plutus_mint_build.py#L374",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "3c0e916bceed57a6",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1655369876188,
        "stop" : 1655369876188,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.skipif(False, reason='runs only with Alonzo+ TX')", "dbsync", "smoke", "testnets" ]
  },
  "source" : "412dd714ca6559a7.json",
  "parameterValues" : [ ]
}