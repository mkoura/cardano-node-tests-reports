{
  "uid" : "c249f41aeaf1a060",
  "name" : "test_witness_redeemer[normal]",
  "fullName" : "cardano_node_tests.tests.test_plutus_mint_build.TestBuildMinting#test_witness_redeemer",
  "historyId" : "08a488190b1954c609b3ec020c20e6e0",
  "time" : {
    "start" : 1655373993240,
    "stop" : 1655374101707,
    "duration" : 108467
  },
  "description" : "Test minting a token with a Plutus script.\n\n        Uses `cardano-cli transaction build` command for building the transactions.\n\n        * fund the token issuer and create a UTxO for collateral\n        * check that the expected amount was transferred to token issuer's address\n        * mint the token using a Plutus script with required signer\n        * check that the token was minted and collateral UTxO was not spent\n        * check expected fees\n        * check expected Plutus cost\n        * (optional) check transactions in db-sync\n        ",
  "descriptionHtml" : "<p>Test minting a token with a Plutus script.</p>\n<pre><code>    Uses `cardano-cli transaction build` command for building the transactions.\n\n    * fund the token issuer and create a UTxO for collateral\n    * check that the expected amount was transferred to token issuer's address\n    * mint the token using a Plutus script with required signer\n    * check that the token was minted and collateral UTxO was not spent\n    * check expected fees\n    * check expected Plutus cost\n    * (optional) check transactions in db-sync\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: time: 261056789 vs 369725712",
  "statusTrace" : "self = <cardano_node_tests.tests.test_plutus_mint_build.TestBuildMinting object at 0x7fc0499ae530>, cluster = <ClusterLib: protocol=cardano, tx_era=babbage>\npayment_addrs = [AddressRecord(address='addr_test1vr0y32gzmyprmmutp2tfrcs7nnv6mfgumwuhr29na9jxzfg35p6e6', vkey_file=PosixPath('test_wi...ness_redeemer_ci0_cfk_payment_addr_1.vkey'), skey_file=PosixPath('test_witness_redeemer_ci0_cfk_payment_addr_1.skey'))], key = 'normal'\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.dbsync\n    @pytest.mark.testnets\n    @pytest.mark.parametrize(\n        \"key\",\n        (\n            \"normal\",\n            \"extended\",\n        ),\n    )\n    def test_witness_redeemer(\n        self,\n        cluster: clusterlib.ClusterLib,\n        payment_addrs: List[clusterlib.AddressRecord],\n        key: str,\n    ):\n        \"\"\"Test minting a token with a Plutus script.\n    \n        Uses `cardano-cli transaction build` command for building the transactions.\n    \n        * fund the token issuer and create a UTxO for collateral\n        * check that the expected amount was transferred to token issuer's address\n        * mint the token using a Plutus script with required signer\n        * check that the token was minted and collateral UTxO was not spent\n        * check expected fees\n        * check expected Plutus cost\n        * (optional) check transactions in db-sync\n        \"\"\"\n        # pylint: disable=too-many-locals\n        temp_template = common.get_test_id(cluster)\n        payment_addr = payment_addrs[0]\n        issuer_addr = payment_addrs[1]\n    \n        lovelace_amount = 2_000_000\n        token_amount = 5\n        script_fund = 200_000_000\n    \n        minting_cost = plutus_common.compute_cost(\n            execution_cost=plutus_common.MINTING_WITNESS_REDEEMER_COST,\n            protocol_params=cluster.get_protocol_params(),\n        )\n    \n        if key == \"normal\":\n            redeemer_file = plutus_common.DATUM_WITNESS_GOLDEN_NORMAL\n            signing_key_golden = plutus_common.SIGNING_KEY_GOLDEN\n        else:\n            redeemer_file = plutus_common.DATUM_WITNESS_GOLDEN_EXTENDED\n            signing_key_golden = plutus_common.SIGNING_KEY_GOLDEN_EXTENDED\n    \n        issuer_init_balance = cluster.get_address_balance(issuer_addr.address)\n    \n        # Step 1: fund the token issuer\n    \n        mint_utxos, collateral_utxos, tx_output_step1 = _fund_issuer(\n            cluster_obj=cluster,\n            temp_template=temp_template,\n            payment_addr=payment_addr,\n            issuer_addr=issuer_addr,\n            minting_cost=minting_cost,\n            amount=script_fund,\n        )\n    \n        # Step 2: mint the \"qacoin\"\n    \n        policyid = cluster.get_policyid(plutus_common.MINTING_PLUTUS_V1)\n        asset_name = f\"qacoin{clusterlib.get_rand_str(4)}\".encode(\"utf-8\").hex()\n        token = f\"{policyid}.{asset_name}\"\n        mint_txouts = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=token_amount, coin=token)\n        ]\n    \n        plutus_mint_data = [\n            clusterlib.Mint(\n                txouts=mint_txouts,\n                script_file=plutus_common.MINTING_PLUTUS_V1,\n                collaterals=collateral_utxos,\n                redeemer_file=redeemer_file,\n            )\n        ]\n    \n        tx_files_step2 = clusterlib.TxFiles(\n            signing_key_files=[issuer_addr.skey_file, signing_key_golden],\n        )\n        txouts_step2 = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=lovelace_amount),\n            *mint_txouts,\n        ]\n        tx_output_step2 = cluster.build_tx(\n            src_address=payment_addr.address,\n            tx_name=f\"{temp_template}_step2\",\n            tx_files=tx_files_step2,\n            txins=mint_utxos,\n            txouts=txouts_step2,\n            mint=plutus_mint_data,\n            required_signers=[signing_key_golden],\n        )\n        plutus_cost = cluster.calculate_plutus_script_cost(\n            src_address=payment_addr.address,\n            tx_name=f\"{temp_template}_step2\",\n            tx_files=tx_files_step2,\n            txins=mint_utxos,\n            txouts=txouts_step2,\n            mint=plutus_mint_data,\n            required_signers=[signing_key_golden],\n        )\n        # sign incrementally (just to check that it works)\n        tx_signed_step2 = cluster.sign_tx(\n            tx_body_file=tx_output_step2.out_file,\n            signing_key_files=[issuer_addr.skey_file],\n            tx_name=f\"{temp_template}_step2_sign0\",\n        )\n        tx_signed_step2_inc = cluster.sign_tx(\n            tx_file=tx_signed_step2,\n            signing_key_files=[signing_key_golden],\n            tx_name=f\"{temp_template}_step2_sign1\",\n        )\n        cluster.submit_tx(tx_file=tx_signed_step2_inc, txins=mint_utxos)\n    \n        assert (\n            cluster.get_address_balance(issuer_addr.address)\n            == issuer_init_balance + minting_cost.collateral + lovelace_amount\n        ), f\"Incorrect balance for token issuer address `{issuer_addr.address}`\"\n    \n        token_utxo = cluster.get_utxo(address=issuer_addr.address, coins=[token])\n        assert token_utxo and token_utxo[0].amount == token_amount, \"The token was not minted\"\n    \n        # check expected fees\n        expected_fee_step1 = 167_349\n        assert helpers.is_in_interval(tx_output_step1.fee, expected_fee_step1, frac=0.15)\n    \n        expected_fee_step2 = 372_438\n        assert helpers.is_in_interval(tx_output_step2.fee, expected_fee_step2, frac=0.15)\n    \n>       plutus_common.check_plutus_cost(\n            plutus_cost=plutus_cost,\n            expected_cost=[plutus_common.MINTING_WITNESS_REDEEMER_COST],\n        )\n\n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/tests/test_plutus_mint_build.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nplutus_cost = [{'executionUnits': {'memory': 978434, 'steps': 261056789}, 'lovelaceCost': 75278, 'scriptHash': 'fda1b6b487bee2e7f64ecf24d24b1224342484c0195ee1b7b943db50'}], expected_cost = [ExecutionCost(per_time=369725712, per_space=1013630, fixed_cost=85144)]\n\n    def check_plutus_cost(plutus_cost: List[dict], expected_cost: List[ExecutionCost]):\n        \"\"\"Check plutus transaction cost.\n    \n        units: the time is in picoseconds and the space is in bytes.\n        \"\"\"\n        # sort records by total cost\n        sorted_plutus = sorted(\n            plutus_cost,\n            key=lambda x: x[\"executionUnits\"][\"memory\"]  # type: ignore\n            + x[\"executionUnits\"][\"steps\"]\n            + x[\"lovelaceCost\"],\n        )\n        sorted_expected = sorted(expected_cost, key=lambda x: x.per_space + x.per_time + x.fixed_cost)\n    \n        errors = []\n        for costs, expected_values in zip(sorted_plutus, sorted_expected):\n            tx_time = costs[\"executionUnits\"][\"steps\"]\n            tx_space = costs[\"executionUnits\"][\"memory\"]\n            lovelace_cost = costs[\"lovelaceCost\"]\n    \n            if not helpers.is_in_interval(tx_time, expected_values.per_time, frac=0.15):\n                errors.append(f\"time: {tx_time} vs {expected_values.per_time}\")\n            if not helpers.is_in_interval(tx_space, expected_values.per_space, frac=0.15):\n                errors.append(f\"space: {tx_space} vs {expected_values.per_space}\")\n            if not helpers.is_in_interval(lovelace_cost, expected_values.fixed_cost, frac=0.15):\n                errors.append(f\"fixed cost: {lovelace_cost} vs {expected_values.fixed_cost}\")\n    \n        if errors:\n>           raise AssertionError(\"\\n\".join(errors))\nE           AssertionError: time: 261056789 vs 369725712\n\n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/tests/plutus_common.py:162: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1655373908158,
      "stop" : 1655373908158,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1655369880145,
      "stop" : 1655369880145,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1655369880247,
      "stop" : 1655369880247,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1655373908158,
      "stop" : 1655373908158,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster",
    "time" : {
      "start" : 1655373908159,
      "stop" : 1655373908412,
      "duration" : 253
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "payment_addrs",
    "time" : {
      "start" : 1655373908412,
      "stop" : 1655373993239,
      "duration" : 84827
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1655369880144,
      "stop" : 1655369880145,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1655373908158,
      "stop" : 1655373908159,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1655369880145,
      "stop" : 1655369880145,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1655369880145,
      "stop" : 1655369880247,
      "duration" : 102
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1655373908158,
      "stop" : 1655373908158,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1655369880144,
      "stop" : 1655369880144,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1655382238701,
      "stop" : 1655382238701,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1655374101744,
      "stop" : 1655374101744,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1655374101739,
      "stop" : 1655374101743,
      "duration" : 4
    },
    "status" : "failed",
    "statusMessage" : "AssertionError: Errors found in cluster log files:\n/home/martink/Source/repos/cardano-node1/state-cluster0/relay1.stdout: \u001B[31m[bender-3:cardano.node.PeerSelectionActions:Error:41369]\u001B[0m [2022-06-16 10:06:59.04 UTC] PeerStatusChangeFailure (ColdToWarm Nothing 109.230.224.116:3001) HandshakeClientFailure\n\n/home/martink/Source/repos/cardano-node1/state-cluster0/relay1.stdout: \u001B[34m[bender-3:cardano.node.PeerSelection:Info:56]\u001B[0m [2022-06-16 10:06:59.04 UTC] TracePromoteColdFailed 50 21 109.230.224.116:3001 161.119562334813s ClientException (HandshakeProtocolError (HandshakeError (Refused NodeToNodeV_7 \"version data mismatch: NodeToNodeVersionData {networkMagic = NetworkMagic {unNetworkMagic = 764824073}, diffusionMode = InitiatorAndResponderDiffusionMode} /= NodeToNodeVersionData {networkMagic = NetworkMagic {unNetworkMagic = 9}, diffusionMode = InitiatorAndResponderDiffusionMode}\")))\n\n/home/martink/Source/repos/cardano-node1/state-cluster0/relay1.stdout: \u001B[31m[bender-3:cardano.node.PeerSelectionActions:Error:41377]\u001B[0m [2022-06-16 10:07:04.23 UTC] PeerStatusChangeFailure (ColdToWarm Nothing 122.252.81.169:6000) HandshakeClientFailure\n\n/home/martink/Source/repos/cardano-node1/state-cluster0/relay1.stdout: \u001B[34m[bender-3:cardano.node.PeerSelection:Info:56]\u001B[0m [2022-06-16 10:07:04.23 UTC] TracePromoteColdFailed 50 21 122.252.81.169:6000 161.115559761325s ClientException (HandshakeProtocolError (HandshakeError (Refused NodeToNodeV_7 \"version data mismatch: NodeToNodeVersionData {networkMagic = NetworkMagic {unNetworkMagic = 764824073}, diffusionMode = InitiatorAndResponderDiffusionMode} /= NodeToNodeVersionData {networkMagic = NetworkMagic {unNetworkMagic = 9}, diffusionMode = InitiatorAndResponderDiffusionMode}\")))\n\n",
    "statusTrace" : "  File \"/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/allure_commons/_allure.py\", line 200, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/_pytest/fixtures.py\", line 941, in _teardown_yield_fixture\n    next(it)\n  File \"/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/tests/conftest.py\", line 290, in cluster_manager\n    cluster_manager_obj.on_test_stop()\n  File \"/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/utils/cluster_management.py\", line 357, in on_test_stop\n    logfiles.report_artifacts_errors(errors)\n  File \"/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/utils/logfiles.py\", line 253, in report_artifacts_errors\n    raise AssertionError(f\"Errors found in cluster log files:\\n{err_joined}\") from None\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1655382238697,
      "stop" : 1655382238699,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "testnets"
  }, {
    "name" : "tag",
    "value" : "dbsync"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='runs only with Alonzo+ TX')"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_plutus_mint_build"
  }, {
    "name" : "subSuite",
    "value" : "TestBuildMinting"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "868904-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_plutus_mint_build"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "key",
    "value" : "'normal'"
  } ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/226d3f30ecdb15f2868842956c7979f6179e24a9/cardano_node_tests/tests/test_plutus_mint_build.py#L769",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/226d3f30ecdb15f2868842956c7979f6179e24a9/cardano_node_tests/tests/test_plutus_mint_build.py#L769",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "f37fae30a017e072",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1655369876190,
        "stop" : 1655369876190,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.skipif(False, reason='runs only with Alonzo+ TX')", "dbsync", "smoke", "testnets" ]
  },
  "source" : "c249f41aeaf1a060.json",
  "parameterValues" : [ "'normal'" ]
}