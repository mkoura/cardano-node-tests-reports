{
  "uid" : "e5f42b2404abdd09",
  "name" : "test_two_scripts_spending[mix_v2_v1]",
  "fullName" : "cardano_node_tests.tests.test_plutus_spend_build.TestBuildLocking#test_two_scripts_spending",
  "historyId" : "b4a390db268f88c7cceeaf45bc3789e3",
  "time" : {
    "start" : 1655373410438,
    "stop" : 1655373528984,
    "duration" : 118546
  },
  "description" : "Test locking two Tx outputs with two different Plutus scripts in single Tx.\n\n        Uses `cardano-cli transaction build` command for building the transactions.\n\n        * create a Tx output with a datum hash at the script address\n        * check that the expected amount was locked at the script address\n        * spend the locked UTxO\n        * check that the expected amount was spent\n        * check expected fees\n        * check expected Plutus cost\n        * (optional) check transactions in db-sync\n        ",
  "descriptionHtml" : "<p>Test locking two Tx outputs with two different Plutus scripts in single Tx.</p>\n<pre><code>    Uses `cardano-cli transaction build` command for building the transactions.\n\n    * create a Tx output with a datum hash at the script address\n    * check that the expected amount was locked at the script address\n    * spend the locked UTxO\n    * check that the expected amount was spent\n    * check expected fees\n    * check expected Plutus cost\n    * (optional) check transactions in db-sync\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: time: 280668068 vs 388458303",
  "statusTrace" : "self = <cardano_node_tests.tests.test_plutus_spend_build.TestBuildLocking object at 0x7f0ce2d3b280>, cluster = <ClusterLib: protocol=cardano, tx_era=babbage>\npayment_addrs = [AddressRecord(address='addr_test1vz7lq07swkvauavrk9yepcjz35mfdgwye7nxyla7yjzeutg635dqw', vkey_file=PosixPath('test_tw..._spending_ci0_twn_payment_addr_1.vkey'), skey_file=PosixPath('test_two_scripts_spending_ci0_twn_payment_addr_1.skey'))]\nplutus_version = 'mix_v2_v1'\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.dbsync\n    @pytest.mark.testnets\n    @pytest.mark.parametrize(\n        \"plutus_version\",\n        (\n            \"plutus_v1\",\n            pytest.param(\n                \"mix_v1_v2\",\n                marks=pytest.mark.skipif(\n                    VERSIONS.transaction_era < VERSIONS.BABBAGE or configuration.SKIP_PLUTUSV2,\n                    reason=\"runs only with Babbage+ TX; needs PlutusV2 cost model\",\n                ),\n            ),\n            pytest.param(\n                \"mix_v2_v1\",\n                marks=pytest.mark.skipif(\n                    VERSIONS.transaction_era < VERSIONS.BABBAGE or configuration.SKIP_PLUTUSV2,\n                    reason=\"runs only with Babbage+ TX; needs PlutusV2 cost model\",\n                ),\n            ),\n            pytest.param(\n                \"plutus_v2\",\n                marks=pytest.mark.skipif(\n                    VERSIONS.transaction_era < VERSIONS.BABBAGE or configuration.SKIP_PLUTUSV2,\n                    reason=\"runs only with Babbage+ TX; needs PlutusV2 cost model\",\n                ),\n            ),\n        ),\n    )\n    def test_two_scripts_spending(\n        self,\n        cluster: clusterlib.ClusterLib,\n        payment_addrs: List[clusterlib.AddressRecord],\n        plutus_version: str,\n    ):\n        \"\"\"Test locking two Tx outputs with two different Plutus scripts in single Tx.\n    \n        Uses `cardano-cli transaction build` command for building the transactions.\n    \n        * create a Tx output with a datum hash at the script address\n        * check that the expected amount was locked at the script address\n        * spend the locked UTxO\n        * check that the expected amount was spent\n        * check expected fees\n        * check expected Plutus cost\n        * (optional) check transactions in db-sync\n        \"\"\"\n        # pylint: disable=too-many-locals,too-many-statements\n        temp_template = f\"{common.get_test_id(cluster)}_{plutus_version}\"\n        amount = 2_000_000\n        script_fund = 200_000_000\n    \n        protocol_params = cluster.get_protocol_params()\n    \n        script_file1_v1 = plutus_common.ALWAYS_SUCCEEDS_PLUTUS_V1\n        execution_cost1_v1 = plutus_common.ALWAYS_SUCCEEDS_COST\n        script_file2_v1 = plutus_common.GUESSING_GAME_PLUTUS_V1\n        # this is higher than `plutus_common.GUESSING_GAME_COST`, because the script\n        # context has changed to include more stuff\n        execution_cost2_v1 = plutus_common.ExecutionCost(\n            per_time=388_458_303, per_space=1_031_312, fixed_cost=87_515\n        )\n    \n        script_file1_v2 = plutus_common.ALWAYS_SUCCEEDS_PLUTUS_V2\n        execution_cost1_v2 = plutus_common.ALWAYS_SUCCEEDS_V2_COST\n        script_file2_v2 = plutus_common.GUESSING_GAME_PLUTUS_V2\n        execution_cost2_v2 = plutus_common.ExecutionCost(\n            per_time=208_314_784,\n            per_space=662_274,\n            fixed_cost=53_233,\n        )\n    \n        expected_fee_fund = 174_389\n        if plutus_version == \"plutus_v1\":\n            script_file1 = script_file1_v1\n            execution_cost1 = execution_cost1_v1\n            script_file2 = script_file2_v1\n            execution_cost2 = execution_cost2_v1\n            expected_fee_redeem = 378_768\n        elif plutus_version == \"mix_v1_v2\":\n            script_file1 = script_file1_v1\n            execution_cost1 = execution_cost1_v1\n            script_file2 = script_file2_v2\n            execution_cost2 = execution_cost2_v2\n            expected_fee_redeem = 321_739\n        elif plutus_version == \"mix_v2_v1\":\n            script_file1 = script_file1_v2\n            execution_cost1 = execution_cost1_v2\n            script_file2 = script_file2_v1\n            execution_cost2 = execution_cost2_v1\n            expected_fee_redeem = 378_584\n        elif plutus_version == \"plutus_v2\":\n            script_file1 = script_file1_v2\n            execution_cost1 = execution_cost1_v2\n            script_file2 = script_file2_v2\n            execution_cost2 = execution_cost2_v2\n            expected_fee_redeem = 321_378\n        else:\n            raise AssertionError(\"Unknown test variant.\")\n    \n        plutus_op1 = plutus_common.PlutusOp(\n            script_file=script_file1,\n            datum_file=plutus_common.DATUM_42_TYPED,\n            redeemer_cbor_file=plutus_common.REDEEMER_42_CBOR,\n            execution_cost=execution_cost1,\n        )\n        plutus_op2 = plutus_common.PlutusOp(\n            script_file=script_file2,\n            datum_file=plutus_common.DATUM_42_TYPED,\n            redeemer_cbor_file=plutus_common.REDEEMER_42_TYPED_CBOR,\n            execution_cost=execution_cost2,\n        )\n    \n        # Step 1: fund the Plutus scripts\n    \n        assert plutus_op1.execution_cost and plutus_op2.execution_cost  # for mypy\n    \n        script_address1 = cluster.gen_payment_addr(\n            addr_name=f\"{temp_template}_addr1\", payment_script_file=plutus_op1.script_file\n        )\n        redeem_cost1 = plutus_common.compute_cost(\n            execution_cost=plutus_op1.execution_cost, protocol_params=protocol_params\n        )\n        datum_hash1 = cluster.get_hash_script_data(script_data_file=plutus_op1.datum_file)\n    \n        script_address2 = cluster.gen_payment_addr(\n            addr_name=f\"{temp_template}_addr2\", payment_script_file=plutus_op2.script_file\n        )\n        redeem_cost2 = plutus_common.compute_cost(\n            execution_cost=plutus_op2.execution_cost, protocol_params=protocol_params\n        )\n        datum_hash2 = cluster.get_hash_script_data(script_data_file=plutus_op2.datum_file)\n    \n        # create a Tx output with a datum hash at the script address\n    \n        tx_files_fund = clusterlib.TxFiles(\n            signing_key_files=[payment_addrs[0].skey_file],\n        )\n        txouts_fund = [\n            clusterlib.TxOut(\n                address=script_address1,\n                amount=script_fund,\n                datum_hash=datum_hash1,\n            ),\n            clusterlib.TxOut(\n                address=script_address2,\n                amount=script_fund,\n                datum_hash=datum_hash2,\n            ),\n            # for collateral\n            clusterlib.TxOut(address=payment_addrs[1].address, amount=redeem_cost1.collateral),\n            clusterlib.TxOut(address=payment_addrs[1].address, amount=redeem_cost2.collateral),\n        ]\n        tx_output_fund = cluster.build_tx(\n            src_address=payment_addrs[0].address,\n            tx_name=f\"{temp_template}_step1\",\n            tx_files=tx_files_fund,\n            txouts=txouts_fund,\n            fee_buffer=2_000_000,\n            join_txouts=False,\n        )\n        tx_signed_fund = cluster.sign_tx(\n            tx_body_file=tx_output_fund.out_file,\n            signing_key_files=tx_files_fund.signing_key_files,\n            tx_name=f\"{temp_template}_step1\",\n        )\n    \n        cluster.submit_tx(tx_file=tx_signed_fund, txins=tx_output_fund.txins)\n    \n        txid_fund = cluster.get_txid(tx_body_file=tx_output_fund.out_file)\n        script_utxos1 = cluster.get_utxo(txin=f\"{txid_fund}#1\", coins=[clusterlib.DEFAULT_COIN])\n        script_utxos2 = cluster.get_utxo(txin=f\"{txid_fund}#2\", coins=[clusterlib.DEFAULT_COIN])\n        collateral_utxos1 = cluster.get_utxo(txin=f\"{txid_fund}#3\")\n        collateral_utxos2 = cluster.get_utxo(txin=f\"{txid_fund}#4\")\n    \n        assert script_utxos1 and script_utxos2, \"No script UTxOs\"\n        assert collateral_utxos1 and collateral_utxos2, \"No collateral UTxOs\"\n    \n        assert (\n            script_utxos1[0].amount == script_fund\n        ), f\"Incorrect balance for script address `{script_utxos1[0].address}`\"\n        assert (\n            script_utxos2[0].amount == script_fund\n        ), f\"Incorrect balance for script address `{script_utxos2[0].address}`\"\n    \n        # Step 2: spend the \"locked\" UTxOs\n    \n        assert plutus_op1.datum_file and plutus_op2.datum_file\n        assert plutus_op1.redeemer_cbor_file and plutus_op2.redeemer_cbor_file\n    \n        plutus_txins = [\n            clusterlib.ScriptTxIn(\n                txins=script_utxos1,\n                script_file=plutus_op1.script_file,\n                collaterals=collateral_utxos1,\n                datum_file=plutus_op1.datum_file,\n                redeemer_cbor_file=plutus_op1.redeemer_cbor_file,\n            ),\n            clusterlib.ScriptTxIn(\n                txins=script_utxos2,\n                script_file=plutus_op2.script_file,\n                collaterals=collateral_utxos2,\n                datum_file=plutus_op2.datum_file,\n                redeemer_cbor_file=plutus_op2.redeemer_cbor_file,\n            ),\n        ]\n        tx_files_redeem = clusterlib.TxFiles(\n            signing_key_files=[payment_addrs[1].skey_file],\n        )\n        txouts_redeem = [\n            clusterlib.TxOut(address=payment_addrs[1].address, amount=amount * 2),\n        ]\n        tx_output_redeem = cluster.build_tx(\n            src_address=payment_addrs[0].address,\n            tx_name=f\"{temp_template}_step2\",\n            tx_files=tx_files_redeem,\n            txouts=txouts_redeem,\n            script_txins=plutus_txins,\n            change_address=payment_addrs[0].address,\n        )\n    \n        # calculate cost of Plutus script\n        plutus_cost = cluster.calculate_plutus_script_cost(\n            src_address=payment_addrs[0].address,\n            tx_name=f\"{temp_template}_step2\",\n            tx_files=tx_files_redeem,\n            txouts=txouts_redeem,\n            script_txins=plutus_txins,\n            change_address=payment_addrs[0].address,\n        )\n    \n        tx_signed_redeem = cluster.sign_tx(\n            tx_body_file=tx_output_redeem.out_file,\n            signing_key_files=tx_files_redeem.signing_key_files,\n            tx_name=f\"{temp_template}_step2\",\n        )\n    \n        dst_init_balance = cluster.get_address_balance(payment_addrs[1].address)\n    \n        cluster.submit_tx(\n            tx_file=tx_signed_redeem,\n            txins=[t.txins[0] for t in tx_output_redeem.script_txins if t.txins],\n        )\n    \n        assert (\n            cluster.get_address_balance(payment_addrs[1].address) == dst_init_balance + amount * 2\n        ), f\"Incorrect balance for destination address `{payment_addrs[1].address}`\"\n    \n        script_utxos_lovelace = [\n            u for u in [*script_utxos1, *script_utxos2] if u.coin == clusterlib.DEFAULT_COIN\n        ]\n        for u in script_utxos_lovelace:\n            assert not cluster.get_utxo(\n                txin=f\"{u.utxo_hash}#{u.utxo_ix}\", coins=[clusterlib.DEFAULT_COIN]\n            ), f\"Inputs were NOT spent for `{u.address}`\"\n    \n        # check expected fees\n        assert helpers.is_in_interval(tx_output_fund.fee, expected_fee_fund, frac=0.15)\n        assert helpers.is_in_interval(tx_output_redeem.fee, expected_fee_redeem, frac=0.15)\n    \n>       plutus_common.check_plutus_cost(\n            plutus_cost=plutus_cost,\n            expected_cost=[execution_cost1, execution_cost2],\n        )\n\n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/tests/test_plutus_spend_build.py:956: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nplutus_cost = [{'executionUnits': {'memory': 1031312, 'steps': 280668068}, 'lovelaceCost': 79743, 'scriptHash': 'b9ff787a6dedf9ebe60... 1100, 'steps': 230100}, 'lovelaceCost': 81, 'scriptHash': '3a888d65f16790950a72daee1f63aa05add6d268434107cfa5b67712'}]\nexpected_cost = [ExecutionCost(per_time=230100, per_space=1100, fixed_cost=81), ExecutionCost(per_time=388458303, per_space=1031312, fixed_cost=87515)]\n\n    def check_plutus_cost(plutus_cost: List[dict], expected_cost: List[ExecutionCost]):\n        \"\"\"Check plutus transaction cost.\n    \n        units: the time is in picoseconds and the space is in bytes.\n        \"\"\"\n        # sort records by total cost\n        sorted_plutus = sorted(\n            plutus_cost,\n            key=lambda x: x[\"executionUnits\"][\"memory\"]  # type: ignore\n            + x[\"executionUnits\"][\"steps\"]\n            + x[\"lovelaceCost\"],\n        )\n        sorted_expected = sorted(expected_cost, key=lambda x: x.per_space + x.per_time + x.fixed_cost)\n    \n        errors = []\n        for costs, expected_values in zip(sorted_plutus, sorted_expected):\n            tx_time = costs[\"executionUnits\"][\"steps\"]\n            tx_space = costs[\"executionUnits\"][\"memory\"]\n            lovelace_cost = costs[\"lovelaceCost\"]\n    \n            if not helpers.is_in_interval(tx_time, expected_values.per_time, frac=0.15):\n                errors.append(f\"time: {tx_time} vs {expected_values.per_time}\")\n            if not helpers.is_in_interval(tx_space, expected_values.per_space, frac=0.15):\n                errors.append(f\"space: {tx_space} vs {expected_values.per_space}\")\n            if not helpers.is_in_interval(lovelace_cost, expected_values.fixed_cost, frac=0.15):\n                errors.append(f\"fixed cost: {lovelace_cost} vs {expected_values.fixed_cost}\")\n    \n        if errors:\n>           raise AssertionError(\"\\n\".join(errors))\nE           AssertionError: time: 280668068 vs 388458303\n\n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/tests/plutus_common.py:162: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "worker_id",
    "time" : {
      "start" : 1655369880145,
      "stop" : 1655369880145,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1655371872616,
      "stop" : 1655371872616,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1655369880144,
      "stop" : 1655369880145,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1655373206828,
      "stop" : 1655373206828,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "payment_addrs",
    "time" : {
      "start" : 1655373207084,
      "stop" : 1655373410437,
      "duration" : 203353
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1655369880144,
      "stop" : 1655369880144,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1655369880146,
      "stop" : 1655369880146,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1655369880145,
      "stop" : 1655369880146,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster",
    "time" : {
      "start" : 1655373206828,
      "stop" : 1655373207084,
      "duration" : 256
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1655373206828,
      "stop" : 1655373206828,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1655373206828,
      "stop" : 1655373206828,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1655369880145,
      "stop" : 1655369880145,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1655381524191,
      "stop" : 1655381524192,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1655373529012,
      "stop" : 1655373529015,
      "duration" : 3
    },
    "status" : "failed",
    "statusMessage" : "AssertionError: Errors found in cluster log files:\n/home/martink/Source/repos/cardano-node1/state-cluster0/relay1.stdout: \u001B[31m[bender-3:cardano.node.PeerSelectionActions:Error:410]\u001B[0m [2022-06-16 09:58:40.62 UTC] PeerStatusChangeFailure (HotToWarm (ConnectionId {localAddress = 192.168.124.157:30501, remoteAddress = 154.12.248.114:6001})) TimeoutError\n\n/home/martink/Source/repos/cardano-node1/state-cluster0/relay1.stdout: \u001B[31m[bender-3:cardano.node.PeerSelectionActions:Error:37332]\u001B[0m [2022-06-16 09:58:40.62 UTC] PeerStatusChangeFailure (HotToCold (ConnectionId {localAddress = 192.168.124.157:30501, remoteAddress = 154.12.248.114:6001})) (ApplicationFailure [MiniProtocolException {mpeMiniProtocolNumber = MiniProtocolNum 4, mpeMiniProtocolException = MuxError (MuxShutdown Nothing) \"Mux stoping\"}])\n\n/home/martink/Source/repos/cardano-node1/state-cluster0/relay1.stdout: \u001B[34m[bender-3:cardano.node.PeerSelection:Info:56]\u001B[0m [2022-06-16 09:58:40.62 UTC] TraceDemoteHotFailed 20 19 154.12.248.114:6001 (MiniProtocolExceptions [MiniProtocolException {mpeMiniProtocolNumber = MiniProtocolNum 4, mpeMiniProtocolException = MuxError (MuxShutdown Nothing) \"Mux stoping\"}])\n\n",
    "statusTrace" : "  File \"/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/allure_commons/_allure.py\", line 200, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/_pytest/fixtures.py\", line 941, in _teardown_yield_fixture\n    next(it)\n  File \"/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/tests/conftest.py\", line 290, in cluster_manager\n    cluster_manager_obj.on_test_stop()\n  File \"/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/utils/cluster_management.py\", line 357, in on_test_stop\n    logfiles.report_artifacts_errors(errors)\n  File \"/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/utils/logfiles.py\", line 253, in report_artifacts_errors\n    raise AssertionError(f\"Errors found in cluster log files:\\n{err_joined}\") from None\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1655373529016,
      "stop" : 1655373529016,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1655381524194,
      "stop" : 1655381524194,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "testnets"
  }, {
    "name" : "tag",
    "value" : "dbsync"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='runs only with Babbage+ TX; needs PlutusV2 cost model')"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_plutus_spend_build"
  }, {
    "name" : "subSuite",
    "value" : "TestBuildLocking"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "868893-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_plutus_spend_build"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "plutus_version",
    "value" : "'mix_v2_v1'"
  } ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/226d3f30ecdb15f2868842956c7979f6179e24a9/cardano_node_tests/tests/test_plutus_spend_build.py#L695",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/226d3f30ecdb15f2868842956c7979f6179e24a9/cardano_node_tests/tests/test_plutus_spend_build.py#L695",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "c3083404c5bb42bc",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1655369876218,
        "stop" : 1655369876218,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.skipif(False, reason='runs only with Babbage+ TX; needs PlutusV2 cost model')", "dbsync", "smoke", "testnets" ]
  },
  "source" : "e5f42b2404abdd09.json",
  "parameterValues" : [ "'mix_v2_v1'" ]
}