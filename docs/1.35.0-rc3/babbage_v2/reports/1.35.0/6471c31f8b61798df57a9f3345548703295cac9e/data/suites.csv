"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Thu Jun 16 14:15:44 CEST 2022","Thu Jun 16 14:15:44 CEST 2022","844","cardano_node_tests.tests","test_native_tokens","TestPolicies","","","test_policy_before_future","Test that it's NOT possible to mint tokens when the policy is not met.

        The ""before"" slot is in the future and the given range is invalid.
        "
"passed","Thu Jun 16 12:56:36 CEST 2022","Thu Jun 16 12:56:40 CEST 2022","4018","cardano_node_tests.tests","test_scripts","TestAuxiliaryScripts","","","test_tx_script_no_metadata[build_raw]","Send transaction with auxiliary script and no other metadata.

        Check that the auxiliary script is present in the TX body.
        "
"passed","Thu Jun 16 12:58:55 CEST 2022","Thu Jun 16 12:58:55 CEST 2022","339","cardano_node_tests.tests","test_native_tokens","TestPolicies","","","test_policy_after_past","Test that it's NOT possible to mint tokens when the policy is not met.

        The ""after"" slot is in the past.
        "
"passed","Thu Jun 16 12:44:45 CEST 2022","Thu Jun 16 12:44:57 CEST 2022","11875","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_partial_spending[plutus_v1]","Test spending part of funds (Lovelace and native tokens) on a locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output that contains native tokens with a datum hash at the script address
        * check that expected amounts of Lovelace and native tokens were locked at the script
          address
        * spend the locked UTxO and create new locked UTxO with change
        * check that the expected amounts of Lovelace and native tokens were spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:45:30 CEST 2022","Thu Jun 16 12:45:40 CEST 2022","9952","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_wrong_value_inside_range[plutus_v1]","Try to spend a locked UTxO with a wrong redeemer value that is in the valid range.

        Expect failure.
        "
"passed","Thu Jun 16 12:45:00 CEST 2022","Thu Jun 16 12:45:06 CEST 2022","5883","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_invalid_guessing_game[plutus_v1-42_43]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"passed","Thu Jun 16 12:56:52 CEST 2022","Thu Jun 16 12:56:57 CEST 2022","4678","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_after_past[build_raw]","Check that it's NOT possible to spend from the script address.

        The ""after"" slot is in the past.
        "
"passed","Thu Jun 16 12:41:04 CEST 2022","Thu Jun 16 12:41:08 CEST 2022","4178","cardano_node_tests.tests","test_plutus_mint_raw","TestMintingNegative","","","test_past_horizon[100000]","Test minting a token with ttl too far in the future.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * try to mint a token using a Plutus script when ttl is set too far in the future
        * check that minting failed because of 'PastHorizon' failure
        "
"passed","Thu Jun 16 12:56:27 CEST 2022","Thu Jun 16 12:56:31 CEST 2022","3894","cardano_node_tests.tests","test_scripts","TestAuxiliaryScripts","","","test_tx_script_metadata_json[build]","Send transaction with auxiliary script and metadata JSON.

        Check that the auxiliary script is present in the TX body.
        "
"passed","Thu Jun 16 13:00:57 CEST 2022","Thu Jun 16 13:01:09 CEST 2022","11829","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_tx_metadata_no_txout","Send transaction with just metadata, no UTxO is produced.

        * submit a transaction where all funds available on source address is used for fee
        * check that no UTxOs are created by the transaction
        * check that there are no funds left on source address
        * check that the metadata in TX body matches the original metadata
        "
"passed","Thu Jun 16 12:43:30 CEST 2022","Thu Jun 16 12:43:37 CEST 2022","6690","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_two_scripts_spending[plutus_v2]","Test locking two Tx outputs with two different Plutus scripts in single Tx.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:57:57 CEST 2022","Thu Jun 16 12:57:57 CEST 2022","150","cardano_node_tests.tests","test_transactions","TestBasic","","","test_build_multiple_same_txins","Build a transaction with multiple identical txins.

        Uses `cardano-cli transaction build` command for building the transactions.
        "
"passed","Thu Jun 16 12:58:25 CEST 2022","Thu Jun 16 12:58:31 CEST 2022","6143","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_1_addr[build-1500000]","Test 1 transaction from 1 payment address to 10 payment addresses.

        * send funds from 1 source address to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:57:25 CEST 2022","Thu Jun 16 12:57:25 CEST 2022","84","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_pool_deregistration_fees[addr_fee0]","Test pool deregistration fees."
"passed","Thu Jun 16 12:57:17 CEST 2022","Thu Jun 16 12:57:17 CEST 2022","71","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_addr_registration_fees[addr_fee1]","Test stake address registration fees."
"passed","Thu Jun 16 12:49:33 CEST 2022","Thu Jun 16 12:49:39 CEST 2022","6316","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_two_scripts_spending[mix_v1_v2]","Test locking two Tx outputs with two different Plutus scripts in single Tx.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:50:16 CEST 2022","Thu Jun 16 12:50:23 CEST 2022","7099","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_guessing_game[plutus_v2-untyped_value]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:45:32 CEST 2022","Thu Jun 16 12:45:48 CEST 2022","16043","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_collateral_is_txin[plutus_v2]","Test spending the locked UTxO while using single UTxO for both collateral and Tx input.

        Uses `cardano-cli transaction build` command for building the transactions.

        Tests bug https://github.com/input-output-hk/cardano-db-sync/issues/750

        * create a Tx output with a datum hash at the script address and a collateral UTxO
        * check that the expected amount was locked at the script address
        * spend the locked UTxO while using the collateral UTxO both as collateral and as
          normal Tx input
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:56:16 CEST 2022","Thu Jun 16 12:56:23 CEST 2022","6311","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_script_before[build]","Check that it is possible to spend from script address before given slot."
"passed","Thu Jun 16 12:56:52 CEST 2022","Thu Jun 16 12:56:52 CEST 2022","87","cardano_node_tests.tests","test_transaction_fees","TestFee","","","test_smaller_fee[1.5]","Try to send a transaction with smaller-than-expected fee.

        Expect failure.
        "
"passed","Thu Jun 16 12:57:24 CEST 2022","Thu Jun 16 12:57:25 CEST 2022","146","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_10_addrs_from_10_addrs_fees[amount_expected2]","Test fees for 1 tx from 10 payment addresses to 10 payment addresses."
"passed","Thu Jun 16 12:43:58 CEST 2022","Thu Jun 16 12:44:08 CEST 2022","9625","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_guessing_game[plutus_v1-typed_cbor]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"skipped","Thu Jun 16 12:31:38 CEST 2022","Thu Jun 16 12:31:38 CEST 2022","0","cardano_node_tests.tests","test_staking_rewards","TestRewards","","","test_2_pools_same_reward_addr","Check that one reward address used for two pools receives rewards for both of them.

        * set pool2 reward address to the reward address of pool1 by resubmitting the pool
          registration certificate
        * collect data for both pool1 and pool2 for several epochs and with the help of db-sync

           - check that the original reward address for pool2 is NOT receiving rewards
           - check that the reward address for pool1 is now receiving rewards for both pools

        * check records in db-sync

           - transaction inputs, outputs, withdrawals, etc.
           - reward amounts received each epoch
           - expected pool ids
        "
"passed","Thu Jun 16 13:46:07 CEST 2022","Thu Jun 16 13:48:40 CEST 2022","152564","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_exceed_pay_stake_addr_from[treasury]","Try to send more funds than available from the reserves or treasury pot to stake address.

        Expect failure.

        * generate an MIR certificate
        * submit a TX with the MIR certificate
        * check that submitting the transaction fails with an expected error
        "
"passed","Thu Jun 16 12:59:09 CEST 2022","Thu Jun 16 12:59:18 CEST 2022","9442","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_10_addrs[build-10000000]","Test 1 transaction from 10 payment addresses to 10 payment addresses.

        * send funds from 10 source addresses to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:52:29 CEST 2022","Thu Jun 16 12:52:33 CEST 2022","4174","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_collateral_percent[plutus_v1]","Try to spend locked UTxO while collateral is less than required by `collateralPercentage`.

        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * create a collateral UTxO with amount of ADA less than required by `collateralPercentage`
        * try to spend the UTxO
        * check that the expected error was raised
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:41:55 CEST 2022","Thu Jun 16 12:41:56 CEST 2022","1350","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMintingNegative","","","test_past_horizon[3000]","Test minting a token with ttl too far in the future.

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.

        * try to mint a token using a Plutus script when ttl is set too far in the future
        * check that minting failed because of 'PastHorizon' failure
        "
"passed","Thu Jun 16 12:53:02 CEST 2022","Thu Jun 16 12:53:03 CEST 2022","1489","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_typed_int_bytes_declared[plutus_v1]","Try to build a Tx using byte string for redeemer when JSON schema specifies int.

        Redeemer is in typed format and the value doesn't comply to JSON schema. Expect failure.
        "
"skipped","Thu Jun 16 12:40:32 CEST 2022","Thu Jun 16 12:40:32 CEST 2022","0","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMinting","","","test_minting_context_equivalance","Test context equivalence while minting a token.

        Uses `cardano-cli transaction build` command for building the transactions.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * generate a dummy redeemer and a dummy Tx
        * derive the correct redeemer from the dummy Tx
        * mint the token using the derived redeemer
        * check that the token was minted and collateral UTxO was not spent
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:46:16 CEST 2022","Thu Jun 16 12:46:17 CEST 2022","1384","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_wrong_value_above_range[plutus_v1]","Try to spend a locked UTxO with a wrong redeemer value, above max value allowed.

        Expect failure.
        "
"passed","Thu Jun 16 12:52:37 CEST 2022","Thu Jun 16 12:52:39 CEST 2022","2755","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeDatum","","","test_no_datum_txout[plutus_v2]","Test using UTxO without datum hash in place of locked UTxO.

        Expect failure.

        * create a Tx output without a datum hash
        * try to spend the UTxO like it was locked Plutus UTxO
        * check that the expected error was raised
        "
"passed","Thu Jun 16 12:40:59 CEST 2022","Thu Jun 16 12:41:09 CEST 2022","9428","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMinting","","","test_witness_redeemer[extended]","Test minting a token with a Plutus script.

        Uses `cardano-cli transaction build` command for building the transactions.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * mint the token using a Plutus script with required signer
        * check that the token was minted and collateral UTxO was not spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:40:08 CEST 2022","Thu Jun 16 12:40:13 CEST 2022","5345","cardano_node_tests.tests","test_plutus_mint_raw","TestMintingNegative","","","test_low_fee","Test minting a token when fee is set too low.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * try to mint a token using a Plutus script when fee is set lower than is the computed fee
        * check that minting failed because the fee amount was too low
        "
"passed","Thu Jun 16 12:57:24 CEST 2022","Thu Jun 16 12:57:24 CEST 2022","148","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_10_addrs_from_10_addrs_fees[amount_expected1]","Test fees for 1 tx from 10 payment addresses to 10 payment addresses."
"passed","Thu Jun 16 12:49:24 CEST 2022","Thu Jun 16 12:49:27 CEST 2022","3070","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_two_scripts_spending[plutus_v1]","Test locking two Tx outputs with two different Plutus scripts in single Tx.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:51:03 CEST 2022","Thu Jun 16 12:51:19 CEST 2022","16409","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_collateral_w_tokens[plutus_v1]","Test spending the locked UTxO while collateral contains native tokens.

        Expect failure.

        * create a collateral UTxO with native tokens
        * try to spend the locked UTxO
        * check that the expected error was raised
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:57:16 CEST 2022","Thu Jun 16 12:57:16 CEST 2022","205","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_pool_registration_fees[addr_fee2]","Test pool registration fees."
"passed","Thu Jun 16 12:48:10 CEST 2022","Thu Jun 16 12:48:11 CEST 2022","1488","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_untyped_invalid_type[plutus_v1]","Try to build a Tx using a JSON untyped schema that specifies an invalid type.

        Expect failure.
        "
"passed","Thu Jun 16 12:49:49 CEST 2022","Thu Jun 16 12:50:11 CEST 2022","21206","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_partial_spending[plutus_v2]","Test spending part of funds (Lovelace and native tokens) on a locked UTxO.

        * create a Tx output that contains native tokens with a datum hash at the script address
        * check that expected amounts of Lovelace and native tokens were locked at the script
          address
        * spend the locked UTxO and create new locked UTxO with change
        * check that the expected amounts of Lovelace and native tokens were spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:53:04 CEST 2022","Thu Jun 16 12:53:33 CEST 2022","28573","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_delegate_using_vkey[build_raw]","Submit registration certificate and delegate to pool using cold vkey.

        * register stake address and delegate it to pool
        * check that the stake address was delegated
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 13:00:43 CEST 2022","Thu Jun 16 13:00:43 CEST 2022","26","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_build_tx_invalid_json_metadata","Try to build a transaction with invalid metadata JSON.

        Uses `cardano-cli transaction build` command for building the transactions.

        The metadata file is an invalid JSON.
        "
"passed","Thu Jun 16 12:57:41 CEST 2022","Thu Jun 16 12:57:41 CEST 2022","85","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_pool_deregistration_fees[addr_fee2]","Test pool deregistration fees."
"passed","Thu Jun 16 12:43:36 CEST 2022","Thu Jun 16 12:43:47 CEST 2022","11281","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_guessing_game[plutus_v2-untyped_json]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:34:09 CEST 2022","Thu Jun 16 12:34:14 CEST 2022","4384","cardano_node_tests.tests","test_native_tokens","TestNegative","","","test_long_name","Try to create token with asset name that is longer than allowed.

        The name can also contain characters that are not allowed. Expect failure.
        "
"passed","Thu Jun 16 12:39:36 CEST 2022","Thu Jun 16 12:42:07 CEST 2022","151327","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_exceed_pay_stake_addr_from[reserves]","Try to send more funds than available from the reserves or treasury pot to stake address.

        Expect failure.

        * generate an MIR certificate
        * submit a TX with the MIR certificate
        * check that submitting the transaction fails with an expected error
        "
"passed","Thu Jun 16 13:19:34 CEST 2022","Thu Jun 16 13:21:59 CEST 2022","145542","cardano_node_tests.tests","test_pools","TestStakePool","","","test_sign_in_multiple_stages","Create and register a stake pool with TX signed in multiple stages.

        * create stake pool registration cert
        * create witness file for each signing key
        * sign TX using witness files
        * create and register pool
        * check that the pool was correctly registered on chain
        "
"passed","Thu Jun 16 12:40:19 CEST 2022","Thu Jun 16 12:40:32 CEST 2022","12977","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMinting","","","test_two_scripts_minting","Test minting two tokens with two different Plutus scripts.

        Uses `cardano-cli transaction build` command for building the transactions.

        * fund the token issuer and create a UTxO for collaterals
        * check that the expected amount was transferred to token issuer's address
        * mint the tokens using two different Plutus scripts
        * check that the tokens were minted and collateral UTxOs were not spent
        * check transaction view output
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:52:46 CEST 2022","Thu Jun 16 12:52:52 CEST 2022","6308","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeDatum","","","test_lock_tx_invalid_datum[plutus_v1]","Test locking a Tx output with an invalid datum.

        Expect failure.
        "
"passed","Thu Jun 16 12:39:24 CEST 2022","Thu Jun 16 12:39:27 CEST 2022","2945","cardano_node_tests.tests","test_plutus_mint_raw","TestMintingNegative","","","test_minting_with_insufficient_collateral","Test minting a token with a Plutus script with insufficient collateral.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral with insufficient funds
        * check that the expected amount was transferred to token issuer's address
        * mint the token using a Plutus script
        * check that the minting failed because a collateral with insufficient funds was provided
        "
"passed","Thu Jun 16 12:53:53 CEST 2022","Thu Jun 16 12:53:53 CEST 2022","159","cardano_node_tests.tests","test_pools","TestNegative","","","test_pool_deregistration_not_registered[build_raw]","Try to deregister pool that is not registered.

        Expect failure.
        "
"passed","Thu Jun 16 12:25:44 CEST 2022","Thu Jun 16 12:52:11 CEST 2022","1586438","cardano_node_tests.tests","test_staking_rewards","TestRewards","","","test_decreasing_reward_transfered_funds","Check that rewards are gradually decreasing when funds are being transfered.

        Even though nothing is staked and rewards are being transferred from reward address, there
        are still some funds staked on the reward address at the time ledger snapshot is taken. For
        that reason the reward amount received every epoch is gradually decreasing over the period
        of several epochs until it is finally 0.

        * delegate stake address
        * wait for first reward
        * transfer all funds from payment address back to faucet, so no funds are staked
        * keep withdrawing new rewards so reward balance is 0
        * check that reward amount is decreasing epoch after epoch
        "
"passed","Thu Jun 16 12:59:03 CEST 2022","Thu Jun 16 12:59:11 CEST 2022","8669","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_10_addrs[build-1500000]","Test 1 transaction from 10 payment addresses to 10 payment addresses.

        * send funds from 10 source addresses to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:39:43 CEST 2022","Thu Jun 16 12:39:55 CEST 2022","11690","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMinting","","","test_minting_one_token","Test minting a token with a Plutus script.

        Uses `cardano-cli transaction build` command for building the transactions.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * mint the token using a Plutus script
        * check that the token was minted and collateral UTxO was not spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:48:43 CEST 2022","Thu Jun 16 12:48:46 CEST 2022","2854","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_guessing_game[plutus_v1-typed_cbor]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:00:14 CEST 2022","Thu Jun 16 13:00:16 CEST 2022","1860","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_send_funds_from_invalid_address","Try to send funds from non-existent address (property-based test).

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"passed","Thu Jun 16 12:45:17 CEST 2022","Thu Jun 16 12:45:27 CEST 2022","10368","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_collateral_is_txin[plutus_v1]","Test spending the locked UTxO while using single UTxO for both collateral and Tx input.

        Uses `cardano-cli transaction build` command for building the transactions.

        Tests bug https://github.com/input-output-hk/cardano-db-sync/issues/750

        * create a Tx output with a datum hash at the script address and a collateral UTxO
        * check that the expected amount was locked at the script address
        * spend the locked UTxO while using the collateral UTxO both as collateral and as
          normal Tx input
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:57:43 CEST 2022","Thu Jun 16 12:57:47 CEST 2022","4209","cardano_node_tests.tests","test_transactions","TestBasic","","","test_build_no_change","Send funds to payment address and balance the outputs so that there is no change.

        Uses `cardano-cli transaction build` command for building the transactions.

        Tests bug https://github.com/input-output-hk/cardano-node/issues/3041

        * try to build a Tx that sends all available funds, and extract fee amount
          from the error message
        * send all available funds minus fee from source address to destination address
        * check that no change UTxO was created
        "
"passed","Thu Jun 16 12:49:41 CEST 2022","Thu Jun 16 12:49:49 CEST 2022","7512","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_guessing_game[plutus_v2-typed_json]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:37:07 CEST 2022","Thu Jun 16 12:37:10 CEST 2022","3017","cardano_node_tests.tests","test_plutus_mint_raw","TestMinting","","","test_witness_redeemer[normal]","Test minting a token with a Plutus script.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * mint the token using a Plutus script with required signer
        * check that the token was minted and collateral UTxO was not spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:48:21 CEST 2022","Thu Jun 16 12:48:23 CEST 2022","1472","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_untyped_int_bytes_declared[plutus_v2]","Try to build a Tx using byte string for redeemer when JSON schema specifies int.

        Redeemer is in untyped format and the value doesn't comply to JSON schema.
        Expect failure.
        "
"passed","Thu Jun 16 13:00:56 CEST 2022","Thu Jun 16 13:00:58 CEST 2022","2370","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_tx_duplicate_metadata_keys","Send transaction with multiple metadata JSON files and with duplicate keys.

        * check that the metadata in TX body matches the original metadata
        * check that in case of duplicate keys the first occurrence is used
        "
"passed","Thu Jun 16 14:08:47 CEST 2022","Thu Jun 16 14:11:57 CEST 2022","190863","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_pay_unregistered_stake_addr_from[treasury-addr_known]","Send funds from the reserves or treasury pot to unregistered stake address.

        * generate an MIR certificate
        * if a stake address should be known on blockchain:

            - register the stake address
            - if transferring funds from treasury, deregister the stake address
              BEFORE submitting the TX

        * submit a TX with the MIR certificate
        * if a stake address should be known on blockchain and if transferring funds from reserves,
          deregister the stake address AFTER submitting the TX
        * check that the amount was NOT added to the stake address reward account
        * (optional) check transaction in db-sync
        "
"passed","Thu Jun 16 12:56:53 CEST 2022","Thu Jun 16 12:56:56 CEST 2022","3014","cardano_node_tests.tests","test_transaction_fees","TestFee","","","test_expected_or_higher_fee[0]","Send a transaction with fee that is same or higher than expected."
"passed","Thu Jun 16 13:58:59 CEST 2022","Thu Jun 16 13:59:00 CEST 2022","1122","cardano_node_tests.tests","test_native_tokens","TestPolicies","","","test_policy_before_past","Test that it's NOT possible to mint tokens when the ""before"" slot is in the past."
"passed","Thu Jun 16 13:03:16 CEST 2022","Thu Jun 16 13:08:40 CEST 2022","324069","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_pay_stake_addr_from[reserves]","Send funds from the reserves or treasury pot to stake address.

        * generate an MIR certificate
        * submit a TX with the MIR certificate
        * check that the expected amount was added to the stake address reward account
        * (optional) check transaction in db-sync
        "
"passed","Thu Jun 16 13:00:31 CEST 2022","Thu Jun 16 13:00:31 CEST 2022","39","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_missing_change_address","Try to build a transaction with a missing `--change-address` parameter.

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"skipped","Thu Jun 16 12:53:33 CEST 2022","Thu Jun 16 12:53:33 CEST 2022","0","cardano_node_tests.tests","test_cli","TestCLI","","","test_testnet_whole_utxo","Check that it is possible to return the whole UTxO on testnets."
"passed","Thu Jun 16 12:57:51 CEST 2022","Thu Jun 16 12:57:57 CEST 2022","5043","cardano_node_tests.tests","test_transactions","TestBasic","","","test_duplicate_signing_keys","Send a transaction with duplicate signing key.

        Check that it is possible to specify the same signing key twice.
        "
"passed","Thu Jun 16 12:56:36 CEST 2022","Thu Jun 16 12:56:40 CEST 2022","4080","cardano_node_tests.tests","test_scripts","TestAuxiliaryScripts","","","test_tx_script_metadata_cbor[build]","Send transaction with auxiliary script and metadata CBOR.

        Check that the auxiliary script is present in the TX body.
        "
"passed","Thu Jun 16 12:56:46 CEST 2022","Thu Jun 16 12:56:50 CEST 2022","4408","cardano_node_tests.tests","test_scripts","TestIncrementalSigning","","","test_incremental_signing[witnessed-build_raw]","Send funds from script address using TX that is signed incrementally.

        Test with Tx body created by both `transaction build` and `transaction build-raw`.
        Test with Tx created by both `transaction sign` and `transaction assemble`.
        "
"passed","Thu Jun 16 12:56:25 CEST 2022","Thu Jun 16 12:56:30 CEST 2022","4418","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_before_future[build]","Check that it's NOT possible to spend from the script address.

        The ""before"" slot is in the future and the given range is invalid.
        "
"passed","Thu Jun 16 12:59:35 CEST 2022","Thu Jun 16 12:59:43 CEST 2022","8803","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_100_addrs_from_50_addrs[build_raw-5000000]","Test 1 transaction from 50 payment addresses to 100 payment addresses.

        * send funds from 50 source addresses to 100 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:58:59 CEST 2022","Thu Jun 16 12:59:09 CEST 2022","9548","cardano_node_tests.tests","test_pools","TestStakePool","","","test_create_stake_pool[build-3]","Create and register a stake pool (without metadata).

        Check that pool was registered.
        "
"passed","Thu Jun 16 12:59:32 CEST 2022","Thu Jun 16 13:05:21 CEST 2022","349134","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_build_pay_stake_addr_from[treasury]","Send funds from the reserves or treasury pot to stake address.

        Uses `cardano-cli transaction build` command for building the transactions.

        * generate an MIR certificate
        * submit a TX with the MIR certificate
        * check that the expected amount was added to the stake address reward account
        * (optional) check transaction in db-sync
        "
"passed","Thu Jun 16 12:52:46 CEST 2022","Thu Jun 16 12:52:47 CEST 2022","1426","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_wrong_value_above_range[plutus_v1]","Try to spend a locked UTxO with a redeemer int value > maximum allowed value.

        Expect failure.
        "
"passed","Thu Jun 16 12:44:52 CEST 2022","Thu Jun 16 12:44:57 CEST 2022","5407","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_same_collateral_txin[plutus_v2]","Test spending the locked UTxO while using the same UTxO as collateral.

        Expect failure.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO while using the same UTxO as collateral
        * check that the expected error was raised
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:23:07 CEST 2022","Thu Jun 16 13:23:12 CEST 2022","5719","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_tokens[build_raw-1]","Test sending tokens to payment address.

        * send tokens from 1 source address to 1 destination address
        * check expected token balances for both source and destination addresses
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:33:08 CEST 2022","Thu Jun 16 12:33:11 CEST 2022","2579","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_tokens[build-200]","Test sending tokens to payment address.

        * send tokens from 1 source address to 1 destination address
        * check expected token balances for both source and destination addresses
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:53:10 CEST 2022","Thu Jun 16 12:53:16 CEST 2022","6378","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeDatum","","","test_no_datum_txout[plutus_v1]","Test using UTxO without datum hash in place of locked UTxO.

        Expect failure.

        * create a Tx output without a datum hash
        * try to spend the UTxO like it was locked Plutus UTxO
        * check that the expected error was raised
        "
"passed","Thu Jun 16 12:55:21 CEST 2022","Thu Jun 16 12:55:24 CEST 2022","3063","cardano_node_tests.tests","test_scripts","TestBasic","","","test_normal_tx_to_script_addr[build_raw]","Send funds to script address using TX signed with skeys (not using witness files)."
"passed","Thu Jun 16 13:00:30 CEST 2022","Thu Jun 16 13:00:30 CEST 2022","77","cardano_node_tests.tests","test_transactions","TestNegative","","","test_missing_tx_in","Try to build a transaction with a missing `--tx-in` parameter.

        Expect failure.
        "
"passed","Thu Jun 16 12:47:41 CEST 2022","Thu Jun 16 12:47:50 CEST 2022","9325","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeDatum","","","test_unlock_tx_wrong_datum[plutus_v1]","Test locking a Tx output and try to spend it with a wrong datum.

        Expect failure.
        "
"passed","Thu Jun 16 12:49:17 CEST 2022","Thu Jun 16 12:49:27 CEST 2022","9854","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_txout_token_locking[plutus_v2]","Test locking a Tx output with native tokens and spending the locked UTxO.

        * create a Tx output that contains native tokens with a datum hash at the script address
        * check that expected amounts of Lovelace and native tokens were locked at the script
          address
        * spend the locked UTxO
        * check that the expected amounts of Lovelace and native tokens were spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:48:58 CEST 2022","Thu Jun 16 12:49:13 CEST 2022","14171","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_guessing_game[plutus_v2-untyped_cbor]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:36:51 CEST 2022","Thu Jun 16 12:36:58 CEST 2022","6530","cardano_node_tests.tests","test_plutus_mint_raw","TestMinting","","","test_minting_two_tokens","Test minting two tokens with a single Plutus script.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * mint the tokens using a Plutus script
        * check that the tokens were minted and collateral UTxO was not spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:32:04 CEST 2022","Thu Jun 16 13:32:15 CEST 2022","10781","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_and_burning_witnesses[build_raw-empty_asset_name]","Test minting and burning of tokens, sign the transaction using witnesses.

        * mint 2 tokens - one identified by policyid + asset name
          and one identified by just policyid
        * burn the minted tokens
        * check fees in Lovelace
        * check output of the `transaction view` command
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:25:45 CEST 2022","Thu Jun 16 12:28:38 CEST 2022","173373","cardano_node_tests.tests","test_pools","TestStakePool","","","test_deregister_stake_pool[build_raw]","Deregister stake pool.

        * deregister stake pool
        * check that the stake addresses are no longer delegated
        * check that the pool deposit was returned to reward account
        "
"passed","Thu Jun 16 12:57:57 CEST 2022","Thu Jun 16 12:58:06 CEST 2022","8786","cardano_node_tests.tests","test_transactions","TestBasic","","","test_utxo_with_datum_hash","Create a UTxO with datum hash in a regular address and spend it.

        * create a UTxO with a datum hash at the payment address
        * check that the UTxO was created with the respective datum hash
        * spend the UTxO (not providing the datum hash)
        * check that the UTxO was spent
        "
"passed","Thu Jun 16 12:44:58 CEST 2022","Thu Jun 16 12:45:13 CEST 2022","14698","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_partial_spending[plutus_v2]","Test spending part of funds (Lovelace and native tokens) on a locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output that contains native tokens with a datum hash at the script address
        * check that expected amounts of Lovelace and native tokens were locked at the script
          address
        * spend the locked UTxO and create new locked UTxO with change
        * check that the expected amounts of Lovelace and native tokens were spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:02:40 CEST 2022","Thu Jun 16 13:02:58 CEST 2022","18244","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_delegate_using_pool_id[build]","Submit registration certificate and delegate to pool using pool id.

        * register stake address and delegate it to pool
        * check that the stake address was delegated
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:53:44 CEST 2022","Thu Jun 16 12:53:51 CEST 2022","6996","cardano_node_tests.tests","test_delegation","TestNegative","","","test_delegate_addr_with_wrong_key","Try to delegate stake address using wrong payment skey.

        Expect failure.
        "
"passed","Thu Jun 16 13:58:55 CEST 2022","Thu Jun 16 14:12:13 CEST 2022","797561","cardano_node_tests.tests","test_plutus_delegation","TestDelegateAddr","","","test_delegate_deregister","Delegate and deregister Plutus script stake address.

        * submit registration certificate and delegate stake address to pool
        * check that the stake address was delegated
        * withdraw rewards to payment address and deregister stake address
        * check that the key deposit was returned and rewards withdrawn
        * check that the stake address is no longer delegated
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:54:07 CEST 2022","Thu Jun 16 12:58:41 CEST 2022","273213","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_pay_stake_addr_from[treasury]","Send funds from the reserves or treasury pot to stake address.

        * generate an MIR certificate
        * submit a TX with the MIR certificate
        * check that the expected amount was added to the stake address reward account
        * (optional) check transaction in db-sync
        "
"passed","Thu Jun 16 12:50:55 CEST 2022","Thu Jun 16 12:50:59 CEST 2022","4830","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_invalid_guessing_game[plutus_v2-43_43]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"passed","Thu Jun 16 12:40:45 CEST 2022","Thu Jun 16 12:40:59 CEST 2022","14529","cardano_node_tests.tests","test_plutus_mint_raw","TestMintingNegative","","","test_past_horizon[10000]","Test minting a token with ttl too far in the future.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * try to mint a token using a Plutus script when ttl is set too far in the future
        * check that minting failed because of 'PastHorizon' failure
        "
"passed","Thu Jun 16 13:58:47 CEST 2022","Thu Jun 16 14:08:40 CEST 2022","592343","cardano_node_tests.tests","test_update_proposals","TestUpdateProposals","","","test_update_proposal","Test changing protocol parameters using update proposal.

        * if era >= Alonzo, update Alonzo-specific parameters and:

           - wait for next epoch
           - check that parameters were updated

        * submit update proposal
        * in the same epoch, submit another update proposal
        * wait for next epoch
        * check that parameters were updated with the values submitted in the second
          update proposal, i.e. the second update proposal overwritten the first one
        "
"passed","Thu Jun 16 13:00:00 CEST 2022","Thu Jun 16 13:00:00 CEST 2022","39","cardano_node_tests.tests","test_transactions","TestNegative","","","test_send_funds_to_utxo_address[build_raw]","Try to send funds from payment address to UTxO address.

        Expect failure.
        "
"passed","Thu Jun 16 12:33:32 CEST 2022","Thu Jun 16 12:33:45 CEST 2022","12622","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_multiple_tokens[build]","Test sending multiple different tokens to payment addresses.

        * send multiple different tokens from 1 source address to 2 destination addresses
        * check expected token balances for both source and destination addresses for each token
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:56:31 CEST 2022","Thu Jun 16 12:56:36 CEST 2022","4423","cardano_node_tests.tests","test_scripts","TestAuxiliaryScripts","","","test_tx_script_metadata_cbor[build_raw]","Send transaction with auxiliary script and metadata CBOR.

        Check that the auxiliary script is present in the TX body.
        "
"passed","Thu Jun 16 12:47:50 CEST 2022","Thu Jun 16 12:47:51 CEST 2022","1513","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_typed_invalid_type[plutus_v2]","Try to build a Tx using a JSON typed schema that specifies an invalid type.

        Expect failure.
        "
"passed","Thu Jun 16 12:54:09 CEST 2022","Thu Jun 16 12:54:09 CEST 2022","13","cardano_node_tests.tests","test_pools","TestNegative","","","test_stake_pool_metadata_no_homepage","Try to create pool metadata hash when missing the *homepage* key.

        Expect failure.
        "
"passed","Thu Jun 16 12:52:21 CEST 2022","Thu Jun 16 12:52:22 CEST 2022","1423","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_typed_bytes_int_declared[plutus_v1]","Try to build a Tx using int value for redeemer when JSON schema specifies byte string.

        Redeemer is in typed format and the value doesn't comply to JSON schema. Expect failure.
        "
"passed","Thu Jun 16 13:00:03 CEST 2022","Thu Jun 16 13:00:03 CEST 2022","97","cardano_node_tests.tests","test_transactions","TestNegative","","","test_wrong_signing_key","Try to send a transaction signed with wrong signing key.

        Expect failure.
        "
"skipped","Thu Jun 16 12:48:29 CEST 2022","Thu Jun 16 12:48:29 CEST 2022","0","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_context_equivalance","Test context equivalence while spending a locked UTxO.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * generate a dummy redeemer and a dummy Tx
        * derive the correct redeemer from the dummy Tx
        * spend the locked UTxO using the derived redeemer
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:58:58 CEST 2022","Thu Jun 16 12:59:02 CEST 2022","3816","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_1_addr_from_10_addrs[build-2000000]","Test 1 transaction from 10 payment addresses to 1 payment address.

        * send funds from 10 source addresses to 1 destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:46:10 CEST 2022","Thu Jun 16 12:46:11 CEST 2022","1400","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_untyped_bytes_int_declared[plutus_v1]","Try to build a Tx using int value for redeemer when JSON schema specifies byte string.

        Redeemer is in untyped format and the value doesn't comply to JSON schema.
        Expect failure.
        "
"passed","Thu Jun 16 13:00:31 CEST 2022","Thu Jun 16 13:00:31 CEST 2022","38","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_multiple_change_addresses","Try to build a transaction with multiple `--change-address` parameters.

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"passed","Thu Jun 16 12:33:45 CEST 2022","Thu Jun 16 12:33:45 CEST 2022","88","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_no_ada[build]","Try to create an UTxO with just native tokens, no ADA. Expect failure."
"passed","Thu Jun 16 12:55:27 CEST 2022","Thu Jun 16 12:55:30 CEST 2022","2376","cardano_node_tests.tests","test_pools","TestNegative","","","test_stake_pool_long_metadata_url","Try to create pool registration cert when the *metadata-url* is longer than allowed.

        Expect failure. Property-based test.
        "
"passed","Thu Jun 16 13:40:14 CEST 2022","Thu Jun 16 13:40:24 CEST 2022","10077","cardano_node_tests.tests","test_pools","TestPoolCost","","","test_stake_pool_low_cost","Try to create and register a stake pool with pool cost lower than *minPoolCost*.

        Expect failure. Property-based test.
        "
"skipped","Thu Jun 16 12:59:55 CEST 2022","Thu Jun 16 12:59:57 CEST 2022","2773","cardano_node_tests.tests","test_transactions","TestNegative","","","test_far_future_ttl","Try to send a transaction with ttl too far in the future.

        Too far means slot further away than current slot + 3k/f slot.

        Expect failure.
        "
"passed","Thu Jun 16 12:55:50 CEST 2022","Thu Jun 16 12:55:57 CEST 2022","7788","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_script_after[build_raw]","Check that it is possible to spend from script address after given slot."
"skipped","Thu Jun 16 12:55:46 CEST 2022","Thu Jun 16 12:55:49 CEST 2022","3200","cardano_node_tests.tests","test_scripts","TestBasic","","","test_multisig_no_required_atleast","Send funds from script address using the *atLeast* script with no required witnesses."
"passed","Thu Jun 16 12:41:18 CEST 2022","Thu Jun 16 12:41:38 CEST 2022","19516","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_guessing_game[plutus_v1-untyped_value]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:56:52 CEST 2022","Thu Jun 16 12:56:52 CEST 2022","49","cardano_node_tests.tests","test_transaction_fees","TestFee","","","test_smaller_fee[0]","Try to send a transaction with smaller-than-expected fee.

        Expect failure.
        "
"passed","Thu Jun 16 12:57:04 CEST 2022","Thu Jun 16 12:57:08 CEST 2022","4027","cardano_node_tests.tests","test_transaction_fees","TestFee","","","test_expected_or_higher_fee[1000000]","Send a transaction with fee that is same or higher than expected."
"passed","Thu Jun 16 12:25:48 CEST 2022","Thu Jun 16 12:51:38 CEST 2022","1549894","cardano_node_tests.tests","test_kes","TestKES","","","test_opcert_future_kes_period","Start a stake pool with an operational certificate created with invalid `--kes-period`.

        * generate new operational certificate with `--kes-period` in the future
        * restart the node with the new operational certificate
        * check that the pool is not producing any blocks
        * if network era > Alonzo

            - generate new operational certificate with valid `--kes-period`, but counter value +2
              from last used operational ceritificate
            - restart the node
            - check that the pool is not producing any blocks

        * generate new operational certificate with valid `--kes-period` and restart the node
        * check that the pool is producing blocks again
        "
"passed","Thu Jun 16 13:55:30 CEST 2022","Thu Jun 16 13:55:32 CEST 2022","2133","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_addr_registration_certificate_order[build]","Submit (de)registration certificates in single TX and check that the order matter.

        * create stake address registration cert
        * create stake address deregistration cert
        * register, deregister, register, deregister and register stake address in single TX
        * check that the address is registered
        * check that the balance for source address was correctly updated and that key deposit
          was needed
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:59:25 CEST 2022","Thu Jun 16 12:59:40 CEST 2022","15664","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_100_addrs_from_50_addrs[build-5000000]","Test 1 transaction from 50 payment addresses to 100 payment addresses.

        * send funds from 50 source addresses to 100 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:28:44 CEST 2022","Thu Jun 16 12:28:48 CEST 2022","3892","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_addr_registration_deregistration[build]","Submit registration and deregistration certificates in single TX.

        * create stake address registration cert
        * create stake address deregistration cert
        * register and deregister stake address in single TX
        * check that the balance for source address was correctly updated and that key deposit
          was not needed
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:53:32 CEST 2022","Thu Jun 16 12:53:40 CEST 2022","7636","cardano_node_tests.tests","test_plutus_v2_spend_build","TestNegativeInlineDatum","","","test_lock_tx_invalid_datum","Test locking a Tx output with an invalid datum.

        Expect failure.
        "
"passed","Thu Jun 16 12:52:24 CEST 2022","Thu Jun 16 12:52:26 CEST 2022","1395","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_untyped_bytes_int_declared[plutus_v1]","Try to build a Tx using int value for redeemer when JSON schema specifies byte string.

        Redeemer is in untyped format and the value doesn't comply to JSON schema. Expect failure.
        "
"passed","Thu Jun 16 13:40:24 CEST 2022","Thu Jun 16 13:52:12 CEST 2022","707997","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_deregister","Deregister stake address.

        * create two payment addresses that share single stake address
        * register and delegate the stake address to pool
        * attempt to deregister the stake address - deregistration is expected to fail
          because there are rewards in the stake address
        * withdraw rewards to payment address and deregister stake address
        * check that the key deposit was returned and rewards withdrawn
        * check that the stake address is no longer delegated
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:54:50 CEST 2022","Thu Jun 16 12:55:20 CEST 2022","29787","cardano_node_tests.tests","test_scripts","TestBasic","","","test_multisig_atleast[build]","Send funds to and from script address using the *atLeast* script."
"skipped","Thu Jun 16 12:54:09 CEST 2022","Thu Jun 16 12:54:09 CEST 2022","0","cardano_node_tests.tests","test_protocol","TestProtocol","","","test_protocol_state_outfile","Check output file produced by `query protocol-state`."
"passed","Thu Jun 16 12:57:57 CEST 2022","Thu Jun 16 12:57:57 CEST 2022","76","cardano_node_tests.tests","test_transactions","TestBasic","","","test_missing_tx_out","Build a transaction with a missing `--tx-out` parameter."
"passed","Thu Jun 16 12:57:47 CEST 2022","Thu Jun 16 12:57:51 CEST 2022","3632","cardano_node_tests.tests","test_transactions","TestBasic","","","test_extra_signing_keys","Send a transaction with extra signing key.

        Check that it is possible to use unneeded signing key in addition to the necessary
        signing keys for signing the transaction.
        "
"passed","Thu Jun 16 12:52:19 CEST 2022","Thu Jun 16 12:52:20 CEST 2022","1493","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_untyped_int_bytes_declared[plutus_v2]","Try to build a Tx using byte string for redeemer when JSON schema specifies int.

        Redeemer is in untyped format and the value doesn't comply to JSON schema. Expect failure.
        "
"passed","Thu Jun 16 13:00:40 CEST 2022","Thu Jun 16 13:00:40 CEST 2022","28","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_build_tx_too_long_metadata_json","Try to build a transaction with metadata JSON longer than 64 bytes.

        Uses `cardano-cli transaction build` command for building the transactions.
        "
"passed","Thu Jun 16 12:47:12 CEST 2022","Thu Jun 16 12:47:19 CEST 2022","6426","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeDatum","","","test_lock_tx_invalid_datum[plutus_v1]","Test locking a Tx output with an invalid datum.

        Expect failure.
        "
"passed","Thu Jun 16 12:57:22 CEST 2022","Thu Jun 16 12:57:23 CEST 2022","149","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_1_addr_from_10_addrs_fees[amount_expected1]","Test fees for 1 tx from 10 payment addresses to 1 payment address."
"passed","Thu Jun 16 12:39:31 CEST 2022","Thu Jun 16 12:39:38 CEST 2022","6961","cardano_node_tests.tests","test_plutus_mint_raw","TestMintingNegative","","","test_minting_with_limited_collateral","Test minting a token with a Plutus script with limited collateral amount.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * mint the token using a Plutus script while limiting the usable collateral amount
        * check that the minting failed because insufficient collateral amount was provided
        "
"skipped","Thu Jun 16 13:29:08 CEST 2022","Thu Jun 16 13:29:10 CEST 2022","2611","cardano_node_tests.tests","test_blocks","TestLeadershipSchedule","","","test_unstable_stake_distribution","Try to query leadership schedule for next epoch when stake distribution is unstable.

        Expect failure.
        "
"passed","Thu Jun 16 12:28:49 CEST 2022","Thu Jun 16 12:29:05 CEST 2022","16075","cardano_node_tests.tests","test_delegation","TestNegative","","","test_delegate_deregistered_addr[build_raw]","Try to delegate deregistered stake address.

        Expect failure.
        "
"passed","Thu Jun 16 13:01:16 CEST 2022","Thu Jun 16 13:31:53 CEST 2022","1837054","cardano_node_tests.tests","test_staking_rewards","TestRewards","","","test_redelegation","Check rewards received by stake address over multiple epochs.

        The address is re-delegated and deregistred / re-registered multiple times.

        * delegate stake address to pool
        * in next epoch, re-delegate to another pool
        * in next epoch, deregister stake address, immediatelly re-register and delegate to pool
        * in next epoch, deregister stake address, wait for second half of an epoch, re-register
          and delegate to pool
        * while doing the steps above, collect data for pool user for 8 epochs

           - each epoch check ledger state (expected data in `pstake*`, delegation, stake amount)
           - each epoch check received reward with reward in ledger state

        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:56:40 CEST 2022","Thu Jun 16 12:56:47 CEST 2022","7668","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_after_future[build_raw]","Check that it's NOT possible to spend from the script address.

        The ""after"" slot is in the future and the given range is invalid.
        "
"skipped","Thu Jun 16 12:54:09 CEST 2022","Thu Jun 16 12:54:09 CEST 2022","0","cardano_node_tests.tests","test_protocol","TestProtocol","","","test_protocol_params","Check output of `query protocol-parameters`."
"passed","Thu Jun 16 13:00:12 CEST 2022","Thu Jun 16 13:00:13 CEST 2022","1770","cardano_node_tests.tests","test_transactions","TestNegative","","","test_send_funds_from_invalid_address","Try to send funds from invalid address (property-based test).

        Expect failure.
        "
"passed","Thu Jun 16 12:57:19 CEST 2022","Thu Jun 16 12:57:19 CEST 2022","161","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_addr_deregistration_fees[addr_fee3]","Test stake address deregistration fees."
"skipped","Thu Jun 16 13:00:30 CEST 2022","Thu Jun 16 13:00:30 CEST 2022","0","cardano_node_tests.tests","test_transactions","TestNegative","","","test_missing_ttl","Try to build a Shelley era TX with a missing `--ttl` (`--invalid-hereafter`) parameter.

        Expect failure.
        "
"passed","Thu Jun 16 12:32:58 CEST 2022","Thu Jun 16 12:33:08 CEST 2022","10056","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_tokens[build-10]","Test sending tokens to payment address.

        * send tokens from 1 source address to 1 destination address
        * check expected token balances for both source and destination addresses
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:51:32 CEST 2022","Thu Jun 16 12:51:33 CEST 2022","1178","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_invalid_guessing_game[plutus_v1-42_43]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"passed","Thu Jun 16 14:11:59 CEST 2022","Thu Jun 16 14:12:00 CEST 2022","592","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_bundle_minting_and_burning_witnesses[tokens_db4]","Test minting and burning multiple different tokens that are in single bundle.

        Sign the TX using witnesses.

        * mint several tokens using a single script
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"skipped","Thu Jun 16 13:00:58 CEST 2022","Thu Jun 16 13:00:58 CEST 2022","0","cardano_node_tests.tests","test_dbsync","TestDBSync","","","test_blocks","Check expected values in the `block` table in db-sync."
"passed","Thu Jun 16 12:25:45 CEST 2022","Thu Jun 16 13:02:32 CEST 2022","2206645","cardano_node_tests.tests","test_staking_no_rewards","TestNoRewards","","","test_no_reward_deregistered_reward_addr","Check that the reward address is not receiving rewards when deregistered.

        The stake pool continues to operate normally and those who delegate to that pool receive
        rewards.

        * delegate stake address
        * wait for first reward
        * withdraw pool rewards to payment address
        * deregister the pool reward address
        * check that the key deposit was returned
        * check that pool owner is NOT receiving rewards
        * check that new rewards are received by those delegating to the pool
        * return the pool to the original state - reregister reward address
        * check that pool owner is receiving rewards
        "
"passed","Thu Jun 16 12:57:19 CEST 2022","Thu Jun 16 12:57:19 CEST 2022","39","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_1_addr_from_1_addr_fees[amount_expected0]","Test fees for 1 tx from 1 payment address to 1 payment address."
"passed","Thu Jun 16 12:44:29 CEST 2022","Thu Jun 16 12:44:38 CEST 2022","8606","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_collateral_w_tokens[plutus_v2]","Test spending the locked UTxO while collateral contains native tokens.

        Expect failure.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a collateral UTxO with native tokens
        * try to spend the locked UTxO
        * check that the expected error was raised
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:50:03 CEST 2022","Thu Jun 16 12:50:14 CEST 2022","10582","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_two_scripts_spending[plutus_v2]","Test locking two Tx outputs with two different Plutus scripts in single Tx.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:42:56 CEST 2022","Thu Jun 16 12:43:14 CEST 2022","17743","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_guessing_game[plutus_v2-typed_cbor]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:58:31 CEST 2022","Thu Jun 16 12:58:45 CEST 2022","13612","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_1_addr[build-10000000]","Test 1 transaction from 1 payment address to 10 payment addresses.

        * send funds from 1 source address to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 13:55:33 CEST 2022","Thu Jun 16 13:55:33 CEST 2022","13","cardano_node_tests.tests","test_kes","TestKES","","","test_no_kes_period_arg","Try to generate new operational certificate without specifying the `--kes-period`.

        Expect failure.
        "
"passed","Thu Jun 16 12:47:39 CEST 2022","Thu Jun 16 12:47:40 CEST 2022","1474","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_typed_int_bytes_declared[plutus_v2]","Try to build a Tx using byte string for redeemer when JSON schema specifies int.

        Redeemer is in typed format and the value doesn't comply to JSON schema.
        Expect failure.
        "
"passed","Thu Jun 16 12:48:04 CEST 2022","Thu Jun 16 12:48:16 CEST 2022","11980","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_txout_locking[plutus_v1]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Corresponds to Exercise 3 for Alonzo Blue.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:59:03 CEST 2022","Thu Jun 16 12:59:08 CEST 2022","5064","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_1_addr_from_10_addrs[build-10000000]","Test 1 transaction from 10 payment addresses to 1 payment address.

        * send funds from 10 source addresses to 1 destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:26:19 CEST 2022","Thu Jun 16 12:26:35 CEST 2022","16608","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_delegate_using_vkey[build]","Submit registration certificate and delegate to pool using cold vkey.

        * register stake address and delegate it to pool
        * check that the stake address was delegated
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 13:00:22 CEST 2022","Thu Jun 16 13:00:26 CEST 2022","3378","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_send_funds_invalid_chars_change_address","Try to send funds using change address with invalid characters (property-based test).

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"skipped","Thu Jun 16 12:54:09 CEST 2022","Thu Jun 16 12:54:09 CEST 2022","0","cardano_node_tests.tests","test_protocol","TestProtocol","","","test_protocol_state_keys","Check output of `query protocol-state`."
"passed","Thu Jun 16 12:55:21 CEST 2022","Thu Jun 16 12:56:05 CEST 2022","43281","cardano_node_tests.tests","test_scripts","TestBasic","","","test_multisig_any[build]","Send funds using the *any* script.

        * send funds to script address
        * send funds from script address using single witness
        * send funds from script address using multiple witnesses
        "
"passed","Thu Jun 16 12:46:13 CEST 2022","Thu Jun 16 12:46:23 CEST 2022","9949","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_wrong_type[plutus_v1]","Try to spend a locked UTxO with a wrong redeemer type, try to use bytes.

        Expect failure.
        "
"passed","Thu Jun 16 12:36:46 CEST 2022","Thu Jun 16 12:36:48 CEST 2022","1767","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMintingNegative","","","test_redeemer_with_simple_minting_script","Test minting a token passing a redeemer for a simple minting script.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral
        * try to mint the token using a simple script passing a redeemer
        * check that the minting failed because a Plutus script is expected
        "
"skipped","Thu Jun 16 12:55:20 CEST 2022","Thu Jun 16 12:55:20 CEST 2022","0","cardano_node_tests.tests","test_blocks","TestLeadershipSchedule","","","test_pool_blocks[current]","Check that blocks were minted according to leadership schedule.

        * query leadership schedule for selected pool for current epoch or next epoch
        * wait for epoch that comes after the queried epoch
        * get info about minted blocks in queried epoch for the selected pool
        * compare leadership schedule with blocks that were actually minted
        * compare db-sync records with ledger state dump
        "
"passed","Thu Jun 16 12:55:33 CEST 2022","Thu Jun 16 12:55:46 CEST 2022","12167","cardano_node_tests.tests","test_scripts","TestBasic","","","test_multisig_empty_all","Send funds from script address using the *all* script with zero skeys."
"passed","Thu Jun 16 12:29:13 CEST 2022","Thu Jun 16 12:35:18 CEST 2022","365548","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_pay_stake_addr_from_both","Send funds from the reserves and treasury pots to stake address.

        * generate an MIR certificate for transferring from treasury
        * generate an MIR certificate for transferring from reserves
        * submit a TX with the treasury MIR certificate
        * in the same epoch as the previous TX, submit a TX with the reserves MIR certificate
        * check that the expected amount was added to the stake address reward account
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:53:38 CEST 2022","Thu Jun 16 12:53:43 CEST 2022","5393","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeDatum","","","test_unlock_tx_wrong_datum[plutus_v2]","Test locking a Tx output and try to spend it with a wrong datum.

        Expect failure.
        "
"passed","Thu Jun 16 13:02:05 CEST 2022","Thu Jun 16 13:02:11 CEST 2022","5443","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_burning_same_token_single_tx","Test minting one token and burning the same token in single transaction.

        Sign transactions using skeys.

        * create a script
        * specify amount to mint and amount to burn in the same transaction
        * check that the expected amount was minted (to_mint_amount - to_burn_amount)
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:19:17 CEST 2022","Thu Jun 16 13:19:23 CEST 2022","5757","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_tokens[build_raw-200]","Test sending tokens to payment address.

        * send tokens from 1 source address to 1 destination address
        * check expected token balances for both source and destination addresses
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:59:46 CEST 2022","Thu Jun 16 12:59:46 CEST 2022","74","cardano_node_tests.tests","test_transactions","TestNotBalanced","","","test_negative_change","Try to build a transaction with a negative change.

        Check that it is not possible to build such transaction.
        "
"passed","Thu Jun 16 12:39:08 CEST 2022","Thu Jun 16 12:39:22 CEST 2022","14423","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_addr_delegation_deregistration[build]","Submit delegation and deregistration certificates in single TX.

        * create stake address registration cert
        * create stake address deregistration cert
        * register stake address
        * create stake address delegation cert
        * delegate and deregister stake address in single TX
        * check that the balance for source address was correctly updated and that the key
          deposit was returned
        * check that the stake address was NOT delegated
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:53:02 CEST 2022","Thu Jun 16 12:53:08 CEST 2022","6373","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeDatum","","","test_lock_tx_invalid_datum[plutus_v2]","Test locking a Tx output with an invalid datum.

        Expect failure.
        "
"passed","Thu Jun 16 12:57:44 CEST 2022","Thu Jun 16 12:57:47 CEST 2022","3046","cardano_node_tests.tests","test_transactions","TestBasic","","","test_funds_to_valid_address","Send funds to a valid payment address.

        The destination address is a valid address that was generated sometime
        in the past. The test verifies it is possible to use a valid address
        even though it was not generated while running a specific cardano
        network.

        * send funds from 1 source address to 1 destination address
        * check expected balances for both source and destination addresses
        * check min UTxO value
        "
"passed","Thu Jun 16 12:55:29 CEST 2022","Thu Jun 16 12:58:40 CEST 2022","190741","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_pay_unregistered_stake_addr_from[treasury-addr_unknown]","Send funds from the reserves or treasury pot to unregistered stake address.

        * generate an MIR certificate
        * if a stake address should be known on blockchain:

            - register the stake address
            - if transferring funds from treasury, deregister the stake address
              BEFORE submitting the TX

        * submit a TX with the MIR certificate
        * if a stake address should be known on blockchain and if transferring funds from reserves,
          deregister the stake address AFTER submitting the TX
        * check that the amount was NOT added to the stake address reward account
        * (optional) check transaction in db-sync
        "
"passed","Thu Jun 16 13:18:54 CEST 2022","Thu Jun 16 13:19:09 CEST 2022","14389","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_bundle_minting_and_burning_sign[tokens_db3]","Test minting and burning multiple different tokens that are in single bundle.

        Sign the TX using skeys.

        * mint several tokens using a single script
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:00:07 CEST 2022","Thu Jun 16 13:00:11 CEST 2022","3805","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_send_funds_to_invalid_length_address","Try to send funds from payment address to address with invalid length.

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure. Property-based test.
        "
"passed","Thu Jun 16 12:56:57 CEST 2022","Thu Jun 16 12:57:03 CEST 2022","6040","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_after_past[build]","Check that it's NOT possible to spend from the script address.

        The ""after"" slot is in the past.
        "
"passed","Thu Jun 16 12:48:44 CEST 2022","Thu Jun 16 12:48:45 CEST 2022","1449","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_typed_bytes_int_declared[plutus_v2]","Try to build a Tx using int value for redeemer when JSON schema specifies byte string.

        Redeemer is in typed format and the value doesn't comply to JSON schema.
        Expect failure.
        "
"passed","Thu Jun 16 12:52:27 CEST 2022","Thu Jun 16 12:53:02 CEST 2022","35616","cardano_node_tests.tests","test_pools","TestStakePool","","","test_create_stake_pool[build_raw-3]","Create and register a stake pool (without metadata).

        Check that pool was registered.
        "
"passed","Thu Jun 16 12:52:56 CEST 2022","Thu Jun 16 12:53:02 CEST 2022","5983","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_wrong_type[plutus_v2]","Try to spend a locked UTxO with an invalid redeemer type.

        Expect failure.
        "
"passed","Thu Jun 16 12:57:28 CEST 2022","Thu Jun 16 12:57:29 CEST 2022","1252","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_100_addrs_from_100_addrs_fees[amount_expected3]","Test fees for 1 tx from 100 payment addresses to 100 payment addresses."
"passed","Thu Jun 16 12:33:11 CEST 2022","Thu Jun 16 12:33:14 CEST 2022","2979","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_tokens[build-2000]","Test sending tokens to payment address.

        * send tokens from 1 source address to 1 destination address
        * check expected token balances for both source and destination addresses
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:56:25 CEST 2022","Thu Jun 16 12:56:27 CEST 2022","1792","cardano_node_tests.tests","test_scripts","TestAuxiliaryScripts","","","test_tx_script_metadata_json[build_raw]","Send transaction with auxiliary script and metadata JSON.

        Check that the auxiliary script is present in the TX body.
        "
"passed","Thu Jun 16 12:43:47 CEST 2022","Thu Jun 16 12:43:51 CEST 2022","3244","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_always_fails","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""always fails"" script that fails for all datum / redeemer values.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the expected error was raised
        "
"passed","Thu Jun 16 12:39:23 CEST 2022","Thu Jun 16 12:39:23 CEST 2022","133","cardano_node_tests.tests","test_delegation","TestNegative","","","test_deregister_not_registered_addr[build_raw]","Deregister not registered stake address."
"passed","Thu Jun 16 12:48:54 CEST 2022","Thu Jun 16 12:49:08 CEST 2022","14124","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_txout_token_locking[plutus_v1]","Test locking a Tx output with native tokens and spending the locked UTxO.

        * create a Tx output that contains native tokens with a datum hash at the script address
        * check that expected amounts of Lovelace and native tokens were locked at the script
          address
        * spend the locked UTxO
        * check that the expected amounts of Lovelace and native tokens were spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:59:01 CEST 2022","Thu Jun 16 12:59:09 CEST 2022","7150","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_10_addrs[build_raw-10000000]","Test 1 transaction from 10 payment addresses to 10 payment addresses.

        * send funds from 10 source addresses to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:35:52 CEST 2022","Thu Jun 16 12:36:01 CEST 2022","8949","cardano_node_tests.tests","test_native_tokens","TestPolicies","","","test_valid_policy_after[build_raw]","Test minting and burning of tokens after a given slot, check fees in Lovelace."
"passed","Thu Jun 16 12:41:41 CEST 2022","Thu Jun 16 12:41:55 CEST 2022","14286","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_guessing_game[plutus_v1-untyped_json]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:02:33 CEST 2022","Thu Jun 16 13:02:39 CEST 2022","5941","cardano_node_tests.tests","test_pools","TestStakePool","","","test_create_stake_pool[build_raw-1]","Create and register a stake pool (without metadata).

        Check that pool was registered.
        "
"passed","Thu Jun 16 12:59:58 CEST 2022","Thu Jun 16 12:59:59 CEST 2022","1088","cardano_node_tests.tests","test_transactions","TestNegative","","","test_wrong_network_magic","Try to submit a TX with wrong network magic.

        Expect failure.
        "
"passed","Thu Jun 16 12:57:34 CEST 2022","Thu Jun 16 12:57:38 CEST 2022","3629","cardano_node_tests.tests","test_transactions","TestBasic","","","test_transfer_funds[1500000]","Send funds to payment address.

        * send funds from 1 source address to 1 destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 13:00:27 CEST 2022","Thu Jun 16 13:00:30 CEST 2022","2873","cardano_node_tests.tests","test_transactions","TestNegative","","","test_invalid_lenght_utxo_hash","Try to use invalid UTxO hash as an input (property-based test).

        Expect failure.
        "
"passed","Thu Jun 16 12:36:31 CEST 2022","Thu Jun 16 12:36:32 CEST 2022","1352","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMintingNegative","","","test_past_horizon[1000000]","Test minting a token with ttl too far in the future.

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.

        * try to mint a token using a Plutus script when ttl is set too far in the future
        * check that minting failed because of 'PastHorizon' failure
        "
"passed","Thu Jun 16 12:57:25 CEST 2022","Thu Jun 16 12:57:27 CEST 2022","1252","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_100_addrs_from_100_addrs_fees[amount_expected0]","Test fees for 1 tx from 100 payment addresses to 100 payment addresses."
"passed","Thu Jun 16 12:49:35 CEST 2022","Thu Jun 16 12:49:47 CEST 2022","11137","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_partial_spending[plutus_v1]","Test spending part of funds (Lovelace and native tokens) on a locked UTxO.

        * create a Tx output that contains native tokens with a datum hash at the script address
        * check that expected amounts of Lovelace and native tokens were locked at the script
          address
        * spend the locked UTxO and create new locked UTxO with change
        * check that the expected amounts of Lovelace and native tokens were spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:50:02 CEST 2022","Thu Jun 16 12:50:11 CEST 2022","8707","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_guessing_game[plutus_v2-typed_cbor]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:38:15 CEST 2022","Thu Jun 16 12:38:29 CEST 2022","13819","cardano_node_tests.tests","test_plutus_mint_raw","TestMinting","","","test_two_scripts_minting","Test minting two tokens with two different Plutus scripts.

        * fund the token issuer and create a UTxO for collaterals
        * check that the expected amount was transferred to token issuer's address
        * mint the tokens using two different Plutus scripts
        * check that the tokens were minted and collateral UTxOs were not spent
        * check transaction view output
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:48:32 CEST 2022","Thu Jun 16 12:48:38 CEST 2022","6505","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_guessing_game[plutus_v1-typed_json]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:58:39 CEST 2022","Thu Jun 16 12:58:48 CEST 2022","8545","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_1_addr_from_10_addrs[build_raw-1500000]","Test 1 transaction from 10 payment addresses to 1 payment address.

        * send funds from 10 source addresses to 1 destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:25:44 CEST 2022","Thu Jun 16 13:19:17 CEST 2022","3213165","cardano_node_tests.tests","test_staking_no_rewards","TestNoRewards","","","test_no_reward_unmet_pledge1","Check that the stake pool is not receiving rewards when pledge is not met.

        When the pledge is higher than available funds, neither pool owners nor those who
        delegate to that pool receive rewards.

        * delegate stake address
        * wait for first reward
        * increase the needed pledge amount - update the pool parameters by resubmitting the pool
          registration certificate - the funds are now lower than what is needed by the stake pool
        * check that NO new rewards were received by those delegating to the pool
        * check that pool owner is also NOT receiving rewards
        * return the pool to the original state - restore pledge settings
        * check that new rewards were received by those delegating to the pool
        * check that pool owner is also receiving rewards
        "
"skipped","Thu Jun 16 13:16:25 CEST 2022","Thu Jun 16 13:16:25 CEST 2022","0","cardano_node_tests.tests","test_cli","TestCLI","","","test_protocol_mode","Check the default protocol mode - command works even without specifying protocol mode."
"passed","Thu Jun 16 14:12:16 CEST 2022","Thu Jun 16 14:15:18 CEST 2022","181813","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_pay_unregistered_stake_addr_from[reserves-addr_unknown]","Send funds from the reserves or treasury pot to unregistered stake address.

        * generate an MIR certificate
        * if a stake address should be known on blockchain:

            - register the stake address
            - if transferring funds from treasury, deregister the stake address
              BEFORE submitting the TX

        * submit a TX with the MIR certificate
        * if a stake address should be known on blockchain and if transferring funds from reserves,
          deregister the stake address AFTER submitting the TX
        * check that the amount was NOT added to the stake address reward account
        * (optional) check transaction in db-sync
        "
"passed","Thu Jun 16 12:33:45 CEST 2022","Thu Jun 16 12:33:45 CEST 2022","89","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_no_ada[build_raw]","Try to create an UTxO with just native tokens, no ADA. Expect failure."
"passed","Thu Jun 16 12:57:20 CEST 2022","Thu Jun 16 12:57:20 CEST 2022","37","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_1_addr_from_1_addr_fees[amount_expected3]","Test fees for 1 tx from 1 payment address to 1 payment address."
"passed","Thu Jun 16 13:40:45 CEST 2022","Thu Jun 16 13:41:07 CEST 2022","21824","cardano_node_tests.tests","test_transactions","TestManyUTXOs","","","test_mini_transactions[5000000]","Test transaction with many UTxOs (300+) with small amounts of ADA (1-10).

        * use source address with many UTxOs (100000+)
        * use destination address with many UTxOs (100000+)
        * sent transaction with many UTxOs (300+) with tiny amounts of Lovelace from source address
          to destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:51:15 CEST 2022","Thu Jun 16 12:51:21 CEST 2022","6781","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_collaterals[plutus_v2-none]","Test dividing required collateral amount into multiple collateral UTxOs.

        Test 3 scenarios:
        1. maximum allowed number of collateral inputs
        2. more collateral inputs than what is allowed
        3. no collateral input

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * create multiple UTxOs for collateral
        * spend the locked UTxO
        * check that the expected amount was spent when success is expected
        * OR check that the amount was not transferred and collateral UTxO was not spent
          when failure is expected
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:53:52 CEST 2022","Thu Jun 16 12:53:53 CEST 2022","159","cardano_node_tests.tests","test_pools","TestNegative","","","test_pool_registration_missing_payment_skey","Try to register pool using transaction with missing payment skey.

        Expect failure.
        "
"passed","Thu Jun 16 13:00:48 CEST 2022","Thu Jun 16 13:00:50 CEST 2022","2447","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_build_tx_metadata_cbor","Send transaction with metadata CBOR.

        Uses `cardano-cli transaction build` command for building the transactions.

        Check that the metadata in TX body matches the original metadata.
        "
"passed","Thu Jun 16 12:50:14 CEST 2022","Thu Jun 16 12:50:23 CEST 2022","9528","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_collaterals[plutus_v1-max]","Test dividing required collateral amount into multiple collateral UTxOs.

        Test 3 scenarios:
        1. maximum allowed number of collateral inputs
        2. more collateral inputs than what is allowed
        3. no collateral input

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * create multiple UTxOs for collateral
        * spend the locked UTxO
        * check that the expected amount was spent when success is expected
        * OR check that the amount was not transferred and collateral UTxO was not spent
          when failure is expected
        * (optional) check transactions in db-sync
        "
"skipped","Thu Jun 16 12:59:23 CEST 2022","Thu Jun 16 12:59:23 CEST 2022","0","cardano_node_tests.tests","test_cli","TestCLI","","","test_tx_view","Check that the output of `transaction view` is as expected."
"passed","Thu Jun 16 12:59:58 CEST 2022","Thu Jun 16 13:00:03 CEST 2022","4854","cardano_node_tests.tests","test_transactions","TestNegative","","","test_duplicated_tx","Try to send an identical transaction twice.

        Expect failure.
        "
"passed","Thu Jun 16 12:59:17 CEST 2022","Thu Jun 16 12:59:26 CEST 2022","9421","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_100_addrs_from_50_addrs[build_raw-2000000]","Test 1 transaction from 50 payment addresses to 100 payment addresses.

        * send funds from 50 source addresses to 100 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:50:48 CEST 2022","Thu Jun 16 12:51:03 CEST 2022","14920","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_collaterals[plutus_v2-max+1]","Test dividing required collateral amount into multiple collateral UTxOs.

        Test 3 scenarios:
        1. maximum allowed number of collateral inputs
        2. more collateral inputs than what is allowed
        3. no collateral input

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * create multiple UTxOs for collateral
        * spend the locked UTxO
        * check that the expected amount was spent when success is expected
        * OR check that the amount was not transferred and collateral UTxO was not spent
          when failure is expected
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:52:03 CEST 2022","Thu Jun 16 12:52:08 CEST 2022","5410","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_invalid_guessing_game[plutus_v1-43_43]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"passed","Thu Jun 16 12:56:40 CEST 2022","Thu Jun 16 12:56:47 CEST 2022","6715","cardano_node_tests.tests","test_scripts","TestAuxiliaryScripts","","","test_tx_script_no_metadata[build]","Send transaction with auxiliary script and no other metadata.

        Check that the auxiliary script is present in the TX body.
        "
"passed","Thu Jun 16 12:43:23 CEST 2022","Thu Jun 16 12:43:30 CEST 2022","7605","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_guessing_game[plutus_v2-untyped_value]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:48:44 CEST 2022","Thu Jun 16 12:48:54 CEST 2022","9915","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_guessing_game[plutus_v2-untyped_json]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:52:04 CEST 2022","Thu Jun 16 12:55:17 CEST 2022","193767","cardano_node_tests.tests","test_pools","TestStakePool","","","test_update_stake_pool_parameters[build]","Update stake pool parameters.

        * register pool
        * update the pool parameters by resubmitting the pool registration certificate
        * check that the pool parameters were correctly updated on chain
        "
"passed","Thu Jun 16 13:00:26 CEST 2022","Thu Jun 16 13:00:26 CEST 2022","75","cardano_node_tests.tests","test_transactions","TestNegative","","","test_nonexistent_utxo_ix[build_raw]","Try to use nonexistent UTxO TxIx as an input.

        Expect failure.
        "
"skipped","Thu Jun 16 13:02:58 CEST 2022","Thu Jun 16 13:02:58 CEST 2022","0","cardano_node_tests.tests","test_cli","TestCLI","","","test_whole_utxo","Check that it is possible to return the whole UTxO on local cluster."
"passed","Thu Jun 16 13:00:27 CEST 2022","Thu Jun 16 13:00:27 CEST 2022","78","cardano_node_tests.tests","test_transactions","TestNegative","","","test_nonexistent_utxo_hash[build_raw]","Try to use nonexistent UTxO hash as an input.

        Expect failure.
        "
"passed","Thu Jun 16 13:05:24 CEST 2022","Thu Jun 16 13:05:34 CEST 2022","9911","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_multiple_scripts","Test minting of tokens using several different scripts in single transaction.

        * create tokens issuers
        * create a script for each issuer
        * mint 2 tokens with each script - one identified by policyid + asset name
          and one identified by just policyid. The minting is done in single transaction,
          the transaction is signed using skeys.
        * check that the tokens were minted
        * burn the minted tokens
        * check that the tokens were burnt
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:56:47 CEST 2022","Thu Jun 16 12:56:47 CEST 2022","26","cardano_node_tests.tests","test_scripts","TestAuxiliaryScripts","","","test_tx_script_invalid[build_raw]","Build transaction with invalid auxiliary script.

        Expect failure.
        "
"passed","Thu Jun 16 13:45:46 CEST 2022","Thu Jun 16 13:45:53 CEST 2022","6946","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_addr_registration_certificate_order[build_raw]","Submit (de)registration certificates in single TX and check that the order matter.

        * create stake address registration cert
        * create stake address deregistration cert
        * register, deregister, register, deregister and register stake address in single TX
        * check that the address is registered
        * check that the balance for source address was correctly updated and that key deposit
          was needed
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:56:17 CEST 2022","Thu Jun 16 12:56:20 CEST 2022","3224","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_before_past[build]","Check that it's NOT possible to spend from the script address.

        The ""before"" slot is in the past.
        "
"passed","Thu Jun 16 12:50:32 CEST 2022","Thu Jun 16 12:50:40 CEST 2022","8511","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_script_invalid","Test failing script together with the `--script-invalid` argument - collateral is taken.

        Test with ""always fails"" script that fails for all datum / redeemer values.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was spent
        "
"passed","Thu Jun 16 13:00:16 CEST 2022","Thu Jun 16 13:00:19 CEST 2022","2517","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_send_funds_from_invalid_length_address","Try to send funds from address with invalid length (property-based test).

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"passed","Thu Jun 16 12:58:58 CEST 2022","Thu Jun 16 12:59:01 CEST 2022","3159","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_1_addr[build_raw-1500000]","Test 1 transaction from 1 payment address to 10 payment addresses.

        * send funds from 1 source address to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:57:15 CEST 2022","Thu Jun 16 12:57:16 CEST 2022","110","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_pool_registration_fees[addr_fee0]","Test pool registration fees."
"passed","Thu Jun 16 13:00:19 CEST 2022","Thu Jun 16 13:00:22 CEST 2022","3193","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_send_funds_invalid_change_address","Try to send funds using invalid change address (property-based test).

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"passed","Thu Jun 16 12:55:29 CEST 2022","Thu Jun 16 12:55:34 CEST 2022","4471","cardano_node_tests.tests","test_scripts","TestBasic","","","test_normal_tx_from_script_addr[build_raw]","Send funds from script address using TX signed with skeys (not using witness files)."
"passed","Thu Jun 16 13:00:50 CEST 2022","Thu Jun 16 13:00:57 CEST 2022","6899","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_build_tx_metadata_both","Send transaction with both metadata JSON and CBOR.

        Uses `cardano-cli transaction build` command for building the transactions.

        Check that the metadata in TX body matches the original metadata.
        "
"passed","Thu Jun 16 12:47:13 CEST 2022","Thu Jun 16 12:47:15 CEST 2022","1473","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_typed_int_bytes_declared[plutus_v1]","Try to build a Tx using byte string for redeemer when JSON schema specifies int.

        Redeemer is in typed format and the value doesn't comply to JSON schema.
        Expect failure.
        "
"passed","Thu Jun 16 12:57:26 CEST 2022","Thu Jun 16 12:57:26 CEST 2022","85","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_pool_deregistration_fees[addr_fee1]","Test pool deregistration fees."
"passed","Thu Jun 16 12:54:36 CEST 2022","Thu Jun 16 12:55:21 CEST 2022","44908","cardano_node_tests.tests","test_scripts","TestBasic","","","test_multisig_any[build_raw]","Send funds using the *any* script.

        * send funds to script address
        * send funds from script address using single witness
        * send funds from script address using multiple witnesses
        "
"passed","Thu Jun 16 12:54:46 CEST 2022","Thu Jun 16 12:54:46 CEST 2022","36","cardano_node_tests.tests","test_pools","TestNegative","","","test_pool_registration_cert_wrong_vrf","Try to generate pool registration certificate using wrong VRF key.

        Expect failure.
        "
"passed","Thu Jun 16 12:59:19 CEST 2022","Thu Jun 16 12:59:33 CEST 2022","14015","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_100_addrs_from_50_addrs[build-1500000]","Test 1 transaction from 50 payment addresses to 100 payment addresses.

        * send funds from 50 source addresses to 100 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:57:26 CEST 2022","Thu Jun 16 12:57:27 CEST 2022","1249","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_100_addrs_from_100_addrs_fees[amount_expected2]","Test fees for 1 tx from 100 payment addresses to 100 payment addresses."
"skipped","Thu Jun 16 12:34:17 CEST 2022","Thu Jun 16 12:34:17 CEST 2022","0","cardano_node_tests.tests","test_native_tokens","TestCLITxOutSyntax","","","test_multiasset_txouts_syntax","Test syntax for specifying multi-asset values and txouts via CLI.

        Test it by minting one token and burning the same token in single transaction.

        * create a script
        * specify amount to mint and amount to burn in the same transaction
        * assemble CLI arguments for `transaction build` and test syntax for multi-asset values
          and txouts
        * build Tx body using the assembled CLI arguments, sign and submit the Tx
        * check that the expected amount was minted (to_mint_amount - to_burn_amount)
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:00:39 CEST 2022","Thu Jun 16 13:00:39 CEST 2022","25","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_tx_invalid_json_metadata","Try to build a transaction with invalid metadata JSON.

        The metadata file is an invalid JSON.
        "
"passed","Thu Jun 16 13:16:32 CEST 2022","Thu Jun 16 13:18:42 CEST 2022","129169","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_build_transfer_to_reserves","Send funds from the treasury pot to the reserves pot.

        Uses `cardano-cli transaction build` command for building the transactions.
        "
"passed","Thu Jun 16 13:00:39 CEST 2022","Thu Jun 16 13:00:39 CEST 2022","26","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_tx_wrong_json_metadata_format","Try to build a transaction with wrong format of metadata JSON.

        The metadata file is a valid JSON, but not in a format that is expected.
        "
"passed","Thu Jun 16 12:52:26 CEST 2022","Thu Jun 16 12:52:27 CEST 2022","1398","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_untyped_bytes_int_declared[plutus_v2]","Try to build a Tx using int value for redeemer when JSON schema specifies byte string.

        Redeemer is in untyped format and the value doesn't comply to JSON schema. Expect failure.
        "
"passed","Thu Jun 16 12:56:52 CEST 2022","Thu Jun 16 12:56:52 CEST 2022","87","cardano_node_tests.tests","test_transaction_fees","TestFee","","","test_smaller_fee[1.1]","Try to send a transaction with smaller-than-expected fee.

        Expect failure.
        "
"passed","Thu Jun 16 12:44:22 CEST 2022","Thu Jun 16 12:44:34 CEST 2022","11756","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_two_scripts_spending[mix_v1_v2]","Test locking two Tx outputs with two different Plutus scripts in single Tx.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:57:23 CEST 2022","Thu Jun 16 12:57:23 CEST 2022","148","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_1_addr_from_10_addrs_fees[amount_expected2]","Test fees for 1 tx from 10 payment addresses to 1 payment address."
"passed","Thu Jun 16 13:58:44 CEST 2022","Thu Jun 16 13:58:59 CEST 2022","15541","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_bundle_minting_and_burning_witnesses[tokens_db2]","Test minting and burning multiple different tokens that are in single bundle.

        Sign the TX using witnesses.

        * mint several tokens using a single script
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:56:05 CEST 2022","Thu Jun 16 12:56:16 CEST 2022","11238","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_script_before[build_raw]","Check that it is possible to spend from script address before given slot."
"passed","Thu Jun 16 12:36:15 CEST 2022","Thu Jun 16 12:36:16 CEST 2022","1352","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMintingNegative","","","test_past_horizon[10000]","Test minting a token with ttl too far in the future.

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.

        * try to mint a token using a Plutus script when ttl is set too far in the future
        * check that minting failed because of 'PastHorizon' failure
        "
"passed","Thu Jun 16 13:00:22 CEST 2022","Thu Jun 16 13:00:25 CEST 2022","3888","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_send_funds_invalid_length_change_address","Try to send funds using change address with invalid length (property-based test).

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"passed","Thu Jun 16 12:27:13 CEST 2022","Thu Jun 16 12:27:14 CEST 2022","133","cardano_node_tests.tests","test_delegation","TestNegative","","","test_delegate_unknown_addr[build_raw]","Try to delegate unknown stake address.

        Expect failure.
        "
"passed","Thu Jun 16 12:54:05 CEST 2022","Thu Jun 16 12:54:07 CEST 2022","2219","cardano_node_tests.tests","test_plutus_v2_spend_build","TestNegativeInlineDatum","","","test_lock_tx_v1_script","Test locking a Tx output with an invalid datum.

        Expect failure.
        "
"passed","Thu Jun 16 12:55:51 CEST 2022","Thu Jun 16 12:55:58 CEST 2022","6840","cardano_node_tests.tests","test_scripts","TestNegative","","","test_multisig_all_missing_skey","Try to send funds from script address using the *all* script, omit one skey.

        Expect failure.
        "
"passed","Thu Jun 16 12:32:08 CEST 2022","Thu Jun 16 12:32:14 CEST 2022","6430","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_and_burning_sign[empty_asset_name]","Test minting and burning of tokens, sign the transaction using skeys.

        * mint 2 tokens - one identified by policyid + asset name
          and one identified by just policyid
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:26:35 CEST 2022","Thu Jun 16 12:27:00 CEST 2022","25028","cardano_node_tests.tests","test_cli","TestCLI","","","test_pretty_utxo","Check that pretty printed `query utxo` output looks as expected."
"passed","Thu Jun 16 12:51:38 CEST 2022","Thu Jun 16 12:51:54 CEST 2022","15870","cardano_node_tests.tests","test_pools","TestStakePool","","","test_stake_pool_metadata[build_raw]","Create and register a stake pool with metadata.

        Check that pool was registered and stake address delegated.
        "
"passed","Thu Jun 16 12:44:46 CEST 2022","Thu Jun 16 12:44:52 CEST 2022","5680","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_invalid_guessing_game[plutus_v2-43_43]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"passed","Thu Jun 16 12:42:49 CEST 2022","Thu Jun 16 12:43:00 CEST 2022","10383","cardano_node_tests.tests","test_native_tokens","TestPolicies","","","test_valid_policy_before[build_raw]","Test minting and burning of tokens before a given slot, check fees in Lovelace."
"passed","Thu Jun 16 12:58:29 CEST 2022","Thu Jun 16 12:58:39 CEST 2022","10430","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_1_addr[build-2000000]","Test 1 transaction from 1 payment address to 10 payment addresses.

        * send funds from 1 source address to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"skipped","Thu Jun 16 12:59:59 CEST 2022","Thu Jun 16 12:59:59 CEST 2022","0","cardano_node_tests.tests","test_transactions","TestNegative","","","test_wrong_tx_era","Try to send a transaction using TX era > network (cluster) era.

        Expect failure.
        "
"skipped","Thu Jun 16 12:43:36 CEST 2022","Thu Jun 16 12:43:36 CEST 2022","0","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_context_equivalance","Test context equivalence while spending a locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * generate a dummy redeemer and a dummy Tx
        * derive the correct redeemer from the dummy Tx
        * spend the locked UTxO using the derived redeemer
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:52:13 CEST 2022","Thu Jun 16 13:55:23 CEST 2022","189823","cardano_node_tests.tests","test_pools","TestStakePool","","","test_update_stake_pool_metadata[build_raw]","Update stake pool metadata.

        * register pool
        * update the pool metadata by resubmitting the pool registration certificate
        * check that the pool metadata hash was correctly updated on chain
        "
"passed","Thu Jun 16 12:57:01 CEST 2022","Thu Jun 16 12:57:08 CEST 2022","7020","cardano_node_tests.tests","test_scripts","TestIncrementalSigning","","","test_incremental_signing[signed-build_raw]","Send funds from script address using TX that is signed incrementally.

        Test with Tx body created by both `transaction build` and `transaction build-raw`.
        Test with Tx created by both `transaction sign` and `transaction assemble`.
        "
"passed","Thu Jun 16 13:29:13 CEST 2022","Thu Jun 16 13:29:13 CEST 2022","14","cardano_node_tests.tests","test_delegation","TestNegative","","","test_registration_cert_with_wrong_key","Try to generate stake address registration certificate using wrong stake vkey.

        Expect failure.
        "
"passed","Thu Jun 16 13:00:03 CEST 2022","Thu Jun 16 13:00:07 CEST 2022","3822","cardano_node_tests.tests","test_transactions","TestNegative","","","test_send_funds_to_invalid_length_address","Try to send funds from payment address to address with invalid length.

        Expect failure. Property-based test.
        "
"passed","Thu Jun 16 12:57:42 CEST 2022","Thu Jun 16 12:57:42 CEST 2022","86","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_pool_deregistration_fees[addr_fee3]","Test pool deregistration fees."
"passed","Thu Jun 16 12:58:12 CEST 2022","Thu Jun 16 12:58:24 CEST 2022","12477","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_1_addr[build_raw-10000000]","Test 1 transaction from 1 payment address to 10 payment addresses.

        * send funds from 1 source address to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:55:24 CEST 2022","Thu Jun 16 12:55:29 CEST 2022","4357","cardano_node_tests.tests","test_scripts","TestBasic","","","test_normal_tx_to_script_addr[build]","Send funds to script address using TX signed with skeys (not using witness files)."
"passed","Thu Jun 16 12:42:11 CEST 2022","Thu Jun 16 12:42:33 CEST 2022","21372","cardano_node_tests.tests","test_plutus_mint_raw","TestMintingNegative","","","test_past_horizon[1000000]","Test minting a token with ttl too far in the future.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * try to mint a token using a Plutus script when ttl is set too far in the future
        * check that minting failed because of 'PastHorizon' failure
        "
"passed","Thu Jun 16 12:37:15 CEST 2022","Thu Jun 16 12:37:45 CEST 2022","29733","cardano_node_tests.tests","test_plutus_mint_raw","TestMinting","","","test_witness_redeemer[extended]","Test minting a token with a Plutus script.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * mint the token using a Plutus script with required signer
        * check that the token was minted and collateral UTxO was not spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:00:17 CEST 2022","Thu Jun 16 13:00:19 CEST 2022","2021","cardano_node_tests.tests","test_transactions","TestNegative","","","test_send_funds_from_invalid_chars_address","Try to send funds from address with invalid characters (property-based test).

        Expect failure.
        "
"passed","Thu Jun 16 12:50:29 CEST 2022","Thu Jun 16 12:50:35 CEST 2022","6018","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_collaterals[plutus_v1-max+1]","Test dividing required collateral amount into multiple collateral UTxOs.

        Test 3 scenarios:
        1. maximum allowed number of collateral inputs
        2. more collateral inputs than what is allowed
        3. no collateral input

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * create multiple UTxOs for collateral
        * spend the locked UTxO
        * check that the expected amount was spent when success is expected
        * OR check that the amount was not transferred and collateral UTxO was not spent
          when failure is expected
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:57:21 CEST 2022","Thu Jun 16 12:57:21 CEST 2022","38","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_10_addrs_from_1_addr_fees[amount_expected3]","Test fees for 1 tx from 1 payment address to 10 payment addresses."
"passed","Thu Jun 16 12:57:23 CEST 2022","Thu Jun 16 12:57:23 CEST 2022","149","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_1_addr_from_10_addrs_fees[amount_expected3]","Test fees for 1 tx from 10 payment addresses to 1 payment address."
"passed","Thu Jun 16 12:47:19 CEST 2022","Thu Jun 16 12:47:20 CEST 2022","1506","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_typed_invalid_type[plutus_v1]","Try to build a Tx using a JSON typed schema that specifies an invalid type.

        Expect failure.
        "
"passed","Thu Jun 16 12:25:48 CEST 2022","Thu Jun 16 12:26:05 CEST 2022","17244","cardano_node_tests.tests","test_pools","TestStakePool","","","test_create_stake_pool[build-1]","Create and register a stake pool (without metadata).

        Check that pool was registered.
        "
"passed","Thu Jun 16 12:59:01 CEST 2022","Thu Jun 16 12:59:07 CEST 2022","6533","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_and_partial_burning[build_raw]","Test minting and partial burning of tokens.

        * mint a token
        * burn part of the minted token, check the expected amount
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:35:28 CEST 2022","Thu Jun 16 12:35:49 CEST 2022","20347","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_burning_diff_tokens_single_tx","Test minting one token and burning other token in single transaction.

        Sign transactions using skeys.

        * create a script
        * 1st TX - mint first token
        * 2nd TX - mint second token, burn first token
        * 3rd TX - burn second token
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:34:14 CEST 2022","Thu Jun 16 12:34:17 CEST 2022","2611","cardano_node_tests.tests","test_native_tokens","TestNegative","","","test_minting_amount_above_the_allowed","Test minting a token amount above the maximum allowed."
"passed","Thu Jun 16 12:53:06 CEST 2022","Thu Jun 16 12:53:07 CEST 2022","1450","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_untyped_int_bytes_declared[plutus_v1]","Try to build a Tx using byte string for redeemer when JSON schema specifies int.

        Redeemer is in untyped format and the value doesn't comply to JSON schema. Expect failure.
        "
"passed","Thu Jun 16 12:33:14 CEST 2022","Thu Jun 16 12:33:21 CEST 2022","6844","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_tokens[build-100000]","Test sending tokens to payment address.

        * send tokens from 1 source address to 1 destination address
        * check expected token balances for both source and destination addresses
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:32:21 CEST 2022","Thu Jun 16 13:32:30 CEST 2022","9097","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_bundle_minting_and_burning_sign[tokens_db2]","Test minting and burning multiple different tokens that are in single bundle.

        Sign the TX using skeys.

        * mint several tokens using a single script
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:57:18 CEST 2022","Thu Jun 16 12:57:18 CEST 2022","49","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_addr_deregistration_fees[addr_fee0]","Test stake address deregistration fees."
"passed","Thu Jun 16 12:43:14 CEST 2022","Thu Jun 16 12:43:25 CEST 2022","10525","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_two_scripts_spending[mix_v2_v1]","Test locking two Tx outputs with two different Plutus scripts in single Tx.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:18:44 CEST 2022","Thu Jun 16 13:18:50 CEST 2022","6297","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_and_burning_witnesses[build-asset_name]","Test minting and burning of tokens, sign the transaction using witnesses.

        * mint 2 tokens - one identified by policyid + asset name
          and one identified by just policyid
        * burn the minted tokens
        * check fees in Lovelace
        * check output of the `transaction view` command
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:49:45 CEST 2022","Thu Jun 16 12:49:54 CEST 2022","9802","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_two_scripts_spending[mix_v2_v1]","Test locking two Tx outputs with two different Plutus scripts in single Tx.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:36:22 CEST 2022","Thu Jun 16 12:36:25 CEST 2022","3188","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMintingNegative","","","test_past_horizon[100000]","Test minting a token with ttl too far in the future.

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.

        * try to mint a token using a Plutus script when ttl is set too far in the future
        * check that minting failed because of 'PastHorizon' failure
        "
"passed","Thu Jun 16 12:59:08 CEST 2022","Thu Jun 16 12:59:19 CEST 2022","10783","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_10_addrs[build_raw-2000000]","Test 1 transaction from 10 payment addresses to 10 payment addresses.

        * send funds from 10 source addresses to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 13:00:40 CEST 2022","Thu Jun 16 13:00:43 CEST 2022","2572","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_tx_metadata_json","Send transaction with metadata JSON.

        * check that the metadata in TX body matches the original metadata
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:55:16 CEST 2022","Thu Jun 16 13:58:43 CEST 2022","206805","cardano_node_tests.tests","test_pools","TestStakePool","","","test_update_stake_pool_parameters[build_raw]","Update stake pool parameters.

        * register pool
        * update the pool parameters by resubmitting the pool registration certificate
        * check that the pool parameters were correctly updated on chain
        "
"skipped","Thu Jun 16 14:08:41 CEST 2022","Thu Jun 16 14:08:41 CEST 2022","0","cardano_node_tests.tests","test_metrics","TestEKG","","","test_available_metrics","Test that available EKG metrics matches the expected schema."
"passed","Thu Jun 16 12:58:55 CEST 2022","Thu Jun 16 12:59:01 CEST 2022","5847","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_1_addr_from_10_addrs[build-1500000]","Test 1 transaction from 10 payment addresses to 1 payment address.

        * send funds from 10 source addresses to 1 destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:53:53 CEST 2022","Thu Jun 16 12:53:57 CEST 2022","4200","cardano_node_tests.tests","test_pools","TestNegative","","","test_stake_pool_metadata_long_name","Try to create pool metadata hash when the *name* value is longer than allowed.

        Expect failure. Property-based test.
        "
"passed","Thu Jun 16 12:43:25 CEST 2022","Thu Jun 16 12:43:36 CEST 2022","10844","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_txout_locking[plutus_v2]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Corresponds to Exercise 3 for Alonzo Blue.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:27:24 CEST 2022","Thu Jun 16 12:32:01 CEST 2022","276891","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_build_pay_stake_addr_from[reserves]","Send funds from the reserves or treasury pot to stake address.

        Uses `cardano-cli transaction build` command for building the transactions.

        * generate an MIR certificate
        * submit a TX with the MIR certificate
        * check that the expected amount was added to the stake address reward account
        * (optional) check transaction in db-sync
        "
"passed","Thu Jun 16 12:54:07 CEST 2022","Thu Jun 16 12:54:07 CEST 2022","219","cardano_node_tests.tests","test_pools","TestNegative","","","test_pool_deregistration_not_registered[build]","Try to deregister pool that is not registered.

        Expect failure.
        "
"passed","Thu Jun 16 12:57:20 CEST 2022","Thu Jun 16 12:57:20 CEST 2022","39","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_1_addr_from_1_addr_fees[amount_expected2]","Test fees for 1 tx from 1 payment address to 1 payment address."
"passed","Thu Jun 16 12:59:01 CEST 2022","Thu Jun 16 12:59:04 CEST 2022","2687","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_10_addrs[build_raw-1500000]","Test 1 transaction from 10 payment addresses to 10 payment addresses.

        * send funds from 10 source addresses to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:46:19 CEST 2022","Thu Jun 16 12:46:20 CEST 2022","1405","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_untyped_bytes_int_declared[plutus_v2]","Try to build a Tx using int value for redeemer when JSON schema specifies byte string.

        Redeemer is in untyped format and the value doesn't comply to JSON schema.
        Expect failure.
        "
"passed","Thu Jun 16 12:33:46 CEST 2022","Thu Jun 16 12:33:55 CEST 2022","8842","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_invalid_token_amount[build_raw]","Test sending an invalid amount of tokens to payment address."
"passed","Thu Jun 16 13:00:11 CEST 2022","Thu Jun 16 13:00:14 CEST 2022","3337","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_send_funds_to_invalid_chars_address","Try to send funds from payment address to address with invalid characters.

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure. Property-based test.
        "
"passed","Thu Jun 16 12:56:56 CEST 2022","Thu Jun 16 12:56:58 CEST 2022","1598","cardano_node_tests.tests","test_transaction_fees","TestFee","","","test_expected_or_higher_fee[1000]","Send a transaction with fee that is same or higher than expected."
"passed","Thu Jun 16 12:57:18 CEST 2022","Thu Jun 16 12:57:19 CEST 2022","96","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_addr_deregistration_fees[addr_fee2]","Test stake address deregistration fees."
"passed","Thu Jun 16 13:00:30 CEST 2022","Thu Jun 16 13:00:30 CEST 2022","76","cardano_node_tests.tests","test_transactions","TestNegative","","","test_missing_fee","Try to build a transaction with a missing `--fee` parameter.

        Expect failure.
        "
"passed","Thu Jun 16 12:52:09 CEST 2022","Thu Jun 16 12:52:15 CEST 2022","5935","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_wrong_value_inside_range[plutus_v2]","Try to spend a locked UTxO with an unexpected redeemer value.

        Expect failure.
        "
"passed","Thu Jun 16 12:59:54 CEST 2022","Thu Jun 16 12:59:56 CEST 2022","2778","cardano_node_tests.tests","test_transactions","TestNotBalanced","","","test_transfer_amount_bellow_minimum","Try to build a transaction with amount bellow the minimum lovelace required.

        Uses `cardano-cli transaction build-raw` command for building the transactions.

        Expect failure.
        "
"passed","Thu Jun 16 12:32:20 CEST 2022","Thu Jun 16 12:32:39 CEST 2022","19060","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_and_partial_burning[build]","Test minting and partial burning of tokens.

        * mint a token
        * burn part of the minted token, check the expected amount
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:53:04 CEST 2022","Thu Jun 16 12:53:05 CEST 2022","1457","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_typed_int_bytes_declared[plutus_v2]","Try to build a Tx using byte string for redeemer when JSON schema specifies int.

        Redeemer is in typed format and the value doesn't comply to JSON schema. Expect failure.
        "
"passed","Thu Jun 16 12:53:58 CEST 2022","Thu Jun 16 12:54:27 CEST 2022","28860","cardano_node_tests.tests","test_pools","TestNegative","","","test_stake_pool_metadata_long_description","Try to create pool metadata hash when the *description* value is longer than allowed.

        Expect failure. Property-based test.
        "
"passed","Thu Jun 16 12:52:49 CEST 2022","Thu Jun 16 12:52:55 CEST 2022","6030","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_wrong_type[plutus_v1]","Try to spend a locked UTxO with an invalid redeemer type.

        Expect failure.
        "
"passed","Thu Jun 16 12:25:44 CEST 2022","Thu Jun 16 13:15:49 CEST 2022","3005219","cardano_node_tests.tests","test_staking_no_rewards","TestNoRewards","","","test_no_reward_deregistered_stake_addr","Check that the pool is not receiving rewards when owner's stake address is deregistered.

        When the owner's stake address is deregistered (i.e. owner's stake is lower than pledge),
        neither pool owners nor those who delegate to that pool receive rewards.

        * delegate stake address
        * wait for first reward
        * deregister stake address - owner's stake is lower than pledge
        * check that the key deposit was returned
        * check that NO new rewards were received by those delegating to the pool
        * check that pool owner is also NOT receiving rewards
        * return the pool to the original state - reregister stake address and
          delegate it to the pool
        * check that new rewards were received by those delegating to the pool
        * check that pool owner is also receiving rewards
        "
"passed","Thu Jun 16 13:15:50 CEST 2022","Thu Jun 16 13:16:05 CEST 2022","15000","cardano_node_tests.tests","test_pools","TestStakePool","","","test_stake_pool_not_avail_metadata[build]","Create and register a stake pool with metadata file not available.

        Check that pool was registered and stake address delegated.
        "
"passed","Thu Jun 16 14:12:13 CEST 2022","Thu Jun 16 14:12:13 CEST 2022","25","cardano_node_tests.tests","test_cli","TestAddressInfo","","","test_address_info_payment_with_outfile","Compare payment address info with and without outfile provided."
"passed","Thu Jun 16 12:57:52 CEST 2022","Thu Jun 16 12:57:57 CEST 2022","4830","cardano_node_tests.tests","test_transactions","TestBasic","","","test_missing_ttl","Submit a transaction with a missing `--ttl` (`--invalid-hereafter`) parameter."
"passed","Thu Jun 16 12:47:56 CEST 2022","Thu Jun 16 12:48:00 CEST 2022","4250","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeDatum","","","test_unlock_tx_wrong_datum[plutus_v2]","Test locking a Tx output and try to spend it with a wrong datum.

        Expect failure.
        "
"passed","Thu Jun 16 13:55:32 CEST 2022","Thu Jun 16 13:55:33 CEST 2022","61","cardano_node_tests.tests","test_cli","TestAddressInfo","","","test_address_info_script","Check script address info."
"passed","Thu Jun 16 13:55:36 CEST 2022","Thu Jun 16 13:58:41 CEST 2022","184467","cardano_node_tests.tests","test_pools","TestStakePool","","","test_update_stake_pool_metadata[build]","Update stake pool metadata.

        * register pool
        * update the pool metadata by resubmitting the pool registration certificate
        * check that the pool metadata hash was correctly updated on chain
        "
"passed","Thu Jun 16 12:53:54 CEST 2022","Thu Jun 16 12:54:04 CEST 2022","9931","cardano_node_tests.tests","test_plutus_v2_spend_build","TestInlineDatum","","","test_txout_locking","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        * create a Tx output with an inline datum at the script address
        * spend the locked UTxO
        * check that the utxo was spent
        "
"passed","Thu Jun 16 12:56:48 CEST 2022","Thu Jun 16 12:56:52 CEST 2022","4047","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_after_future[build]","Check that it's NOT possible to spend from the script address.

        The ""after"" slot is in the future and the given range is invalid.
        "
"passed","Thu Jun 16 13:22:14 CEST 2022","Thu Jun 16 13:22:17 CEST 2022","3043","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_build_transfer_to_treasury","Send funds from the reserves pot to the treasury pot.

        Uses `cardano-cli transaction build` command for building the transactions.
        "
"passed","Thu Jun 16 12:57:58 CEST 2022","Thu Jun 16 12:58:01 CEST 2022","3409","cardano_node_tests.tests","test_transactions","TestBasic","","","test_multiple_same_txins","Try to build a transaction with multiple identical txins."
"passed","Thu Jun 16 13:00:31 CEST 2022","Thu Jun 16 13:00:31 CEST 2022","41","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_missing_tx_in","Try to build a transaction with a missing `--tx-in` parameter.

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"passed","Thu Jun 16 12:58:07 CEST 2022","Thu Jun 16 12:58:58 CEST 2022","50645","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_10_transactions","Send 10 transactions to payment address.

        * send funds from 1 source address to 1 destination address in 10 separate transactions
        * check expected balances for both source and destination addresses
        "
"skipped","Thu Jun 16 13:22:05 CEST 2022","Thu Jun 16 13:22:05 CEST 2022","0","cardano_node_tests.tests","test_blocks","TestLeadershipSchedule","","","test_pool_blocks[next]","Check that blocks were minted according to leadership schedule.

        * query leadership schedule for selected pool for current epoch or next epoch
        * wait for epoch that comes after the queried epoch
        * get info about minted blocks in queried epoch for the selected pool
        * compare leadership schedule with blocks that were actually minted
        * compare db-sync records with ledger state dump
        "
"passed","Thu Jun 16 13:02:18 CEST 2022","Thu Jun 16 13:02:30 CEST 2022","12179","cardano_node_tests.tests","test_native_tokens","TestPolicies","","","test_valid_policy_after[build]","Test minting and burning of tokens after a given slot, check fees in Lovelace."
"skipped","Thu Jun 16 12:01:50 CEST 2022","Thu Jun 16 12:01:50 CEST 2022","0","cardano_node_tests.tests","test_staking_rewards","TestRewards","","","test_reward_simple","Check that the stake address and pool owner are receiving rewards.

        * delegate to pool
        * wait for rewards for pool owner and pool users for up to 4 epochs
        * withdraw rewards to payment address
        "
"passed","Thu Jun 16 13:41:17 CEST 2022","Thu Jun 16 13:41:23 CEST 2022","5992","cardano_node_tests.tests","test_transactions","TestNotBalanced","","","test_build_transfer_amount_bellow_minimum","Try to build a transaction with amount bellow the minimum lovelace required.

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"passed","Thu Jun 16 12:45:41 CEST 2022","Thu Jun 16 12:45:48 CEST 2022","6498","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_invalid_guessing_game[plutus_v2-42_43]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"passed","Thu Jun 16 12:46:46 CEST 2022","Thu Jun 16 12:46:56 CEST 2022","10120","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_wrong_type[plutus_v2]","Try to spend a locked UTxO with a wrong redeemer type, try to use bytes.

        Expect failure.
        "
"passed","Thu Jun 16 12:52:57 CEST 2022","Thu Jun 16 12:52:58 CEST 2022","1518","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_typed_invalid_type[plutus_v1]","Try to build a Tx using a JSON typed schema that specifies an invalid type.

        Expect failure.
        "
"passed","Thu Jun 16 13:00:43 CEST 2022","Thu Jun 16 13:00:43 CEST 2022","26","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_build_tx_wrong_json_metadata_format","Try to build a transaction with wrong format of metadata JSON.

        Uses `cardano-cli transaction build` command for building the transactions.

        The metadata file is a valid JSON, but not in a format that is expected.
        "
"passed","Thu Jun 16 12:58:45 CEST 2022","Thu Jun 16 12:58:54 CEST 2022","9692","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_bundle_minting_and_burning_sign[tokens_db0]","Test minting and burning multiple different tokens that are in single bundle.

        Sign the TX using skeys.

        * mint several tokens using a single script
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:57:38 CEST 2022","Thu Jun 16 12:57:41 CEST 2022","3626","cardano_node_tests.tests","test_transactions","TestBasic","","","test_transfer_funds[10000000]","Send funds to payment address.

        * send funds from 1 source address to 1 destination address
        * check expected balances for both source and destination addresses
        "
"skipped","Thu Jun 16 13:01:09 CEST 2022","Thu Jun 16 13:01:09 CEST 2022","0","cardano_node_tests.tests","test_ledger_state","TestLedgerState","","","test_stake_snapshot","Test the `stake-snapshot` and `ledger-state` commands and ledger state values."
"passed","Thu Jun 16 12:54:34 CEST 2022","Thu Jun 16 12:54:43 CEST 2022","9697","cardano_node_tests.tests","test_plutus_v2_spend_raw","TestLockingV2","","","test_reference_locking","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        * create a Tx output with an inline datum at the script address
        * create a Tx output with a reference script
        * check that the expected amount was locked at the script address
        * spend the locked UTxO using the reference UTxO
        * check that the expected amount was spent
        * check that the reference UTxO was not spent
        "
"passed","Thu Jun 16 12:43:45 CEST 2022","Thu Jun 16 12:43:51 CEST 2022","6416","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_guessing_game[plutus_v1-typed_json]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:29:17 CEST 2022","Thu Jun 16 13:32:00 CEST 2022","163833","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_transfer_to_reserves","Send funds from the treasury pot to the reserves pot.

        Expected to fail when Era < Alonzo.
        "
"passed","Thu Jun 16 13:45:54 CEST 2022","Thu Jun 16 13:45:54 CEST 2022","258","cardano_node_tests.tests","test_delegation","TestNegative","","","test_deregister_not_registered_addr[build]","Deregister not registered stake address."
"passed","Thu Jun 16 12:53:51 CEST 2022","Thu Jun 16 12:53:51 CEST 2022","37","cardano_node_tests.tests","test_pools","TestNegative","","","test_pool_registration_cert_wrong_stake","Try to generate pool registration certificate using wrong stake vkey.

        Expect failure.
        "
"passed","Thu Jun 16 12:51:21 CEST 2022","Thu Jun 16 12:51:25 CEST 2022","4201","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_two_scripts_spending_one_fail[plutus_v2]","Test locking two Tx outputs with two different Plutus scripts in single Tx, one fails.

        Expect failure.

        * create a Tx output with a datum hash at the script addresses
        * try to spend the locked UTxOs
        * check that the expected error was raised
        "
"passed","Thu Jun 16 12:57:17 CEST 2022","Thu Jun 16 12:57:18 CEST 2022","161","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_addr_registration_fees[addr_fee3]","Test stake address registration fees."
"passed","Thu Jun 16 12:58:23 CEST 2022","Thu Jun 16 12:58:28 CEST 2022","5603","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_1_addr[build_raw-2000000]","Test 1 transaction from 1 payment address to 10 payment addresses.

        * send funds from 1 source address to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:57:17 CEST 2022","Thu Jun 16 12:57:17 CEST 2022","98","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_addr_registration_fees[addr_fee2]","Test stake address registration fees."
"passed","Thu Jun 16 13:22:42 CEST 2022","Thu Jun 16 13:23:00 CEST 2022","18091","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_bundle_minting_and_burning_sign[tokens_db1]","Test minting and burning multiple different tokens that are in single bundle.

        Sign the TX using skeys.

        * mint several tokens using a single script
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:52:22 CEST 2022","Thu Jun 16 12:52:24 CEST 2022","1392","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_typed_bytes_int_declared[plutus_v2]","Try to build a Tx using int value for redeemer when JSON schema specifies byte string.

        Redeemer is in typed format and the value doesn't comply to JSON schema. Expect failure.
        "
"passed","Thu Jun 16 12:59:59 CEST 2022","Thu Jun 16 12:59:59 CEST 2022","27","cardano_node_tests.tests","test_transactions","TestNegative","","","test_send_funds_to_reward_address[build]","Try to send funds from payment address to stake address.

        Expect failure.
        "
"passed","Thu Jun 16 14:08:41 CEST 2022","Thu Jun 16 14:08:41 CEST 2022","28","cardano_node_tests.tests","test_cli","TestKey","","","test_non_extended_key_valid","Check that the non-extended verification key is according the verification key."
"passed","Thu Jun 16 13:48:43 CEST 2022","Thu Jun 16 13:48:54 CEST 2022","11052","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_bundle_minting_and_burning_witnesses[tokens_db1]","Test minting and burning multiple different tokens that are in single bundle.

        Sign the TX using witnesses.

        * mint several tokens using a single script
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:56:21 CEST 2022","Thu Jun 16 12:56:25 CEST 2022","4274","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_before_future[build_raw]","Check that it's NOT possible to spend from the script address.

        The ""before"" slot is in the future and the given range is invalid.
        "
"passed","Thu Jun 16 12:38:33 CEST 2022","Thu Jun 16 12:38:41 CEST 2022","8108","cardano_node_tests.tests","test_plutus_mint_raw","TestMinting","","","test_minting_policy_executed_once1","Test that minting policy is executed only once even when the same policy is used twice.

        Test by minting two tokens while using the same Plutus script twice
        with two different redeemers.

        The Plutus script used in this test takes the expected token name as
        redeemer. Even though the redeemer used for minting the first token
        doesn't match the token name, the token get's minted anyway. That's
        because only the last redeemer is used and all the other scripts with
        identical minting policy (and corresponding redeemers) are ignored. So
        it only matters that the last redeemer matches the last token name.

        * fund the token issuer and create a UTxO for collateral - funds for fees and collateral
          are sufficient for just single minting script
        * check that the expected amount was transferred to token issuer's address
        * mint the tokens using two identical Plutus scripts and two redeemers, where the first
          redeemer value is invalid
        * check that the tokens were minted and collateral UTxOs were not spent, i.e. the first
          script and its redeemer were ignored
        * check transaction view output
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:50:17 CEST 2022","Thu Jun 16 12:50:25 CEST 2022","7656","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_always_fails","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""always fails"" script that fails for all datum / redeemer values.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred, collateral UTxO was not spent
          and the expected error was raised
        "
"passed","Thu Jun 16 13:09:08 CEST 2022","Thu Jun 16 13:09:12 CEST 2022","4002","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_tokens[build_raw-2000]","Test sending tokens to payment address.

        * send tokens from 1 source address to 1 destination address
        * check expected token balances for both source and destination addresses
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:00:32 CEST 2022","Thu Jun 16 13:00:32 CEST 2022","91","cardano_node_tests.tests","test_transactions","TestNegative","","","test_sign_wrong_file[tx]","Try to sign other file type than specified by command line option (Tx vs Tx body).

        Expect failure when cardano-cli CBOR serialization format is used (not CDDL format).

        * specify Tx file and pass Tx body file
        * specify Tx body file and pass Tx file
        "
"passed","Thu Jun 16 12:55:52 CEST 2022","Thu Jun 16 13:02:00 CEST 2022","367826","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_pay_multi_stake_addrs","Send funds from the reserves and treasury pots to multiple stake addresses in single TX.

        * generate an MIR certificates for transferring from treasury for each stake address
        * generate an MIR certificates for transferring from reserves for each stake address
        * submit a TX with all the MIR certificates generated in previous steps
        * check that the expected amount was added to all stake address reward accounts
        * (optional) check transaction in db-sync
        "
"passed","Thu Jun 16 12:46:30 CEST 2022","Thu Jun 16 12:46:32 CEST 2022","1418","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_wrong_value_above_range[plutus_v2]","Try to spend a locked UTxO with a wrong redeemer value, above max value allowed.

        Expect failure.
        "
"passed","Thu Jun 16 13:00:14 CEST 2022","Thu Jun 16 13:00:16 CEST 2022","2559","cardano_node_tests.tests","test_transactions","TestNegative","","","test_send_funds_from_invalid_length_address","Try to send funds from address with invalid length (property-based test).

        Expect failure.
        "
"passed","Thu Jun 16 12:33:21 CEST 2022","Thu Jun 16 12:33:32 CEST 2022","10498","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_multiple_tokens[build_raw]","Test sending multiple different tokens to payment addresses.

        * send multiple different tokens from 1 source address to 2 destination addresses
        * check expected token balances for both source and destination addresses for each token
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:52:28 CEST 2022","Thu Jun 16 12:52:29 CEST 2022","1480","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_invalid_json[plutus_v1]","Try to build a Tx using a redeemer value that is invalid JSON.

        Expect failure.
        "
"skipped","Thu Jun 16 13:22:05 CEST 2022","Thu Jun 16 13:22:05 CEST 2022","0","cardano_node_tests.tests","test_dbsync","TestDBSync","","","test_table_names","Check that all the expected tables are present in db-sync."
"passed","Thu Jun 16 12:56:00 CEST 2022","Thu Jun 16 12:56:06 CEST 2022","5993","cardano_node_tests.tests","test_scripts","TestNegative","","","test_multisig_atleast_low_num_of_skeys","Try to send funds from script address using the *atLeast* script.

        Num of skeys < required. Expect failure.
        "
"passed","Thu Jun 16 12:52:08 CEST 2022","Thu Jun 16 12:52:18 CEST 2022","9434","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_same_collateral_txin[plutus_v2]","Test spending the locked UTxO while using the same UTxO as collateral.

        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO while using the same UTxO as collateral
        * check that the expected error was raised
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:56:05 CEST 2022","Thu Jun 16 12:56:31 CEST 2022","25531","cardano_node_tests.tests","test_scripts","TestBasic","","","test_multisig_atleast[build_raw]","Send funds to and from script address using the *atLeast* script."
"skipped","Thu Jun 16 12:42:45 CEST 2022","Thu Jun 16 12:42:57 CEST 2022","12325","cardano_node_tests.tests","test_plutus_mint_raw","TestMintingNegative","","","test_past_horizon[-1]","Test minting a token with ttl too far in the future.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * try to mint a token using a Plutus script when ttl is set too far in the future
        * check that minting failed because of 'PastHorizon' failure
        "
"passed","Thu Jun 16 12:55:34 CEST 2022","Thu Jun 16 12:55:45 CEST 2022","11307","cardano_node_tests.tests","test_scripts","TestBasic","","","test_normal_tx_from_script_addr[build]","Send funds from script address using TX signed with skeys (not using witness files)."
"passed","Thu Jun 16 12:57:51 CEST 2022","Thu Jun 16 12:57:56 CEST 2022","5154","cardano_node_tests.tests","test_transactions","TestBasic","","","test_no_txout","Send transaction with just fee, no UTxO is produced.

        * submit a transaction where all funds available on source address is used for fee
        * check that no UTxOs are created by the transaction
        * check that there are no funds left on source address
        "
"passed","Thu Jun 16 12:57:22 CEST 2022","Thu Jun 16 12:57:22 CEST 2022","145","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_1_addr_from_10_addrs_fees[amount_expected0]","Test fees for 1 tx from 10 payment addresses to 1 payment address."
"passed","Thu Jun 16 12:45:28 CEST 2022","Thu Jun 16 12:45:32 CEST 2022","3890","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_invalid_guessing_game[plutus_v1-43_43]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"passed","Thu Jun 16 13:48:59 CEST 2022","Thu Jun 16 13:49:11 CEST 2022","11933","cardano_node_tests.tests","test_native_tokens","TestPolicies","","","test_valid_policy_before[build]","Test minting and burning of tokens before a given slot, check fees in Lovelace."
"skipped","Thu Jun 16 14:12:13 CEST 2022","Thu Jun 16 14:12:13 CEST 2022","0","cardano_node_tests.tests","test_metrics","TestPrometheus","","","test_available_metrics","Test that list of available metrics == list of expected metrics."
"passed","Thu Jun 16 12:56:08 CEST 2022","Thu Jun 16 12:56:17 CEST 2022","8679","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_before_past[build_raw]","Check that it's NOT possible to spend from the script address.

        The ""before"" slot is in the past.
        "
"passed","Thu Jun 16 13:00:07 CEST 2022","Thu Jun 16 13:00:11 CEST 2022","3412","cardano_node_tests.tests","test_transactions","TestNegative","","","test_send_funds_to_invalid_chars_address","Try to send funds from payment address to address with invalid characters.

        Expect failure. Property-based test.
        "
"passed","Thu Jun 16 13:05:34 CEST 2022","Thu Jun 16 13:05:40 CEST 2022","6050","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_unicode_asset_name","Test minting and burning of token with unicode non-ascii chars in its asset name.

        Tests https://github.com/input-output-hk/cardano-node/issues/2337

        * mint a token that has non-ascii characters in its asset name
        * burn the minted token
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:52:16 CEST 2022","Thu Jun 16 12:52:17 CEST 2022","1407","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_wrong_value_bellow_range[plutus_v1]","Try to spend a locked UTxO with a redeemer int value < minimum allowed value.

        Expect failure.
        "
"passed","Thu Jun 16 12:46:37 CEST 2022","Thu Jun 16 12:46:38 CEST 2022","1482","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_invalid_json[plutus_v1]","Try to build a Tx using a redeemer value that is invalid JSON.

        Expect failure.
        "
"passed","Thu Jun 16 14:15:21 CEST 2022","Thu Jun 16 14:15:43 CEST 2022","22661","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_bundle_minting_and_burning_witnesses[tokens_db3]","Test minting and burning multiple different tokens that are in single bundle.

        Sign the TX using witnesses.

        * mint several tokens using a single script
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:56:53 CEST 2022","Thu Jun 16 12:56:53 CEST 2022","86","cardano_node_tests.tests","test_transaction_fees","TestFee","","","test_smaller_fee[2]","Try to send a transaction with smaller-than-expected fee.

        Expect failure.
        "
"passed","Thu Jun 16 13:40:12 CEST 2022","Thu Jun 16 13:40:23 CEST 2022","11338","cardano_node_tests.tests","test_pools","TestPoolCost","","","test_stake_pool_cost[9999999]","Create and register a stake pool with *pool cost* >= *minPoolCost*."
"passed","Thu Jun 16 13:31:53 CEST 2022","Thu Jun 16 13:45:37 CEST 2022","824474","cardano_node_tests.tests","test_pools","TestStakePool","","","test_cancel_stake_pool_deregistration","Reregister a stake pool that is in course of being retired.

        * deregister stake pool in epoch + 2
        * reregister the pool by resubmitting the pool registration certificate
        * delegate stake address to pool again (the address is already registered)
        * check that no additional pool deposit was used
        * check that pool is still correctly setup
        * check that the stake addresses is still delegated
        "
"passed","Thu Jun 16 12:57:09 CEST 2022","Thu Jun 16 12:57:21 CEST 2022","12823","cardano_node_tests.tests","test_scripts","TestIncrementalSigning","","","test_incremental_signing[signed-build]","Send funds from script address using TX that is signed incrementally.

        Test with Tx body created by both `transaction build` and `transaction build-raw`.
        Test with Tx created by both `transaction sign` and `transaction assemble`.
        "
"passed","Thu Jun 16 13:40:26 CEST 2022","Thu Jun 16 13:55:15 CEST 2022","889251","cardano_node_tests.tests","test_kes","TestKES","","","test_update_valid_opcert","Update a valid operational certificate with another valid operational certificate.

        * generate new operational certificate with valid `--kes-period`
        * copy new operational certificate to the node
        * stop the node so the corresponding pool is not minting new blocks
        * check `kes-period-info` while the pool is not minting blocks
        * start the node with the new operational certificate
        * check that the pool is minting blocks again
        * check that metrics reported by `kes-period-info` got updated once the pool started
          minting blocks again
        * check `kes-period-info` with the old (replaced) operational certificate
        "
"skipped","Thu Jun 16 12:39:04 CEST 2022","Thu Jun 16 12:39:04 CEST 2022","0","cardano_node_tests.tests","test_plutus_mint_raw","TestMinting","","","test_minting_context_equivalance","Test context equivalence while minting a token.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * generate a dummy redeemer and a dummy Tx
        * derive the correct redeemer from the dummy Tx
        * mint the token using the derived redeemer
        * check that the token was minted and collateral UTxO was not spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:59:19 CEST 2022","Thu Jun 16 12:59:23 CEST 2022","3621","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_addr_registration_deregistration[build_raw]","Submit registration and deregistration certificates in single TX.

        * create stake address registration cert
        * create stake address deregistration cert
        * register and deregister stake address in single TX
        * check that the balance for source address was correctly updated and that key deposit
          was not needed
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:54:07 CEST 2022","Thu Jun 16 12:54:07 CEST 2022","12","cardano_node_tests.tests","test_pools","TestNegative","","","test_stake_pool_metadata_no_name","Try to create pool metadata hash when missing the *name* key.

        Expect failure.
        "
"skipped","Thu Jun 16 12:36:34 CEST 2022","Thu Jun 16 12:36:38 CEST 2022","3338","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMintingNegative","","","test_past_horizon[-1]","Test minting a token with ttl too far in the future.

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.

        * try to mint a token using a Plutus script when ttl is set too far in the future
        * check that minting failed because of 'PastHorizon' failure
        "
"failed","Thu Jun 16 12:25:47 CEST 2022","Thu Jun 16 12:31:37 CEST 2022","349957","cardano_node_tests.tests","test_kes","TestKES","","","test_expired_kes","Test expired KES.

        * start local cluster instance configured with short KES period and low number of key
          evolutions, so KES expires soon on all pools
        * refresh opcert on 2 of the 3 pools, so KES doesn't expire on those 2 pools and
          the pools keep minting blocks
        * wait for KES expiration on the selected pool
        * check that the pool with expired KES didn't mint blocks in an epoch that followed after
          KES expiration
        * check KES period info command with an operational certificate with an expired KES
        * check KES period info command with operational certificates with a valid KES
        "
"passed","Thu Jun 16 13:45:53 CEST 2022","Thu Jun 16 13:45:53 CEST 2022","38","cardano_node_tests.tests","test_cli","TestAddressInfo","","","test_address_info_stake[dynamic]","Check stake address info."
"passed","Thu Jun 16 12:42:33 CEST 2022","Thu Jun 16 12:42:50 CEST 2022","16508","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_guessing_game[plutus_v2-typed_json]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:40:45 CEST 2022","Thu Jun 16 13:41:07 CEST 2022","21559","cardano_node_tests.tests","test_transactions","TestManyUTXOs","","","test_mini_transactions[10000000]","Test transaction with many UTxOs (300+) with small amounts of ADA (1-10).

        * use source address with many UTxOs (100000+)
        * use destination address with many UTxOs (100000+)
        * sent transaction with many UTxOs (300+) with tiny amounts of Lovelace from source address
          to destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 13:40:02 CEST 2022","Thu Jun 16 13:40:22 CEST 2022","20816","cardano_node_tests.tests","test_transactions","TestManyUTXOs","","","test_mini_transactions[1500000]","Test transaction with many UTxOs (300+) with small amounts of ADA (1-10).

        * use source address with many UTxOs (100000+)
        * use destination address with many UTxOs (100000+)
        * sent transaction with many UTxOs (300+) with tiny amounts of Lovelace from source address
          to destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:57:24 CEST 2022","Thu Jun 16 12:57:25 CEST 2022","324","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_pool_registration_fees[addr_fee3]","Test pool registration fees."
"passed","Thu Jun 16 12:54:08 CEST 2022","Thu Jun 16 12:54:08 CEST 2022","13","cardano_node_tests.tests","test_pools","TestNegative","","","test_stake_pool_metadata_no_description","Try to create pool metadata hash when missing the *description* key.

        Expect failure.
        "
"passed","Thu Jun 16 12:58:45 CEST 2022","Thu Jun 16 12:58:55 CEST 2022","9770","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_1_addr_from_10_addrs[build_raw-2000000]","Test 1 transaction from 10 payment addresses to 1 payment address.

        * send funds from 10 source addresses to 1 destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:25:51 CEST 2022","Thu Jun 16 13:01:15 CEST 2022","2123574","cardano_node_tests.tests","test_pool_saturation","TestPoolSaturation","","","test_oversaturated","Check diminished rewards when stake pool is oversaturated.

        The stake pool continues to operate normally and those who delegate to that pool receive
        rewards, but the rewards are proportionally lower than those received from stake pool
        that is not oversaturated.

        * register and delegate stake address in ""init epoch"", for all available pools
        * in ""init epoch"" + 2, saturate all available pools (block distribution remains balanced
          among pools)
        * in ""init epoch"" + 3, oversaturate one pool
        * in ""init epoch"" + 5, for all available pools, withdraw rewards and transfer funds
          from delegated addresses so pools are no longer (over)saturated
        * while doing the steps above, collect rewards data for 9 epochs
        * compare proportionality of rewards in epochs where pools were non-saturated,
          saturated and oversaturated
        "
"passed","Thu Jun 16 12:52:55 CEST 2022","Thu Jun 16 12:52:56 CEST 2022","1468","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_invalid_json[plutus_v2]","Try to build a Tx using a redeemer value that is invalid JSON.

        Expect failure.
        "
"passed","Thu Jun 16 13:08:56 CEST 2022","Thu Jun 16 13:08:56 CEST 2022","449","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_bundle_minting_and_burning_sign[tokens_db4]","Test minting and burning multiple different tokens that are in single bundle.

        Sign the TX using skeys.

        * mint several tokens using a single script
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:40:05 CEST 2022","Thu Jun 16 12:40:13 CEST 2022","7872","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMinting","","","test_time_range_minting","Test minting a token with a time constraints Plutus script.

        Uses `cardano-cli transaction build` command for building the transactions.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * mint the token using a Plutus script
        * check that the token was minted and collateral UTxO was not spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:58:48 CEST 2022","Thu Jun 16 12:58:58 CEST 2022","10153","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_1_addr_from_10_addrs[build_raw-10000000]","Test 1 transaction from 10 payment addresses to 1 payment address.

        * send funds from 10 source addresses to 1 destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:55:21 CEST 2022","Thu Jun 16 12:55:21 CEST 2022","26","cardano_node_tests.tests","test_cli","TestKey","","","test_non_extended_key_error","Try to get a non-extended verification key with a signing key file.

        Expect failure. Should only allow extended verification key files.
        "
"passed","Thu Jun 16 12:52:17 CEST 2022","Thu Jun 16 12:52:19 CEST 2022","1380","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_wrong_value_bellow_range[plutus_v2]","Try to spend a locked UTxO with a redeemer int value < minimum allowed value.

        Expect failure.
        "
"passed","Thu Jun 16 12:48:29 CEST 2022","Thu Jun 16 12:48:31 CEST 2022","1504","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_untyped_invalid_type[plutus_v2]","Try to build a Tx using a JSON untyped schema that specifies an invalid type.

        Expect failure.
        "
"skipped","Thu Jun 16 12:01:50 CEST 2022","Thu Jun 16 12:01:50 CEST 2022","0","cardano_node_tests.tests","test_configuration","TestBasic","","","test_epoch_length","Test the *epochLength* configuration."
"passed","Thu Jun 16 13:00:04 CEST 2022","Thu Jun 16 13:00:07 CEST 2022","3145","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_send_funds_to_invalid_address","Try to send funds from payment address to non-existent address (property-based test).

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"passed","Thu Jun 16 12:48:01 CEST 2022","Thu Jun 16 12:48:02 CEST 2022","1483","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_untyped_int_bytes_declared[plutus_v1]","Try to build a Tx using byte string for redeemer when JSON schema specifies int.

        Redeemer is in untyped format and the value doesn't comply to JSON schema.
        Expect failure.
        "
"passed","Thu Jun 16 13:00:26 CEST 2022","Thu Jun 16 13:00:26 CEST 2022","27","cardano_node_tests.tests","test_transactions","TestNegative","","","test_nonexistent_utxo_hash[build]","Try to use nonexistent UTxO hash as an input.

        Expect failure.
        "
"passed","Thu Jun 16 12:44:05 CEST 2022","Thu Jun 16 12:44:12 CEST 2022","6707","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_two_scripts_spending[plutus_v1]","Test locking two Tx outputs with two different Plutus scripts in single Tx.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:56:58 CEST 2022","Thu Jun 16 12:57:03 CEST 2022","5242","cardano_node_tests.tests","test_transaction_fees","TestFee","","","test_expected_or_higher_fee[100000]","Send a transaction with fee that is same or higher than expected."
"passed","Thu Jun 16 13:00:19 CEST 2022","Thu Jun 16 13:00:21 CEST 2022","2051","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_send_funds_from_invalid_chars_address","Try to send funds from address with invalid characters (property-based test).

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"passed","Thu Jun 16 12:34:23 CEST 2022","Thu Jun 16 12:39:37 CEST 2022","314271","cardano_node_tests.tests","test_plutus_lobster","TestLobsterChallenge","","","test_lobster_name","Test the Lobster Challenge.

        Uses `cardano-cli transaction build` command for building the transactions.

        * fund token issuer and create a UTxO for collateral
        * mint the LobsterNFT token
        * deploy the LobsterNFT token to address of lobster spending script
        * generate random votes and determine the expected final value
        * perform voting and check that the final value matches the expected value
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:40:32 CEST 2022","Thu Jun 16 13:55:36 CEST 2022","903934","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_undelegate","Undelegate stake address.

        * submit registration certificate and delegate to pool
        * wait for first reward
        * undelegate stake address:

           - withdraw rewards to payment address
           - deregister stake address
           - re-register stake address

        * check that the key deposit was not returned
        * check that rewards were withdrawn
        * check that the stake address is still registered
        * check that the stake address is no longer delegated
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:57:20 CEST 2022","Thu Jun 16 12:57:20 CEST 2022","38","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_10_addrs_from_1_addr_fees[amount_expected0]","Test fees for 1 tx from 1 payment address to 10 payment addresses."
"passed","Thu Jun 16 13:00:00 CEST 2022","Thu Jun 16 13:00:00 CEST 2022","38","cardano_node_tests.tests","test_transactions","TestNegative","","","test_send_funds_to_utxo_address[build]","Try to send funds from payment address to UTxO address.

        Expect failure.
        "
"passed","Thu Jun 16 12:52:03 CEST 2022","Thu Jun 16 12:52:09 CEST 2022","5951","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_wrong_value_inside_range[plutus_v1]","Try to spend a locked UTxO with an unexpected redeemer value.

        Expect failure.
        "
"passed","Thu Jun 16 12:50:41 CEST 2022","Thu Jun 16 12:50:42 CEST 2022","1310","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_collaterals[plutus_v1-none]","Test dividing required collateral amount into multiple collateral UTxOs.

        Test 3 scenarios:
        1. maximum allowed number of collateral inputs
        2. more collateral inputs than what is allowed
        3. no collateral input

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * create multiple UTxOs for collateral
        * spend the locked UTxO
        * check that the expected amount was spent when success is expected
        * OR check that the amount was not transferred and collateral UTxO was not spent
          when failure is expected
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:48:55 CEST 2022","Thu Jun 16 12:49:08 CEST 2022","13151","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_guessing_game[plutus_v1-untyped_value]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:59:18 CEST 2022","Thu Jun 16 12:59:22 CEST 2022","3894","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_tokens[build_raw-100000]","Test sending tokens to payment address.

        * send tokens from 1 source address to 1 destination address
        * check expected token balances for both source and destination addresses
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"skipped","Thu Jun 16 12:01:50 CEST 2022","Thu Jun 16 12:01:50 CEST 2022","0","cardano_node_tests.tests","test_configuration","TestBasic","","","test_slot_length","Test the *slotLength* configuration."
"passed","Thu Jun 16 12:51:36 CEST 2022","Thu Jun 16 12:51:44 CEST 2022","7623","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_same_collateral_txin[plutus_v1]","Test spending the locked UTxO while using the same UTxO as collateral.

        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO while using the same UTxO as collateral
        * check that the expected error was raised
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:58:48 CEST 2022","Thu Jun 16 12:58:58 CEST 2022","10840","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_and_burning_sign[asset_name]","Test minting and burning of tokens, sign the transaction using skeys.

        * mint 2 tokens - one identified by policyid + asset name
          and one identified by just policyid
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:31:38 CEST 2022","Thu Jun 16 12:38:49 CEST 2022","431369","cardano_node_tests.tests","test_pools","TestStakePool","","","test_reregister_stake_pool","Reregister stake pool.

        * deregister stake pool
        * check that the stake addresses are no longer delegated
        * reregister the pool by resubmitting the pool registration certificate
        * delegate stake address to pool again (the address is already registered)
        * check that pool was correctly setup
        * check that the stake addresses were delegated
        "
"passed","Thu Jun 16 12:44:08 CEST 2022","Thu Jun 16 12:44:23 CEST 2022","15238","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_txout_token_locking[plutus_v1]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output that contains native tokens with a datum hash at the script address
        * check that expected amounts of Lovelace and native tokens were locked at the script
          address
        * spend the locked UTxO
        * check that the expected amounts of Lovelace and native tokens were spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:53:02 CEST 2022","Thu Jun 16 12:53:04 CEST 2022","1569","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_untyped_invalid_type[plutus_v2]","Try to build a Tx using a JSON untyped schema that specifies an invalid type.

        Expect failure.
        "
"passed","Thu Jun 16 13:16:29 CEST 2022","Thu Jun 16 13:16:29 CEST 2022","13","cardano_node_tests.tests","test_delegation","TestNegative","","","test_delegation_cert_with_wrong_key","Try to generate stake address delegation certificate using wrong stake vkey.

        Expect failure.
        "
"passed","Thu Jun 16 12:52:58 CEST 2022","Thu Jun 16 12:53:00 CEST 2022","1468","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_typed_invalid_type[plutus_v2]","Try to build a Tx using a JSON typed schema that specifies an invalid type.

        Expect failure.
        "
"passed","Thu Jun 16 12:39:47 CEST 2022","Thu Jun 16 12:39:55 CEST 2022","7578","cardano_node_tests.tests","test_plutus_mint_raw","TestMintingNegative","","","test_witness_redeemer_missing_signer","Test minting a token with a Plutus script with invalid signers.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * try to mint the token using a Plutus script and a TX with signing key missing for
          the required signer
        * check that the minting failed because the required signers were not provided
        "
"passed","Thu Jun 16 12:57:16 CEST 2022","Thu Jun 16 12:57:16 CEST 2022","157","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_pool_registration_fees[addr_fee1]","Test pool registration fees."
"passed","Thu Jun 16 12:47:33 CEST 2022","Thu Jun 16 12:47:39 CEST 2022","6345","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeDatum","","","test_lock_tx_invalid_datum[plutus_v2]","Test locking a Tx output with an invalid datum.

        Expect failure.
        "
"passed","Thu Jun 16 12:53:00 CEST 2022","Thu Jun 16 12:53:02 CEST 2022","1467","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_json_schema_untyped_invalid_type[plutus_v1]","Try to build a Tx using a JSON untyped schema that specifies an invalid type.

        Expect failure.
        "
"passed","Thu Jun 16 12:55:31 CEST 2022","Thu Jun 16 12:55:31 CEST 2022","38","cardano_node_tests.tests","test_cli","TestAddressInfo","","","test_address_info_payment[dynamic]","Check payment address info."
"passed","Thu Jun 16 12:45:06 CEST 2022","Thu Jun 16 12:45:14 CEST 2022","7991","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_two_scripts_spending_one_fail[plutus_v2]","Test locking two Tx outputs with two different Plutus scripts in single Tx, one fails.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output with a datum hash at the script addresses
        * try to spend the locked UTxOs
        * check that the expected error was raised
        "
"passed","Thu Jun 16 12:40:02 CEST 2022","Thu Jun 16 12:40:05 CEST 2022","3741","cardano_node_tests.tests","test_plutus_mint_raw","TestMintingNegative","","","test_low_budget","Test minting a token when budget is too low.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * try to mint the token using a Plutus script when execution units are set to half
          of the expected values
        * check that the minting failed because the budget was overspent
        "
"passed","Thu Jun 16 12:54:15 CEST 2022","Thu Jun 16 12:54:23 CEST 2022","8379","cardano_node_tests.tests","test_scripts","TestBasic","","","test_multisig_all[build_raw]","Send funds to and from script address using the *all* script."
"passed","Thu Jun 16 12:53:52 CEST 2022","Thu Jun 16 12:53:52 CEST 2022","156","cardano_node_tests.tests","test_pools","TestNegative","","","test_pool_registration_missing_cold_skey","Try to register pool using transaction with missing Cold skey.

        Expect failure.
        "
"passed","Thu Jun 16 12:54:23 CEST 2022","Thu Jun 16 12:54:28 CEST 2022","5024","cardano_node_tests.tests","test_plutus_v2_spend_build","TestNegativeInlineDatum","","","test_lock_tx_datum_as_witness","Test unlock a Tx output with a datum as witness.

        Expect failure.
        "
"passed","Thu Jun 16 12:50:46 CEST 2022","Thu Jun 16 12:50:48 CEST 2022","1947","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_collateral_percent[plutus_v2]","Try to spend locked UTxO while collateral is less than required by `collateralPercentage`.

        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * create a collateral UTxO with amount of ADA less than required by `collateralPercentage`
        * try to spend the UTxO
        * check that the expected error was raised
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:51:44 CEST 2022","Thu Jun 16 12:51:45 CEST 2022","1770","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_invalid_guessing_game[plutus_v1-43_42]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"skipped","Thu Jun 16 12:01:50 CEST 2022","Thu Jun 16 12:01:50 CEST 2022","0","cardano_node_tests.tests","test_staking_rewards","TestRewards","","","test_reward_addr_delegation","Check that the rewards address can be delegated and receive rewards.

        Tests https://github.com/input-output-hk/cardano-node/issues/1964

        The pool has a reward address that is different from pool owner's stake address.

        * delegate reward address to the pool
        * collect reward address data for 8 epochs and

           - each epoch check ledger state (expected data in `pstake*`, delegation, stake amount)
           - each epoch check received reward with reward in ledger state
           - check that reward address receives rewards for its staked amount +
             the pool owner's pledge (and pool cost)
           - send TXs with MIR certs that transfer funds from reserves and treasury
             to pool reward address and check the reward was received as expected

        * check records in db-sync

           - transaction inputs, outputs, withdrawals, etc.
           - reward amounts received each epoch
           - expected pool id
           - expected reward types
        "
"passed","Thu Jun 16 13:41:11 CEST 2022","Thu Jun 16 13:41:14 CEST 2022","2612","cardano_node_tests.tests","test_transactions","TestNotBalanced","","","test_out_of_bounds_amount","Try to build a transaction with output Lovelace amount that is out of bounds."
"passed","Thu Jun 16 13:32:39 CEST 2022","Thu Jun 16 13:32:41 CEST 2022","1353","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_tokens[build_raw-10]","Test sending tokens to payment address.

        * send tokens from 1 source address to 1 destination address
        * check expected token balances for both source and destination addresses
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:00:44 CEST 2022","Thu Jun 16 13:00:47 CEST 2022","3786","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_tx_metadata_cbor","Send transaction with metadata CBOR.

        Check that the metadata in TX body matches the original metadata.
        "
"passed","Thu Jun 16 12:44:35 CEST 2022","Thu Jun 16 12:44:39 CEST 2022","3891","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_invalid_guessing_game[plutus_v2-43_42]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"passed","Thu Jun 16 12:57:42 CEST 2022","Thu Jun 16 12:57:44 CEST 2022","1887","cardano_node_tests.tests","test_transactions","TestBasic","","","test_build_transfer_funds","Send funds to payment address.

        Uses `cardano-cli transaction build` command for building the transactions.

        * send funds from 1 source address to 1 destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 13:40:23 CEST 2022","Thu Jun 16 13:40:28 CEST 2022","4403","cardano_node_tests.tests","test_pools","TestPoolCost","","","test_stake_pool_cost[500]","Create and register a stake pool with *pool cost* >= *minPoolCost*."
"passed","Thu Jun 16 12:59:42 CEST 2022","Thu Jun 16 12:59:53 CEST 2022","11692","cardano_node_tests.tests","test_transactions","TestNotBalanced","","","test_build_transfer_unavailable_funds","Try to build a transaction with more funds than available `transaction build`.

        Check that it is not possible to build such transaction.
        "
"passed","Thu Jun 16 12:49:12 CEST 2022","Thu Jun 16 12:49:24 CEST 2022","12344","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_guessing_game[plutus_v1-untyped_json]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:54:11 CEST 2022","Thu Jun 16 12:54:20 CEST 2022","9263","cardano_node_tests.tests","test_plutus_v2_spend_build","TestNegativeInlineDatum","","","test_lock_tx_big_datum","Test locking a Tx output with a datum bigger than the allowed size.

        Expect failure.
        "
"passed","Thu Jun 16 12:50:43 CEST 2022","Thu Jun 16 12:50:46 CEST 2022","3599","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_invalid_guessing_game[plutus_v2-43_42]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"passed","Thu Jun 16 12:55:22 CEST 2022","Thu Jun 16 12:55:30 CEST 2022","8881","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_addr_delegation_deregistration[build_raw]","Submit delegation and deregistration certificates in single TX.

        * create stake address registration cert
        * create stake address deregistration cert
        * register stake address
        * create stake address delegation cert
        * delegate and deregister stake address in single TX
        * check that the balance for source address was correctly updated and that the key
          deposit was returned
        * check that the stake address was NOT delegated
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:59:59 CEST 2022","Thu Jun 16 12:59:59 CEST 2022","27","cardano_node_tests.tests","test_transactions","TestNegative","","","test_send_funds_to_reward_address[build_raw]","Try to send funds from payment address to stake address.

        Expect failure.
        "
"passed","Thu Jun 16 12:54:27 CEST 2022","Thu Jun 16 12:54:28 CEST 2022","1468","cardano_node_tests.tests","test_pools","TestNegative","","","test_stake_pool_metadata_long_ticker","Try to create pool metadata hash when the *ticker* value is longer than allowed.

        Expect failure. Property-based test.
        "
"passed","Thu Jun 16 12:42:23 CEST 2022","Thu Jun 16 12:42:45 CEST 2022","21566","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_bundle_minting_and_burning_witnesses[tokens_db0]","Test minting and burning multiple different tokens that are in single bundle.

        Sign the TX using witnesses.

        * mint several tokens using a single script
        * burn the minted tokens
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:48:34 CEST 2022","Thu Jun 16 12:48:39 CEST 2022","5375","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeDatum","","","test_no_datum_txout[plutus_v1]","Test using UTxO without datum hash in place of locked UTxO.

        Expect failure.

        * create a Tx output without a datum hash
        * try to spend the UTxO like it was locked Plutus UTxO
        * check that the expected error was raised
        "
"passed","Thu Jun 16 12:40:36 CEST 2022","Thu Jun 16 12:40:52 CEST 2022","16288","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMinting","","","test_witness_redeemer[normal]","Test minting a token with a Plutus script.

        Uses `cardano-cli transaction build` command for building the transactions.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * mint the token using a Plutus script with required signer
        * check that the token was minted and collateral UTxO was not spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:46:06 CEST 2022","Thu Jun 16 12:46:07 CEST 2022","1379","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_wrong_value_bellow_range[plutus_v2]","Try to spend a locked UTxO with a wrong redeemer value, bellow min value allowed.

        Expect failure.
        "
"passed","Thu Jun 16 12:57:21 CEST 2022","Thu Jun 16 12:57:21 CEST 2022","39","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_10_addrs_from_1_addr_fees[amount_expected1]","Test fees for 1 tx from 1 payment address to 10 payment addresses."
"passed","Thu Jun 16 12:57:25 CEST 2022","Thu Jun 16 12:57:25 CEST 2022","147","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_10_addrs_from_10_addrs_fees[amount_expected3]","Test fees for 1 tx from 10 payment addresses to 10 payment addresses."
"passed","Thu Jun 16 14:12:00 CEST 2022","Thu Jun 16 14:12:01 CEST 2022","1071","cardano_node_tests.tests","test_native_tokens","TestPolicies","","","test_policy_after_future","Test that it's NOT possible to mint tokens when the policy is not met.

        The ""after"" slot is in the future and the given range is invalid.
        "
"passed","Thu Jun 16 12:48:33 CEST 2022","Thu Jun 16 12:48:34 CEST 2022","1409","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_json_schema_typed_bytes_int_declared[plutus_v1]","Try to build a Tx using int value for redeemer when JSON schema specifies byte string.

        Redeemer is in typed format and the value doesn't comply to JSON schema.
        Expect failure.
        "
"passed","Thu Jun 16 13:16:07 CEST 2022","Thu Jun 16 13:16:25 CEST 2022","17706","cardano_node_tests.tests","test_delegation","TestDelegateAddr","","","test_delegate_using_pool_id[build_raw]","Submit registration certificate and delegate to pool using pool id.

        * register stake address and delegate it to pool
        * check that the stake address was delegated
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 13:00:27 CEST 2022","Thu Jun 16 13:00:30 CEST 2022","2858","cardano_node_tests.tests","test_transactions","TestNegative","","","test_build_invalid_lenght_utxo_hash","Try to use invalid UTxO hash as an input (property-based test).

        Uses `cardano-cli transaction build` command for building the transactions.

        Expect failure.
        "
"passed","Thu Jun 16 13:22:30 CEST 2022","Thu Jun 16 13:22:38 CEST 2022","7352","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_and_burning_witnesses[build_raw-asset_name]","Test minting and burning of tokens, sign the transaction using witnesses.

        * mint 2 tokens - one identified by policyid + asset name
          and one identified by just policyid
        * burn the minted tokens
        * check fees in Lovelace
        * check output of the `transaction view` command
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:59:04 CEST 2022","Thu Jun 16 12:59:17 CEST 2022","12490","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_10_addrs_from_10_addrs[build-2000000]","Test 1 transaction from 10 payment addresses to 10 payment addresses.

        * send funds from 10 source addresses to 10 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:28:48 CEST 2022","Thu Jun 16 12:28:48 CEST 2022","13","cardano_node_tests.tests","test_cli","TestAddressInfo","","","test_address_info_payment[static]","Check payment address info."
"passed","Thu Jun 16 12:57:48 CEST 2022","Thu Jun 16 12:57:51 CEST 2022","3643","cardano_node_tests.tests","test_transactions","TestBasic","","","test_transfer_all_funds","Send ALL funds from one payment address to another.

        * send all available funds from 1 source address to 1 destination address
        * check expected balance for destination addresses
        * check that balance for source address is 0 Lovelace
        * check output of the `transaction view` command
        "
"passed","Thu Jun 16 12:44:12 CEST 2022","Thu Jun 16 12:44:23 CEST 2022","11432","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_collateral_w_tokens[plutus_v1]","Test spending the locked UTxO while collateral contains native tokens.

        Expect failure.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a collateral UTxO with native tokens
        * try to spend the locked UTxO
        * check that the expected error was raised
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:50:35 CEST 2022","Thu Jun 16 12:50:43 CEST 2022","8331","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_collaterals[plutus_v2-max]","Test dividing required collateral amount into multiple collateral UTxOs.

        Test 3 scenarios:
        1. maximum allowed number of collateral inputs
        2. more collateral inputs than what is allowed
        3. no collateral input

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * create multiple UTxOs for collateral
        * spend the locked UTxO
        * check that the expected amount was spent when success is expected
        * OR check that the amount was not transferred and collateral UTxO was not spent
          when failure is expected
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:59:23 CEST 2022","Thu Jun 16 12:59:23 CEST 2022","195","cardano_node_tests.tests","test_delegation","TestNegative","","","test_delegate_unknown_addr[build]","Try to delegate unknown stake address.

        Expect failure.
        "
"passed","Thu Jun 16 13:00:31 CEST 2022","Thu Jun 16 13:00:32 CEST 2022","94","cardano_node_tests.tests","test_transactions","TestNegative","","","test_sign_wrong_file[tx_body]","Try to sign other file type than specified by command line option (Tx vs Tx body).

        Expect failure when cardano-cli CBOR serialization format is used (not CDDL format).

        * specify Tx file and pass Tx body file
        * specify Tx body file and pass Tx file
        "
"passed","Thu Jun 16 12:25:43 CEST 2022","Thu Jun 16 12:52:26 CEST 2022","1603101","cardano_node_tests.tests","test_staking_no_rewards","TestNoRewards","","","test_deregister_reward_addr_retire_pool","Test deregistering reward address and retiring stake pool.

        The pool deposit is lost when reward address is deregistered before the pool is retired.

        * wait for first reward for the pool
        * withdraw pool rewards to payment address
        * deregister the pool reward address
        * check that the key deposit was returned
        * check that pool owner is NOT receiving rewards
        * deregister stake pool
        * check that the pool deposit was NOT returned to reward or stake address
        * return the pool to the original state - reregister the pool, register
          the reward address, delegate the stake address to the pool
        * check that pool deposit was needed
        * check that pool owner is receiving rewards
        "
"passed","Thu Jun 16 13:00:40 CEST 2022","Thu Jun 16 13:00:40 CEST 2022","26","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_tx_too_long_metadata_json","Try to build a transaction with metadata JSON longer than 64 bytes."
"passed","Thu Jun 16 12:39:15 CEST 2022","Thu Jun 16 12:39:18 CEST 2022","3129","cardano_node_tests.tests","test_plutus_mint_raw","TestMintingNegative","","","test_minting_with_invalid_collaterals","Test minting a token with a Plutus script with invalid collaterals.

        Expect failure.

        * fund the token issuer and create an UTxO for collateral with insufficient funds
        * check that the expected amount was transferred to token issuer's address
        * mint the token using a Plutus script
        * check that the minting failed because no valid collateral was provided
        "
"passed","Thu Jun 16 12:50:59 CEST 2022","Thu Jun 16 12:51:04 CEST 2022","4403","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_two_scripts_spending_one_fail[plutus_v1]","Test locking two Tx outputs with two different Plutus scripts in single Tx, one fails.

        Expect failure.

        * create a Tx output with a datum hash at the script addresses
        * try to spend the locked UTxOs
        * check that the expected error was raised
        "
"passed","Thu Jun 16 12:51:25 CEST 2022","Thu Jun 16 12:51:32 CEST 2022","6278","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_collateral_w_tokens[plutus_v2]","Test spending the locked UTxO while collateral contains native tokens.

        Expect failure.

        * create a collateral UTxO with native tokens
        * try to spend the locked UTxO
        * check that the expected error was raised
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:55:58 CEST 2022","Thu Jun 16 12:56:04 CEST 2022","6716","cardano_node_tests.tests","test_scripts","TestTimeLocking","","","test_script_after[build]","Check that it is possible to spend from script address after given slot."
"passed","Thu Jun 16 13:19:09 CEST 2022","Thu Jun 16 13:19:28 CEST 2022","18801","cardano_node_tests.tests","test_pools","TestStakePool","","","test_stake_pool_not_avail_metadata[build_raw]","Create and register a stake pool with metadata file not available.

        Check that pool was registered and stake address delegated.
        "
"passed","Thu Jun 16 12:54:29 CEST 2022","Thu Jun 16 12:55:27 CEST 2022","58462","cardano_node_tests.tests","test_pools","TestNegative","","","test_stake_pool_metadata_long_homepage","Try to create pool metadata hash when the *homepage* value is longer than allowed.

        Expect failure. Property-based test.
        "
"passed","Thu Jun 16 12:41:31 CEST 2022","Thu Jun 16 12:41:38 CEST 2022","6649","cardano_node_tests.tests","test_plutus_mint_build","TestBuildMintingNegative","","","test_witness_redeemer_missing_signer","Test minting a token with a Plutus script with invalid signers.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * try to mint the token using a Plutus script and a TX with signing key missing for
          the required signer
        * check that the minting failed because the required signers were not provided
        "
"passed","Thu Jun 16 12:57:38 CEST 2022","Thu Jun 16 12:57:41 CEST 2022","3426","cardano_node_tests.tests","test_transactions","TestBasic","","","test_transfer_funds[2000000]","Send funds to payment address.

        * send funds from 1 source address to 1 destination address
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:40:29 CEST 2022","Thu Jun 16 12:40:36 CEST 2022","7024","cardano_node_tests.tests","test_plutus_mint_raw","TestMintingNegative","","","test_past_horizon[3000]","Test minting a token with ttl too far in the future.

        Expect failure.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * try to mint a token using a Plutus script when ttl is set too far in the future
        * check that minting failed because of 'PastHorizon' failure
        "
"passed","Thu Jun 16 12:25:46 CEST 2022","Thu Jun 16 12:58:58 CEST 2022","1992001","cardano_node_tests.tests","test_staking_rewards","TestRewards","","","test_reward_amount","Check that the stake address and pool owner are receiving rewards.

        * create two payment addresses that share single stake address
        * register and delegate the stake address to pool
        * create UTxOs with native tokens
        * collect data for pool owner and pool users for 9 epochs

           - each epoch check ledger state (expected data in `pstake*`, delegation, stake amount)
           - each epoch check received reward with reward in ledger state

        * withdraw rewards to payment address
        * burn native tokens
        * (optional) check records in db-sync
        "
"passed","Thu Jun 16 12:57:24 CEST 2022","Thu Jun 16 12:57:24 CEST 2022","147","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_10_addrs_from_10_addrs_fees[amount_expected0]","Test fees for 1 tx from 10 payment addresses to 10 payment addresses."
"passed","Thu Jun 16 13:55:36 CEST 2022","Thu Jun 16 13:58:39 CEST 2022","183543","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_pay_unregistered_stake_addr_from[reserves-addr_known]","Send funds from the reserves or treasury pot to unregistered stake address.

        * generate an MIR certificate
        * if a stake address should be known on blockchain:

            - register the stake address
            - if transferring funds from treasury, deregister the stake address
              BEFORE submitting the TX

        * submit a TX with the MIR certificate
        * if a stake address should be known on blockchain and if transferring funds from reserves,
          deregister the stake address AFTER submitting the TX
        * check that the amount was NOT added to the stake address reward account
        * (optional) check transaction in db-sync
        "
"passed","Thu Jun 16 12:57:47 CEST 2022","Thu Jun 16 12:57:51 CEST 2022","3828","cardano_node_tests.tests","test_transactions","TestBasic","","","test_get_txid","Get transaction ID (txid) from transaction body.

        Transaction ID is a hash of transaction body and doesn't change for a signed TX.

        * send funds from 1 source address to 1 destination address
        * get txid from transaction body
        * get txid from signed transaction
        * check that txid from transaction body matches the txid from signed transaction
        * check that txid has expected length
        * check that the txid is listed in UTxO hashes for both source and destination addresses
        "
"passed","Thu Jun 16 12:52:48 CEST 2022","Thu Jun 16 12:52:49 CEST 2022","1394","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeRedeemer","","","test_wrong_value_above_range[plutus_v2]","Try to spend a locked UTxO with a redeemer int value > maximum allowed value.

        Expect failure.
        "
"passed","Thu Jun 16 13:40:36 CEST 2022","Thu Jun 16 13:40:41 CEST 2022","5399","cardano_node_tests.tests","test_transactions","TestNotBalanced","","","test_wrong_balance","Build a transaction with unbalanced change (property-based test).

        * build an unbalanced transaction
        * check that it is not possible to submit such transaction
        "
"passed","Thu Jun 16 12:39:22 CEST 2022","Thu Jun 16 12:39:22 CEST 2022","13","cardano_node_tests.tests","test_cli","TestAddressInfo","","","test_address_info_stake[static]","Check stake address info."
"passed","Thu Jun 16 12:52:21 CEST 2022","Thu Jun 16 12:52:23 CEST 2022","1790","cardano_node_tests.tests","test_plutus_spend_raw","TestNegative","","","test_invalid_guessing_game[plutus_v2-42_43]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"passed","Thu Jun 16 12:55:58 CEST 2022","Thu Jun 16 12:56:00 CEST 2022","1462","cardano_node_tests.tests","test_scripts","TestNegative","","","test_multisig_any_unlisted_skey","Try to send funds from script address using the *any* script with unlisted skey.

        Expect failure.
        "
"passed","Thu Jun 16 12:53:16 CEST 2022","Thu Jun 16 12:53:23 CEST 2022","7201","cardano_node_tests.tests","test_plutus_spend_raw","TestNegativeDatum","","","test_unlock_tx_wrong_datum[plutus_v1]","Test locking a Tx output and try to spend it with a wrong datum.

        Expect failure.
        "
"passed","Thu Jun 16 12:55:22 CEST 2022","Thu Jun 16 12:55:29 CEST 2022","6535","cardano_node_tests.tests","test_mir_certs","TestMIRCerts","","","test_transfer_to_treasury","Send funds from the reserves pot to the treasury pot.

        Expected to fail when Era < Alonzo.
        "
"passed","Thu Jun 16 12:54:23 CEST 2022","Thu Jun 16 12:54:35 CEST 2022","12147","cardano_node_tests.tests","test_scripts","TestBasic","","","test_multisig_all[build]","Send funds to and from script address using the *all* script."
"passed","Thu Jun 16 12:43:04 CEST 2022","Thu Jun 16 12:43:22 CEST 2022","18303","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_txout_locking[plutus_v1]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Corresponds to Exercise 3 for Alonzo Blue.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:47:04 CEST 2022","Thu Jun 16 12:47:07 CEST 2022","2519","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeDatum","","","test_no_datum_txout[plutus_v2]","Test using UTxO without datum hash in place of locked UTxO.

        Expect failure.

        * create a Tx output without a datum hash
        * try to spend the UTxO like it was locked Plutus UTxO
        * check that the expected error was raised
        "
"passed","Thu Jun 16 12:45:14 CEST 2022","Thu Jun 16 12:45:17 CEST 2022","3062","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_invalid_guessing_game[plutus_v1-43_42]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" script that expects specific datum and redeemer value.
        Test negative scenarios where datum or redeemer value is different than expected.
        Expect failure.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was not spent
        "
"passed","Thu Jun 16 12:56:47 CEST 2022","Thu Jun 16 12:56:47 CEST 2022","27","cardano_node_tests.tests","test_scripts","TestAuxiliaryScripts","","","test_tx_script_invalid[build]","Build transaction with invalid auxiliary script.

        Expect failure.
        "
"passed","Thu Jun 16 12:44:24 CEST 2022","Thu Jun 16 12:44:39 CEST 2022","14219","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_txout_token_locking[plutus_v2]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output that contains native tokens with a datum hash at the script address
        * check that expected amounts of Lovelace and native tokens were locked at the script
          address
        * spend the locked UTxO
        * check that the expected amounts of Lovelace and native tokens were spent
        * check expected fees
        * check expected Plutus cost
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:19:34 CEST 2022","Thu Jun 16 13:29:07 CEST 2022","573578","cardano_node_tests.tests","test_pools","TestStakePool","","","test_pool_registration_deregistration","Send both pool registration and deregistration certificates in single TX.

        * create pool registration cert
        * create pool deregistration cert
        * register and deregister stake pool in single TX
        * check that the pool deposit was NOT returned to reward account as the reward address
          is not registered (deposit is lost)
        "
"passed","Thu Jun 16 12:45:59 CEST 2022","Thu Jun 16 12:46:09 CEST 2022","10146","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_wrong_value_inside_range[plutus_v2]","Try to spend a locked UTxO with a wrong redeemer value that is in the valid range.

        Expect failure.
        "
"passed","Thu Jun 16 12:59:54 CEST 2022","Thu Jun 16 12:59:54 CEST 2022","100","cardano_node_tests.tests","test_transactions","TestNegative","","","test_past_ttl","Try to send a transaction with ttl in the past.

        Expect failure.
        "
"passed","Thu Jun 16 12:44:39 CEST 2022","Thu Jun 16 12:44:45 CEST 2022","5203","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_same_collateral_txin[plutus_v1]","Test spending the locked UTxO while using the same UTxO as collateral.

        Expect failure.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO while using the same UTxO as collateral
        * check that the expected error was raised
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:00:00 CEST 2022","Thu Jun 16 13:00:04 CEST 2022","3165","cardano_node_tests.tests","test_transactions","TestNegative","","","test_send_funds_to_invalid_address","Try to send funds from payment address to non-existent address (property-based test).

        Expect failure.
        "
"passed","Thu Jun 16 12:56:51 CEST 2022","Thu Jun 16 12:57:01 CEST 2022","10028","cardano_node_tests.tests","test_scripts","TestIncrementalSigning","","","test_incremental_signing[witnessed-build]","Send funds from script address using TX that is signed incrementally.

        Test with Tx body created by both `transaction build` and `transaction build-raw`.
        Test with Tx created by both `transaction sign` and `transaction assemble`.
        "
"skipped","Thu Jun 16 12:43:55 CEST 2022","Thu Jun 16 12:43:59 CEST 2022","4078","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_script_invalid","Test failing script together with the `--script-invalid` argument - collateral is taken.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""always fails"" script that fails for all datum / redeemer values.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * try to spend the locked UTxO
        * check that the amount was not transferred and collateral UTxO was spent
        "
"passed","Thu Jun 16 12:56:49 CEST 2022","Thu Jun 16 12:56:51 CEST 2022","2582","cardano_node_tests.tests","test_transaction_fees","TestFee","","","test_negative_fee","Try to send a transaction with negative fee (property-based test).

        Expect failure.
        "
"passed","Thu Jun 16 13:19:18 CEST 2022","Thu Jun 16 13:19:30 CEST 2022","12410","cardano_node_tests.tests","test_pools","TestStakePool","","","test_stake_pool_metadata[build]","Create and register a stake pool with metadata.

        Check that pool was registered and stake address delegated.
        "
"passed","Thu Jun 16 13:00:43 CEST 2022","Thu Jun 16 13:00:47 CEST 2022","3855","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_build_tx_metadata_json","Send transaction with metadata JSON.

        Uses `cardano-cli transaction build` command for building the transactions.

        * check that the metadata in TX body matches the original metadata
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:38:48 CEST 2022","Thu Jun 16 12:39:04 CEST 2022","15795","cardano_node_tests.tests","test_plutus_mint_raw","TestMinting","","","test_minting_policy_executed_once2","Test that minting policy is executed only once even when the same policy is used twice.

        Test minting two tokens while using one Plutus script and one redeemer.

        The Plutus script used in this test takes the expected token name as
        redeemer. Even though the redeemer doesn't match name of the first
        token, the token get's minted anyway. That's because it is only checked
        that the last token name matches the redeemer, and redeemer for the
        first token is not needed.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * mint the tokens using a redeemer value that doesn't match the name of the first token
        * check that the tokens were minted and collateral UTxOs were not spent, i.e. redeemer for
          the first token was not needed
        * check transaction view output
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:52:12 CEST 2022","Thu Jun 16 12:55:18 CEST 2022","186663","cardano_node_tests.tests","test_pools","TestStakePool","","","test_deregister_stake_pool[build]","Deregister stake pool.

        * deregister stake pool
        * check that the stake addresses are no longer delegated
        * check that the pool deposit was returned to reward account
        "
"passed","Thu Jun 16 12:37:48 CEST 2022","Thu Jun 16 12:38:09 CEST 2022","21674","cardano_node_tests.tests","test_plutus_mint_raw","TestMinting","","","test_time_range_minting","Test minting a token with a time constraints Plutus script.

        * fund the token issuer and create a UTxO for collateral
        * check that the expected amount was transferred to token issuer's address
        * mint the token using a Plutus script
        * check that the token was minted and collateral UTxO was not spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:46:53 CEST 2022","Thu Jun 16 12:46:54 CEST 2022","1376","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_wrong_value_bellow_range[plutus_v1]","Try to spend a locked UTxO with a wrong redeemer value, bellow min value allowed.

        Expect failure.
        "
"passed","Thu Jun 16 13:00:48 CEST 2022","Thu Jun 16 13:00:55 CEST 2022","7443","cardano_node_tests.tests","test_transactions","TestMetadata","","","test_tx_metadata_both","Send transaction with both metadata JSON and CBOR.

        Check that the metadata in TX body matches the original metadata.
        "
"passed","Thu Jun 16 12:44:56 CEST 2022","Thu Jun 16 12:44:58 CEST 2022","2120","cardano_node_tests.tests","test_plutus_spend_build","TestNegative","","","test_two_scripts_spending_one_fail[plutus_v1]","Test locking two Tx outputs with two different Plutus scripts in single Tx, one fails.

        Uses `cardano-cli transaction build` command for building the transactions.

        * create a Tx output with a datum hash at the script addresses
        * try to spend the locked UTxOs
        * check that the expected error was raised
        "
"passed","Thu Jun 16 12:48:21 CEST 2022","Thu Jun 16 12:48:29 CEST 2022","7540","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_txout_locking[plutus_v2]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Corresponds to Exercise 3 for Alonzo Blue.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:47:04 CEST 2022","Thu Jun 16 12:47:05 CEST 2022","1520","cardano_node_tests.tests","test_plutus_spend_build","TestNegativeRedeemer","","","test_invalid_json[plutus_v2]","Try to build a Tx using a redeemer value that is invalid JSON.

        Expect failure.
        "
"passed","Thu Jun 16 12:59:19 CEST 2022","Thu Jun 16 12:59:34 CEST 2022","14876","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_100_addrs_from_50_addrs[build-2000000]","Test 1 transaction from 50 payment addresses to 100 payment addresses.

        * send funds from 50 source addresses to 100 destination addresses
        * check expected balances for both source and destination addresses
        "
"passed","Thu Jun 16 12:25:45 CEST 2022","Thu Jun 16 13:19:08 CEST 2022","3203211","cardano_node_tests.tests","test_staking_no_rewards","TestNoRewards","","","test_no_reward_unmet_pledge2","Check that the stake pool is not receiving rewards when pledge is not met.

        When the pledge is higher than available funds, neither pool owners nor those who
        delegate to that pool receive rewards.

        * delegate stake address
        * wait for first reward
        * withdraw part of the pledge - the funds are lower than what is needed by the stake pool
        * check that NO new rewards were received by those delegating to the pool
        * check that pool owner is also NOT receiving rewards
        * return the pool to the original state - restore pledge funds
        * check that new rewards were received by those delegating to the pool
        * check that pool owner is also receiving rewards
        "
"passed","Thu Jun 16 12:57:27 CEST 2022","Thu Jun 16 12:57:28 CEST 2022","1249","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_100_addrs_from_100_addrs_fees[amount_expected1]","Test fees for 1 tx from 100 payment addresses to 100 payment addresses."
"passed","Thu Jun 16 13:00:26 CEST 2022","Thu Jun 16 13:00:26 CEST 2022","26","cardano_node_tests.tests","test_transactions","TestNegative","","","test_nonexistent_utxo_ix[build]","Try to use nonexistent UTxO TxIx as an input.

        Expect failure.
        "
"passed","Thu Jun 16 12:54:14 CEST 2022","Thu Jun 16 12:54:14 CEST 2022","249","cardano_node_tests.tests","test_scripts","TestBasic","","","test_script_addr_length","Check that script address length is the same as length of other addresses.

        There was an issue that script address was 32 bytes instead of 28 bytes.
        "
"passed","Thu Jun 16 12:57:43 CEST 2022","Thu Jun 16 12:57:43 CEST 2022","51","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_addr_registration_fees[addr_fee0]","Test stake address registration fees."
"passed","Thu Jun 16 12:57:21 CEST 2022","Thu Jun 16 12:57:21 CEST 2022","40","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_10_addrs_from_1_addr_fees[amount_expected2]","Test fees for 1 tx from 1 payment address to 10 payment addresses."
"passed","Thu Jun 16 12:53:51 CEST 2022","Thu Jun 16 12:53:51 CEST 2022","37","cardano_node_tests.tests","test_pools","TestNegative","","","test_pool_registration_cert_wrong_cold","Try to generate pool registration certificate using wrong Cold vkey.

        Expect failure.
        "
"passed","Thu Jun 16 13:08:45 CEST 2022","Thu Jun 16 13:08:55 CEST 2022","9555","cardano_node_tests.tests","test_native_tokens","TestMinting","","","test_minting_and_burning_witnesses[build-empty_asset_name]","Test minting and burning of tokens, sign the transaction using witnesses.

        * mint 2 tokens - one identified by policyid + asset name
          and one identified by just policyid
        * burn the minted tokens
        * check fees in Lovelace
        * check output of the `transaction view` command
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 13:03:06 CEST 2022","Thu Jun 16 13:03:06 CEST 2022","134","cardano_node_tests.tests","test_delegation","TestNegative","","","test_register_addr_with_wrong_key","Try to register stake address using wrong payment skey.

        Expect failure.
        "
"passed","Thu Jun 16 12:33:55 CEST 2022","Thu Jun 16 12:34:09 CEST 2022","14248","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_invalid_token_amount[build]","Test sending an invalid amount of tokens to payment address."
"passed","Thu Jun 16 12:57:18 CEST 2022","Thu Jun 16 12:57:18 CEST 2022","74","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_addr_deregistration_fees[addr_fee1]","Test stake address deregistration fees."
"passed","Thu Jun 16 12:49:27 CEST 2022","Thu Jun 16 12:49:35 CEST 2022","8513","cardano_node_tests.tests","test_plutus_spend_raw","TestLocking","","","test_guessing_game[plutus_v1-untyped_cbor]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:54:08 CEST 2022","Thu Jun 16 12:54:08 CEST 2022","14","cardano_node_tests.tests","test_pools","TestNegative","","","test_stake_pool_metadata_no_ticker","Try to create pool metadata hash when missing the *ticker* key.

        Expect failure.
        "
"passed","Thu Jun 16 12:43:50 CEST 2022","Thu Jun 16 12:43:58 CEST 2022","8015","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_guessing_game[plutus_v2-untyped_cbor]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:57:20 CEST 2022","Thu Jun 16 12:57:20 CEST 2022","39","cardano_node_tests.tests","test_transaction_fees","TestExpectedFees","","","test_transaction_to_1_addr_from_1_addr_fees[amount_expected1]","Test fees for 1 tx from 1 payment address to 1 payment address."
"passed","Thu Jun 16 12:55:31 CEST 2022","Thu Jun 16 12:55:38 CEST 2022","6629","cardano_node_tests.tests","test_delegation","TestNegative","","","test_delegate_deregistered_addr[build]","Try to delegate deregistered stake address.

        Expect failure.
        "
"passed","Thu Jun 16 12:42:07 CEST 2022","Thu Jun 16 12:42:23 CEST 2022","15705","cardano_node_tests.tests","test_plutus_spend_build","TestBuildLocking","","","test_guessing_game[plutus_v1-untyped_cbor]","Test locking a Tx output with a Plutus script and spending the locked UTxO.

        Uses `cardano-cli transaction build` command for building the transactions.

        Test with ""guessing game"" scripts that expect specific datum and redeemer value.
        Test both typed and untyped redeemer and datum.
        Test passing datum and redeemer to `cardano-cli` as value, json file and cbor file.

        * create a Tx output with a datum hash at the script address
        * check that the expected amount was locked at the script address
        * spend the locked UTxO
        * check that the expected amount was spent
        * (optional) check transactions in db-sync
        "
"skipped","Thu Jun 16 12:56:47 CEST 2022","Thu Jun 16 12:56:47 CEST 2022","0","cardano_node_tests.tests","test_shelley_cddl","TestShelleyCDDL","","","test_shelley_cddl","Check expected failure when Shelley Tx is used with CDDL format."
"passed","Thu Jun 16 12:32:54 CEST 2022","Thu Jun 16 12:32:58 CEST 2022","3795","cardano_node_tests.tests","test_native_tokens","TestTransfer","","","test_transfer_tokens[build-1]","Test sending tokens to payment address.

        * send tokens from 1 source address to 1 destination address
        * check expected token balances for both source and destination addresses
        * check fees in Lovelace
        * (optional) check transactions in db-sync
        "
"passed","Thu Jun 16 12:59:11 CEST 2022","Thu Jun 16 12:59:24 CEST 2022","12882","cardano_node_tests.tests","test_transactions","TestMultiInOut","","","test_transaction_to_100_addrs_from_50_addrs[build_raw-1500000]","Test 1 transaction from 50 payment addresses to 100 payment addresses.

        * send funds from 50 source addresses to 100 destination addresses
        * check expected balances for both source and destination addresses
        "
