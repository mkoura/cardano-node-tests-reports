{
  "uid" : "1ec942882c40ee58",
  "name" : "test_transfer_amount_bellow_minimum",
  "fullName" : "cardano_node_tests.tests.test_transactions.TestNotBalanced#test_transfer_amount_bellow_minimum",
  "historyId" : "665e1a3619961c5f8b2cdcdd23024d25",
  "time" : {
    "start" : 1655331036694,
    "stop" : 1655331040981,
    "duration" : 4287
  },
  "description" : "Try to build a transaction with amount bellow the minimum lovelace required.\n\n        Uses `cardano-cli transaction build-raw` command for building the transactions.\n\n        Expect failure.\n        ",
  "descriptionHtml" : "<p>Try to build a transaction with amount bellow the minimum lovelace required.</p>\n<pre><code>    Uses `cardano-cli transaction build-raw` command for building the transactions.\n\n    Expect failure.\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "hypothesis.errors.Flaky: Inconsistent test results! Test case was Conclusion(status=Status.INTERESTING, interesting_origin=(<class 'Failed'>, '/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/_pytest/outcomes.py', 153, (), ())) on first run but Conclusion(status=Status.INTERESTING, interesting_origin=(<class 'AssertionError'>, '/home/martink/Source/repos/cardano-node-tests6/cardano_node_tests/tests/test_transactions.py', 1776, (), ())) on second",
  "statusTrace" : "self = <hypothesis.core.StateForActualGivenExecution object at 0x7f9caef14070>, data = ConjectureData(INTERESTING, 4 bytes, frozen)\n\n    def _execute_once_for_engine(self, data):\n        \"\"\"Wrapper around ``execute_once`` that intercepts test failure\n        exceptions and single-test control exceptions, and turns them into\n        appropriate method calls to `data` instead.\n    \n        This allows the engine to assume that any exception other than\n        ``StopTest`` must be a fatal error, and should stop the entire engine.\n        \"\"\"\n        try:\n            trace = frozenset()\n            if (\n                self.failed_normally\n                and not self.failed_due_to_deadline\n                and Phase.shrink in self.settings.phases\n                and Phase.explain in self.settings.phases\n                and sys.gettrace() is None\n                and not PYPY\n            ):  # pragma: no cover\n                # This is in fact covered by our *non-coverage* tests, but due to the\n                # settrace() contention *not* by our coverage tests.  Ah well.\n                tracer = Tracer()\n                try:\n                    sys.settrace(tracer.trace)\n                    result = self.execute_once(data)\n                    if data.status == Status.VALID:\n                        self.explain_traces[None].add(frozenset(tracer.branches))\n                finally:\n                    sys.settrace(None)\n                    trace = frozenset(tracer.branches)\n            else:\n>               result = self.execute_once(data)\n\n/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/hypothesis/core.py:724: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <hypothesis.core.StateForActualGivenExecution object at 0x7f9caef14070>, data = ConjectureData(INTERESTING, 4 bytes, frozen), print_example = False, is_final = False, expected_failure = None\n\n    def execute_once(\n        self, data, print_example=False, is_final=False, expected_failure=None\n    ):\n        \"\"\"Run the test function once, using ``data`` as input.\n    \n        If the test raises an exception, it will propagate through to the\n        caller of this method. Depending on its type, this could represent\n        an ordinary test failure, or a fatal error, or a control exception.\n    \n        If this method returns normally, the test might have passed, or\n        it might have placed ``data`` in an unsuccessful state and then\n        swallowed the corresponding control exception.\n        \"\"\"\n    \n        data.is_find = self.is_find\n    \n        text_repr = None\n        if self.settings.deadline is None:\n            test = self.test\n        else:\n    \n            @proxies(self.test)\n            def test(*args, **kwargs):\n                self.__test_runtime = None\n                initial_draws = len(data.draw_times)\n                start = time.perf_counter()\n                result = self.test(*args, **kwargs)\n                finish = time.perf_counter()\n                internal_draw_time = sum(data.draw_times[initial_draws:])\n                runtime = datetime.timedelta(\n                    seconds=finish - start - internal_draw_time\n                )\n                self.__test_runtime = runtime\n                current_deadline = self.settings.deadline\n                if not is_final:\n                    current_deadline = (current_deadline // 4) * 5\n                if runtime >= current_deadline:\n                    raise DeadlineExceeded(runtime, self.settings.deadline)\n                return result\n    \n        def run(data):\n            # Set up dynamic context needed by a single test run.\n            with local_settings(self.settings):\n                with deterministic_PRNG():\n                    with BuildContext(data, is_final=is_final):\n    \n                        # Generate all arguments to the test function.\n                        args, kwargs = data.draw(self.search_strategy)\n                        if expected_failure is not None:\n                            nonlocal text_repr\n                            text_repr = repr_call(test, args, kwargs)\n    \n                        if print_example or current_verbosity() >= Verbosity.verbose:\n                            output = StringIO()\n    \n                            printer = RepresentationPrinter(output)\n                            if print_example:\n                                printer.text(\"Falsifying example:\")\n                            else:\n                                printer.text(\"Trying example:\")\n    \n                            if self.print_given_args:\n                                printer.text(\" \")\n                                printer.text(test.__name__)\n                                with printer.group(indent=4, open=\"(\", close=\"\"):\n                                    printer.break_()\n                                    for v in args:\n                                        printer.pretty(v)\n                                        # We add a comma unconditionally because\n                                        # generated arguments will always be kwargs,\n                                        # so there will always be more to come.\n                                        printer.text(\",\")\n                                        printer.breakable()\n    \n                                    for i, (k, v) in enumerate(kwargs.items()):\n                                        printer.text(k)\n                                        printer.text(\"=\")\n                                        printer.pretty(v)\n                                        printer.text(\",\")\n                                        if i + 1 < len(kwargs):\n                                            printer.breakable()\n                                printer.break_()\n                                printer.text(\")\")\n                            printer.flush()\n                            report(output.getvalue())\n                        return test(*args, **kwargs)\n    \n        # Run the test function once, via the executor hook.\n        # In most cases this will delegate straight to `run(data)`.\n>       result = self.test_runner(data, run)\n\n/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/hypothesis/core.py:662: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = ConjectureData(INTERESTING, 4 bytes, frozen), function = <function StateForActualGivenExecution.execute_once.<locals>.run at 0x7f9caedd9e10>\n\n    def default_new_style_executor(data, function):\n>       return function(data)\n\n/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/hypothesis/executors.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = ConjectureData(INTERESTING, 4 bytes, frozen)\n\n    def run(data):\n        # Set up dynamic context needed by a single test run.\n        with local_settings(self.settings):\n            with deterministic_PRNG():\n                with BuildContext(data, is_final=is_final):\n    \n                    # Generate all arguments to the test function.\n                    args, kwargs = data.draw(self.search_strategy)\n                    if expected_failure is not None:\n                        nonlocal text_repr\n                        text_repr = repr_call(test, args, kwargs)\n    \n                    if print_example or current_verbosity() >= Verbosity.verbose:\n                        output = StringIO()\n    \n                        printer = RepresentationPrinter(output)\n                        if print_example:\n                            printer.text(\"Falsifying example:\")\n                        else:\n                            printer.text(\"Trying example:\")\n    \n                        if self.print_given_args:\n                            printer.text(\" \")\n                            printer.text(test.__name__)\n                            with printer.group(indent=4, open=\"(\", close=\"\"):\n                                printer.break_()\n                                for v in args:\n                                    printer.pretty(v)\n                                    # We add a comma unconditionally because\n                                    # generated arguments will always be kwargs,\n                                    # so there will always be more to come.\n                                    printer.text(\",\")\n                                    printer.breakable()\n    \n                                for i, (k, v) in enumerate(kwargs.items()):\n                                    printer.text(k)\n                                    printer.text(\"=\")\n                                    printer.pretty(v)\n                                    printer.text(\",\")\n                                    if i + 1 < len(kwargs):\n                                        printer.breakable()\n                            printer.break_()\n                            printer.text(\")\")\n                        printer.flush()\n                        report(output.getvalue())\n>                   return test(*args, **kwargs)\n\n/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/hypothesis/core.py:658: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <cardano_node_tests.tests.test_transactions.TestNotBalanced object at 0x7f9caef145b0>, cluster = <ClusterLib: protocol=cardano, tx_era=alonzo>\npayment_addrs = [AddressRecord(address='addr_test1vzmdzs8n7yh06hssxqkc0tkewec45zy88n086f5pyqycuggp96gzg', vkey_file=PosixPath('addr_no...lc3srvh3dn', vkey_file=PosixPath('addr_not_balanced_ci1_1.vkey'), skey_file=PosixPath('addr_not_balanced_ci1_1.skey'))]\npbt_highest_utxo = UTXOData(utxo_hash='3717856212d4a5389c740d4cb2010f98d05af19373fc2751cf0bfb0736678705', utxo_ix=0, amount=1000000000, a...6gzg', coin='lovelace', decoded_coin='', datum_hash='', inline_datum_hash='', inline_datum=None, reference_script=None)\namount = 857027\n\n    @allure.link(helpers.get_vcs_link())\n    @hypothesis.given(amount=st.integers(max_value=MIN_UTXO_VALUE, min_value=-MAX_LOVELACE_AMOUNT))\n    @common.hypothesis_settings()\n    def test_transfer_amount_bellow_minimum(\n        self,\n        cluster: clusterlib.ClusterLib,\n        payment_addrs: List[clusterlib.AddressRecord],\n        pbt_highest_utxo: clusterlib.UTXOData,\n        amount: int,\n    ):\n        \"\"\"Try to build a transaction with amount bellow the minimum lovelace required.\n    \n        Uses `cardano-cli transaction build-raw` command for building the transactions.\n    \n        Expect failure.\n        \"\"\"\n        temp_template = f\"{common.get_test_id(cluster)}_{amount}\"\n    \n        src_address = payment_addrs[0].address\n        dst_address = payment_addrs[1].address\n    \n        fee = 200_000\n    \n        out_file = f\"{temp_template}.body\"\n        build_args = [\n            \"transaction\",\n            \"build-raw\",\n            \"--fee\",\n            f\"{fee}\",\n            \"--tx-in\",\n            f\"{pbt_highest_utxo.utxo_hash}#{pbt_highest_utxo.utxo_ix}\",\n            \"--tx-out\",\n            f\"{dst_address}+{amount}\",\n            \"--tx-out\",\n            f\"{src_address}+{pbt_highest_utxo.amount - amount - fee}\",\n            *cluster.tx_era_arg,\n            \"--out-file\",\n            out_file,\n        ]\n        if VERSIONS.transaction_era < VERSIONS.ALLEGRA:\n            build_args.extend([\"--invalid-hereafter\", str(cluster.calculate_tx_ttl())])\n    \n        if amount < 0:\n            with pytest.raises(clusterlib.CLIError) as excinfo_build:\n                cluster.cli(build_args)\n            err_str_build = str(excinfo_build.value)\n            assert \"Negative quantity\" in err_str_build, err_str_build\n            return\n    \n        cluster.cli(build_args)\n    \n        # create signed transaction\n        out_file_signed = cluster.sign_tx(\n            tx_body_file=out_file,\n            signing_key_files=[payment_addrs[0].skey_file],\n            tx_name=f\"{temp_template}_signed\",\n        )\n    \n        with pytest.raises(clusterlib.CLIError) as excinfo_build:\n            # submit the signed transaction\n            cluster.submit_tx(tx_file=out_file_signed, txins=[pbt_highest_utxo])\n    \n        exc_val = str(excinfo_build.value)\n>       assert \"OutputTooSmallUTxO\" in exc_val, exc_val\nE       AssertionError: An error occurred running a CLI command `cardano-cli transaction submit --testnet-magic 42 --tx-file test_transfer_amount_bellow_minimum_ci1_myn_857027_signed_tx.signed --cardano-mode` on path `/home/martink/Source/repos/cardano-node-tests6/tmp/pytest-of-martink/pytest-1/popen-gw7/test_transactions_py`: Command failed: transaction submit  Error: Error while submitting tx: ShelleyTxValidationError ShelleyBasedEraBabbage (ApplyTxError [UtxowFailure (UtxoFailure (FromAlonzoUtxoFail (ValueNotConservedUTxO (Value 0 (fromList [])) (Value 1000000000 (fromList []))))),UtxowFailure (UtxoFailure (FromAlonzoUtxoFail (BadInputsUTxO (fromList [TxIn (TxId {_unTxId = SafeHash \"3717856212d4a5389c740d4cb2010f98d05af19373fc2751cf0bfb0736678705\"}) (TxIx 0)]))))])\nE         \nE       assert 'OutputTooSmallUTxO' in 'An error occurred running a CLI command `cardano-cli transaction submit --testnet-magic 42 --tx-file test_transfer_am...[TxIn (TxId {_unTxId = SafeHash \"3717856212d4a5389c740d4cb2010f98d05af19373fc2751cf0bfb0736678705\"}) (TxIx 0)]))))])\\n'\n\n/home/martink/Source/repos/cardano-node-tests6/cardano_node_tests/tests/test_transactions.py:1776: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <cardano_node_tests.tests.test_transactions.TestNotBalanced object at 0x7f9caef145b0>, cluster = <ClusterLib: protocol=cardano, tx_era=alonzo>\npayment_addrs = [AddressRecord(address='addr_test1vzmdzs8n7yh06hssxqkc0tkewec45zy88n086f5pyqycuggp96gzg', vkey_file=PosixPath('addr_no...lc3srvh3dn', vkey_file=PosixPath('addr_not_balanced_ci1_1.vkey'), skey_file=PosixPath('addr_not_balanced_ci1_1.skey'))]\npbt_highest_utxo = UTXOData(utxo_hash='3717856212d4a5389c740d4cb2010f98d05af19373fc2751cf0bfb0736678705', utxo_ix=0, amount=1000000000, a...6gzg', coin='lovelace', decoded_coin='', datum_hash='', inline_datum_hash='', inline_datum=None, reference_script=None)\n\n>   ???\n\n/home/martink/Source/repos/cardano-node-tests6/cardano_node_tests/tests/test_transactions.py:1714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <hypothesis.internal.conjecture.datatree.TreeRecordingObserver object at 0x7f9caef15b40>, status = Status.INTERESTING\ninteresting_origin = (<class 'AssertionError'>, '/home/martink/Source/repos/cardano-node-tests6/cardano_node_tests/tests/test_transactions.py', 1776, (), ())\n\n    def conclude_test(self, status, interesting_origin):\n        \"\"\"Says that ``status`` occurred at node ``node``. This updates the\n        node if necessary and checks for consistency.\"\"\"\n        if status == Status.OVERRUN:\n            return\n        i = self.__index_in_current_node\n        node = self.__current_node\n    \n        if i < len(node.values) or isinstance(node.transition, Branch):\n            inconsistent_generation()\n    \n        new_transition = Conclusion(status, interesting_origin)\n    \n        if node.transition is not None and node.transition != new_transition:\n            # As an, I'm afraid, horrible bodge, we deliberately ignore flakiness\n            # where tests go from interesting to valid, because it's much easier\n            # to produce good error messages for these further up the stack.\n            if isinstance(node.transition, Conclusion) and (\n                node.transition.status != Status.INTERESTING\n                or new_transition.status != Status.VALID\n            ):\n>               raise Flaky(\n                    f\"Inconsistent test results! Test case was {node.transition!r} \"\n                    f\"on first run but {new_transition!r} on second\"\n                )\nE               hypothesis.errors.Flaky: Inconsistent test results! Test case was Conclusion(status=Status.INTERESTING, interesting_origin=(<class 'Failed'>, '/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/_pytest/outcomes.py', 153, (), ())) on first run but Conclusion(status=Status.INTERESTING, interesting_origin=(<class 'AssertionError'>, '/home/martink/Source/repos/cardano-node-tests6/cardano_node_tests/tests/test_transactions.py', 1776, (), ())) on second\n\n/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/hypothesis/internal/conjecture/datatree.py:406: Flaky",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "payment_addrs",
    "time" : {
      "start" : 1655331028266,
      "stop" : 1655331036681,
      "duration" : 8415
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1655328891494,
      "stop" : 1655328891494,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1655328891596,
      "stop" : 1655328891596,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1655328891494,
      "stop" : 1655328891495,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1655331027988,
      "stop" : 1655331027988,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1655331027988,
      "stop" : 1655331027988,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pbt_highest_utxo",
    "time" : {
      "start" : 1655331036681,
      "stop" : 1655331036693,
      "duration" : 12
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster",
    "time" : {
      "start" : 1655331027988,
      "stop" : 1655331028266,
      "duration" : 278
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1655330964984,
      "stop" : 1655330964984,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1655331027988,
      "stop" : 1655331027988,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1655328891495,
      "stop" : 1655328891495,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1655328891495,
      "stop" : 1655328891596,
      "duration" : 101
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1655328891495,
      "stop" : 1655328891495,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1655331041069,
      "stop" : 1655331041072,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1655331041072,
      "stop" : 1655331041072,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1655331078101,
      "stop" : 1655331078101,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1655331078097,
      "stop" : 1655331078099,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "testnets"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "tag",
    "value" : "hypothesis"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_transactions"
  }, {
    "name" : "subSuite",
    "value" : "TestNotBalanced"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "3919838-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_transactions"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/bc97ddc0fc4b8a539bf5f00b5bdd58c89b8a3c3f/cardano_node_tests/tests/test_transactions.py#L1713",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/bc97ddc0fc4b8a539bf5f00b5bdd58c89b8a3c3f/cardano_node_tests/tests/test_transactions.py#L1713",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "34144b8011d09e2b",
      "status" : "passed",
      "time" : {
        "start" : 1655330916039,
        "stop" : 1655330918497,
        "duration" : 2458
      }
    }, {
      "uid" : "ed78180c2bc07e34",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1655328888349,
        "stop" : 1655328888349,
        "duration" : 0
      }
    }, {
      "uid" : "65d9c9789cc06800",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1655328642046,
        "stop" : 1655328642046,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "smoke", "testnets", "hypothesis" ]
  },
  "source" : "1ec942882c40ee58.json",
  "parameterValues" : [ ]
}