{
  "uid" : "ddbb2c956552c3d1",
  "name" : "test_script_reference_utxo[simple_v1-build]",
  "fullName" : "cardano_node_tests.tests.test_scripts.TestReferenceUTxO#test_script_reference_utxo",
  "historyId" : "6a59118392137547645deb13acaaafd7",
  "time" : {
    "start" : 1659832549111,
    "stop" : 1659832570378,
    "duration" : 21267
  },
  "description" : "Send funds from script address where script is on reference UTxO.",
  "descriptionHtml" : "<p>Send funds from script address where script is on reference UTxO.</p>\n",
  "status" : "skipped",
  "statusMessage" : "XFAIL reason: Reported 'SimpleScriptV2', see node issue #4261\n\n_pytest.outcomes.XFailed: Reported 'SimpleScriptV2', see node issue #4261",
  "statusTrace" : "self = <cardano_node_tests.tests.test_scripts.TestReferenceUTxO object at 0x7f7a3ef448e0>, cluster = <ClusterLib: protocol=cardano, tx_era=babbage>\npayment_addrs = [AddressRecord(address='addr_test1vzheqptmlrw46tylpm6wmw5lcm84y8t398yhryf2qst3xjswtxwcs', vkey_file=PosixPath('multi_a...ceral367vsyhwcce', vkey_file=PosixPath('multi_addr_ref_ci0_4.vkey'), skey_file=PosixPath('multi_addr_ref_ci0_4.skey'))]\nuse_build_cmd = True, script_version = 'simple_v1'\n\n    @allure.link(helpers.get_vcs_link())\n    @common.PARAM_USE_BUILD_CMD\n    @pytest.mark.parametrize(\"script_version\", (\"simple_v1\", \"simple_v2\"))\n    @pytest.mark.dbsync\n    def test_script_reference_utxo(\n        self,\n        cluster: clusterlib.ClusterLib,\n        payment_addrs: List[clusterlib.AddressRecord],\n        use_build_cmd: bool,\n        script_version: str,\n    ):\n        \"\"\"Send funds from script address where script is on reference UTxO.\"\"\"\n        temp_template = f\"{common.get_test_id(cluster)}_{script_version}_{use_build_cmd}\"\n        src_addr = payment_addrs[0]\n        dst_addr = payment_addrs[1]\n    \n        fund_amount = 4_500_000\n        amount = 2_000_000\n    \n        # create multisig script\n        if script_version == \"simple_v1\":\n            invalid_before = None\n            invalid_hereafter = None\n    \n            reference_type = clusterlib.ScriptTypes.SIMPLE_V1\n            script_type_str = \"SimpleScriptV1\"\n    \n            multisig_script = Path(f\"{temp_template}_multisig.script\")\n            script_content = {\n                \"keyHash\": cluster.get_payment_vkey_hash(dst_addr.vkey_file),\n                \"type\": \"sig\",\n            }\n            with open(multisig_script, \"w\", encoding=\"utf-8\") as fp_out:\n                json.dump(script_content, fp_out, indent=4)\n        else:\n            invalid_before = 100\n            invalid_hereafter = cluster.get_slot_no() + 1_000\n    \n            reference_type = clusterlib.ScriptTypes.SIMPLE_V2\n            script_type_str = \"SimpleScriptV2\"\n    \n            multisig_script = cluster.build_multisig_script(\n                script_name=temp_template,\n                script_type_arg=clusterlib.MultiSigTypeArgs.ANY,\n                payment_vkey_files=[p.vkey_file for p in payment_addrs],\n                slot=invalid_before,\n                slot_type_arg=clusterlib.MultiSlotTypeArgs.AFTER,\n            )\n    \n        # create reference UTxO\n        reference_utxo, __ = _create_reference_utxo(\n            temp_template=temp_template,\n            cluster_obj=cluster,\n            payment_addr=src_addr,\n            dst_addr=dst_addr,\n            script_file=multisig_script,\n            amount=4_000_000,\n        )\n        assert reference_utxo.reference_script\n    \n        # create script address\n        script_address = cluster.gen_payment_addr(\n            addr_name=temp_template, payment_script_file=multisig_script\n        )\n    \n        # send funds to script address\n        tx_out_to = multisig_tx(\n            cluster_obj=cluster,\n            temp_template=f\"{temp_template}_to\",\n            src_address=src_addr.address,\n            dst_address=script_address,\n            amount=fund_amount,\n            payment_skey_files=[src_addr.skey_file],\n            use_build_cmd=use_build_cmd,\n        )\n    \n        # send funds from script address\n        destinations = [clusterlib.TxOut(address=dst_addr.address, amount=amount)]\n        tx_files = clusterlib.TxFiles(\n            signing_key_files=[dst_addr.skey_file],\n        )\n        # empty `txins` means Tx inputs will be selected automatically by ClusterLib magic\n        script_txins = [clusterlib.ScriptTxIn(txins=[], script_file=multisig_script)]\n        script_txins = [\n            clusterlib.ScriptTxIn(\n                txins=[],\n                reference_txin=reference_utxo,\n                reference_type=reference_type,\n            )\n        ]\n    \n        if use_build_cmd:\n            tx_out_from = cluster.build_tx(\n                src_address=script_address,\n                tx_name=f\"{temp_template}_from\",\n                txouts=destinations,\n                script_txins=script_txins,\n                fee_buffer=2_000_000,\n                tx_files=tx_files,\n                invalid_hereafter=invalid_hereafter,\n                invalid_before=invalid_before,\n                witness_override=2,\n            )\n            tx_signed = cluster.sign_tx(\n                tx_body_file=tx_out_from.out_file,\n                signing_key_files=tx_files.signing_key_files,\n                tx_name=f\"{temp_template}_from\",\n            )\n            cluster.submit_tx(tx_file=tx_signed, txins=tx_out_from.txins)\n        else:\n            tx_out_from = cluster.send_tx(\n                src_address=script_address,\n                tx_name=f\"{temp_template}_from\",\n                txouts=destinations,\n                script_txins=script_txins,\n                tx_files=tx_files,\n                invalid_hereafter=invalid_hereafter,\n                invalid_before=invalid_before,\n            )\n    \n        # check final balances\n        out_utxos = cluster.get_utxo(tx_raw_output=tx_out_from)\n        assert (\n            clusterlib.filter_utxos(utxos=out_utxos, address=script_address)[0].amount\n            == clusterlib.calculate_utxos_balance(tx_out_from.txins) - tx_out_from.fee - amount\n        ), f\"Incorrect balance for script address `{script_address}`\"\n        assert (\n            clusterlib.filter_utxos(utxos=out_utxos, address=dst_addr.address)[0].amount == amount\n        ), f\"Incorrect balance for destination address `{dst_addr.address}`\"\n    \n        # check that reference UTxO was NOT spent\n        assert cluster.get_utxo(utxo=reference_utxo), \"Reference input was spent\"\n    \n        dbsync_utils.check_tx(cluster_obj=cluster, tx_raw_output=tx_out_to)\n        # TODO: check reference script in db-sync (the `tx_out_from`)\n    \n        # check expected script type\n        # TODO: moved the check to the end of the test because of XFAIL\n        if (\n            script_type_str == \"SimpleScriptV1\"\n            and reference_utxo.reference_script[\"script\"][\"type\"] == \"SimpleScriptV2\"\n        ):\n>           pytest.xfail(\"Reported 'SimpleScriptV2', see node issue #4261\")\nE           _pytest.outcomes.XFailed: Reported 'SimpleScriptV2', see node issue #4261\n\n/home/martink/Source/repos/cardano-node-tests2/cardano_node_tests/tests/test_scripts.py:1972: XFailed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1659829503765,
      "stop" : 1659829503765,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1659829503765,
      "stop" : 1659829503765,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1659832548829,
      "stop" : 1659832548829,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1659832548829,
      "stop" : 1659832548829,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1659829503765,
      "stop" : 1659829503765,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1659832350157,
      "stop" : 1659832350157,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster",
    "time" : {
      "start" : 1659832548830,
      "stop" : 1659832549110,
      "duration" : 280
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1659829503764,
      "stop" : 1659829503764,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1659832548830,
      "stop" : 1659832548830,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1659829503765,
      "stop" : 1659829503765,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "payment_addrs",
    "time" : {
      "start" : 1659832549110,
      "stop" : 1659832549110,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1659829503764,
      "stop" : 1659829503765,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1659835148396,
      "stop" : 1659835148397,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1659832570405,
      "stop" : 1659832570405,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1659835148390,
      "stop" : 1659835148392,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1659832570397,
      "stop" : 1659832570405,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "testnets"
  }, {
    "name" : "tag",
    "value" : "dbsync"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='cannot use `build` with cluster era 'babbage' and TX era 'babbage'')"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_scripts"
  }, {
    "name" : "subSuite",
    "value" : "TestReferenceUTxO"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "1738208-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_scripts"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "script_version",
    "value" : "'simple_v1'"
  }, {
    "name" : "use_build_cmd",
    "value" : "True"
  } ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/a682e5149259fc341ff367b07bd23fcc5431b687/cardano_node_tests/tests/test_scripts.py#L1830",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/a682e5149259fc341ff367b07bd23fcc5431b687/cardano_node_tests/tests/test_scripts.py#L1830",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "ead959b548b1efaa",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1659829499342,
        "stop" : 1659829499342,
        "duration" : 0
      }
    } ],
    "categories" : [ ],
    "tags" : [ "dbsync", "smoke", "testnets", "@pytest.mark.skipif(False, reason='cannot use `build` with cluster era 'babbage' and TX era 'babbage'')" ]
  },
  "source" : "ddbb2c956552c3d1.json",
  "parameterValues" : [ "'simple_v1'", "True" ]
}