{
  "uid" : "2a7e27e561e1d7d8",
  "name" : "test_stake_pool_metadata[build_raw]",
  "fullName" : "cardano_node_tests.tests.test_pools.TestStakePool#test_stake_pool_metadata",
  "historyId" : "6e69108b7c61fe7d955d677416c0e5f9",
  "time" : {
    "start" : 1659839908960,
    "stop" : 1659839922927,
    "duration" : 13967
  },
  "description" : "Create and register a stake pool with metadata.\n\n        Check that pool was registered and stake address delegated.\n        ",
  "descriptionHtml" : "<p>Create and register a stake pool with metadata.</p>\n<pre><code>    Check that pool was registered and stake address delegated.\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: No data returned from db-sync for pool pool1fsjaar57pr4rq63f5yf9zvfegw9znvdlkru2gaz3y0xl524dew9",
  "statusTrace" : "self = <cardano_node_tests.tests.test_pools.TestStakePool object at 0x7f0afd2fb340>, cluster_manager = <cardano_node_tests.utils.cluster_management.ClusterManager object at 0x7f0afd2fbee0>\ncluster = <ClusterLib: protocol=cardano, tx_era=alonzo>, request = <FixtureRequest for <Function test_stake_pool_metadata[build_raw]>>, use_build_cmd = False\n\n    @allure.link(helpers.get_vcs_link())\n    @common.PARAM_USE_BUILD_CMD\n    def test_stake_pool_metadata(\n        self,\n        cluster_manager: cluster_management.ClusterManager,\n        cluster: clusterlib.ClusterLib,\n        request: FixtureRequest,\n        use_build_cmd: bool,\n    ):\n        \"\"\"Create and register a stake pool with metadata.\n    \n        Check that pool was registered and stake address delegated.\n        \"\"\"\n        rand_str = clusterlib.get_rand_str(4)\n        temp_template = f\"{common.get_test_id(cluster)}_{rand_str}_{use_build_cmd}\"\n    \n        pool_name = f\"pool_{rand_str}\"\n        pool_metadata = {\n            \"name\": pool_name,\n            \"description\": \"cardano-node-tests E2E tests\",\n            \"ticker\": \"IOG1\",\n            \"homepage\": \"https://github.com/input-output-hk/cardano-node-tests\",\n        }\n        pool_metadata_file = helpers.write_json(\n            f\"{pool_name}_registration_metadata.json\", pool_metadata\n        )\n    \n        pool_data = clusterlib.PoolData(\n            pool_name=pool_name,\n            pool_pledge=1_000,\n            pool_cost=cluster.get_protocol_params().get(\"minPoolCost\", 500),\n            pool_margin=0.2,\n            pool_metadata_url=\"https://bit.ly/3bDUg9z\",\n            pool_metadata_hash=cluster.gen_pool_metadata_hash(pool_metadata_file),\n        )\n    \n        # create pool owners\n        pool_owners = clusterlib_utils.create_pool_users(\n            cluster_obj=cluster,\n            name_template=temp_template,\n            no_of_addr=3,\n        )\n    \n        # fund source address\n        clusterlib_utils.fund_from_faucet(\n            pool_owners[0].payment,\n            cluster_obj=cluster,\n            faucet_data=cluster_manager.cache.addrs_data[\"user1\"],\n            amount=900_000_000,\n        )\n    \n        # register pool and delegate stake address\n>       pool_creation_out = _create_register_pool_delegate_stake_tx(\n            cluster_obj=cluster,\n            pool_owners=pool_owners,\n            temp_template=temp_template,\n            temp_dir=Path(\".\"),\n            pool_data=pool_data,\n            request=request,\n            use_build_cmd=use_build_cmd,\n        )\n\n/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/tests/test_pools.py:685: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/tests/test_pools.py:512: in _create_register_pool_delegate_stake_tx\n    _check_pool(cluster_obj=cluster_obj, stake_pool_id=stake_pool_id, pool_data=pool_data)\n/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/tests/test_pools.py:95: in _check_pool\n    dbsync_utils.check_pool_data(ledger_pool_data=pool_params, pool_id=stake_pool_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nledger_pool_data = {'cost': 0, 'margin': 0.2, 'metadata': {'hash': '2ae77c721611bfc3eb78311507aa6d2e32a033fa80820d976a22b6e9a6f6e98b', 'u...0df8606d1176c5dcfd55af41765d182c7836f44dde9a217a183', 'ea7db0f712c855bd4e3caa476aeaf5b6f974e8206a40a5be368e04dd'], ...}\npool_id = 'pool1fsjaar57pr4rq63f5yf9zvfegw9znvdlkru2gaz3y0xl524dew9'\n\n    def check_pool_data(ledger_pool_data: dict, pool_id: str) -> Optional[PoolDataRecord]:  # noqa: C901\n        \"\"\"Check comparison for pool data between ledger and db-sync.\"\"\"\n        # pylint: disable=too-many-branches\n        if not configuration.HAS_DBSYNC:\n            return None\n    \n        db_pool_data = get_pool_data(pool_id)\n>       assert db_pool_data, f\"No data returned from db-sync for pool {pool_id}\"\nE       AssertionError: No data returned from db-sync for pool pool1fsjaar57pr4rq63f5yf9zvfegw9znvdlkru2gaz3y0xl524dew9\n\n/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/utils/dbsync_utils.py:874: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "session_autouse",
    "time" : {
      "start" : 1659838466335,
      "stop" : 1659838466335,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1659838465933,
      "stop" : 1659838465933,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster",
    "time" : {
      "start" : 1659838466336,
      "stop" : 1659839908959,
      "duration" : 1442623
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1659838465933,
      "stop" : 1659838465933,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1659838465933,
      "stop" : 1659838465933,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1659838466336,
      "stop" : 1659838466336,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1659838466335,
      "stop" : 1659838466335,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1659838466336,
      "stop" : 1659838466336,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1659838465933,
      "stop" : 1659838466335,
      "duration" : 402
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1659838466336,
      "stop" : 1659838466336,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1659838465933,
      "stop" : 1659838465933,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Create and register a stake pool with metadata.\n\n        Check that pool was registered and stake address delegated.\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError: No data returned from db-sync for pool pool1fsjaar57pr4rq63f5yf9zvfegw9znvdlkru2gaz3y0xl524dew9",
    "statusTrace" : "self = <cardano_node_tests.tests.test_pools.TestStakePool object at 0x7f0afd2fb340>, cluster_manager = <cardano_node_tests.utils.cluster_management.ClusterManager object at 0x7f0afd2fbee0>\ncluster = <ClusterLib: protocol=cardano, tx_era=alonzo>, request = <FixtureRequest for <Function test_stake_pool_metadata[build_raw]>>, use_build_cmd = False\n\n    @allure.link(helpers.get_vcs_link())\n    @common.PARAM_USE_BUILD_CMD\n    def test_stake_pool_metadata(\n        self,\n        cluster_manager: cluster_management.ClusterManager,\n        cluster: clusterlib.ClusterLib,\n        request: FixtureRequest,\n        use_build_cmd: bool,\n    ):\n        \"\"\"Create and register a stake pool with metadata.\n    \n        Check that pool was registered and stake address delegated.\n        \"\"\"\n        rand_str = clusterlib.get_rand_str(4)\n        temp_template = f\"{common.get_test_id(cluster)}_{rand_str}_{use_build_cmd}\"\n    \n        pool_name = f\"pool_{rand_str}\"\n        pool_metadata = {\n            \"name\": pool_name,\n            \"description\": \"cardano-node-tests E2E tests\",\n            \"ticker\": \"IOG1\",\n            \"homepage\": \"https://github.com/input-output-hk/cardano-node-tests\",\n        }\n        pool_metadata_file = helpers.write_json(\n            f\"{pool_name}_registration_metadata.json\", pool_metadata\n        )\n    \n        pool_data = clusterlib.PoolData(\n            pool_name=pool_name,\n            pool_pledge=1_000,\n            pool_cost=cluster.get_protocol_params().get(\"minPoolCost\", 500),\n            pool_margin=0.2,\n            pool_metadata_url=\"https://bit.ly/3bDUg9z\",\n            pool_metadata_hash=cluster.gen_pool_metadata_hash(pool_metadata_file),\n        )\n    \n        # create pool owners\n        pool_owners = clusterlib_utils.create_pool_users(\n            cluster_obj=cluster,\n            name_template=temp_template,\n            no_of_addr=3,\n        )\n    \n        # fund source address\n        clusterlib_utils.fund_from_faucet(\n            pool_owners[0].payment,\n            cluster_obj=cluster,\n            faucet_data=cluster_manager.cache.addrs_data[\"user1\"],\n            amount=900_000_000,\n        )\n    \n        # register pool and delegate stake address\n>       pool_creation_out = _create_register_pool_delegate_stake_tx(\n            cluster_obj=cluster,\n            pool_owners=pool_owners,\n            temp_template=temp_template,\n            temp_dir=Path(\".\"),\n            pool_data=pool_data,\n            request=request,\n            use_build_cmd=use_build_cmd,\n        )\n\n/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/tests/test_pools.py:685: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/tests/test_pools.py:512: in _create_register_pool_delegate_stake_tx\n    _check_pool(cluster_obj=cluster_obj, stake_pool_id=stake_pool_id, pool_data=pool_data)\n/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/tests/test_pools.py:95: in _check_pool\n    dbsync_utils.check_pool_data(ledger_pool_data=pool_params, pool_id=stake_pool_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nledger_pool_data = {'cost': 0, 'margin': 0.2, 'metadata': {'hash': '2ae77c721611bfc3eb78311507aa6d2e32a033fa80820d976a22b6e9a6f6e98b', 'u...0df8606d1176c5dcfd55af41765d182c7836f44dde9a217a183', 'ea7db0f712c855bd4e3caa476aeaf5b6f974e8206a40a5be368e04dd'], ...}\npool_id = 'pool1fsjaar57pr4rq63f5yf9zvfegw9znvdlkru2gaz3y0xl524dew9'\n\n    def check_pool_data(ledger_pool_data: dict, pool_id: str) -> Optional[PoolDataRecord]:  # noqa: C901\n        \"\"\"Check comparison for pool data between ledger and db-sync.\"\"\"\n        # pylint: disable=too-many-branches\n        if not configuration.HAS_DBSYNC:\n            return None\n    \n        db_pool_data = get_pool_data(pool_id)\n>       assert db_pool_data, f\"No data returned from db-sync for pool {pool_id}\"\nE       AssertionError: No data returned from db-sync for pool pool1fsjaar57pr4rq63f5yf9zvfegw9znvdlkru2gaz3y0xl524dew9\n\n/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/utils/dbsync_utils.py:874: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "91abba764634e2cc",
      "name" : "log",
      "source" : "91abba764634e2cc.txt",
      "type" : "text/plain",
      "size" : 709
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1659839927698,
      "stop" : 1659839927698,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1659840827485,
      "stop" : 1659840827487,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1659839927376,
      "stop" : 1659839927698,
      "duration" : 322
    },
    "status" : "failed",
    "statusMessage" : "AssertionError: Errors found in cluster log files:\n/home/martink/Source/repos/cardano-node3/state-cluster8/dbsync.stdout: \u001B[31m[db-sync-node:Error:588]\u001B[0m [2022-08-07 02:38:41.45 UTC] runDBThread: DbInsertException \"PoolOwner\" (SqlError {sqlState = \"23503\", sqlExecStatus = FatalError, sqlErrorMsg = \"insert or update on table \\\"pool_owner\\\" violates foreign key constraint \\\"pool_owner_addr_id_fkey\\\"\", sqlErrorDetail = \"Key (addr_id)=(12) is not present in table \\\"stake_address\\\".\", sqlErrorHint = \"\"})\n\n/home/martink/Source/repos/cardano-node3/state-cluster8/dbsync.stdout: \u001B[31m[db-sync-node:Error:580]\u001B[0m [2022-08-07 02:38:41.45 UTC] ChainSyncWithBlocksPtcl: DbInsertException \"PoolOwner\" (SqlError {sqlState = \"23503\", sqlExecStatus = FatalError, sqlErrorMsg = \"insert or update on table \\\"pool_owner\\\" violates foreign key constraint \\\"pool_owner_addr_id_fkey\\\"\", sqlErrorDetail = \"Key (addr_id)=(12) is not present in table \\\"stake_address\\\".\", sqlErrorHint = \"\"})\n\n/home/martink/Source/repos/cardano-node3/state-cluster8/dbsync.stdout: \u001B[31m[db-sync-node.Subscription:Error:576]\u001B[0m [2022-08-07 02:38:41.45 UTC] Identity Application Exception: LocalAddress \"/home/martink/Source/repos/cardano-node3/state-cluster8/bft1.socket\" DbInsertException \"PoolOwner\" (SqlError {sqlState = \"23503\", sqlExecStatus = FatalError, sqlErrorMsg = \"insert or update on table \\\"pool_owner\\\" violates foreign key constraint \\\"pool_owner_addr_id_fkey\\\"\", sqlErrorDetail = \"Key (addr_id)=(12) is not present in table \\\"stake_address\\\".\", sqlErrorHint = \"\"})\n\n/home/martink/Source/repos/cardano-node3/state-cluster8/dbsync.stdout: \u001B[31m[db-sync-node.ErrorPolicy:Error:6]\u001B[0m [2022-08-07 02:38:41.45 UTC] IP LocalAddress \"/home/martink/Source/repos/cardano-node3/state-cluster8/bft1.socket\" ErrorPolicyUnhandledApplicationException (DbInsertException \"PoolOwner\" (SqlError {sqlState = \"23503\", sqlExecStatus = FatalError, sqlErrorMsg = \"insert or update on table \\\"pool_owner\\\" violates foreign key constraint \\\"pool_owner_addr_id_fkey\\\"\", sqlErrorDetail = \"Key (addr_id)=(12) is not present in table \\\"stake_address\\\".\", sqlErrorHint = \"\"}))\n\n/home/martink/Source/repos/cardano-node3/state-cluster8/dbsync.stdout: \u001B[31m[db-sync-node:Error:688]\u001B[0m [2022-08-07 02:38:42.65 UTC] runDBThread: DbInsertException \"TxOut\" (SqlError {sqlState = \"23503\", sqlExecStatus = FatalError, sqlErrorMsg = \"insert or update on table \\\"tx_out\\\" violates foreign key constraint \\\"tx_out_stake_address_id_fkey\\\"\", sqlErrorDetail = \"Key (stake_address_id)=(10) is not present in table \\\"stake_address\\\".\", sqlErrorHint = \"\"})\n\n/home/martink/Source/repos/cardano-node3/state-cluster8/dbsync.stdout: \u001B[31m[db-sync-node:Error:680]\u001B[0m [2022-08-07 02:38:42.65 UTC] ChainSyncWithBlocksPtcl: DbInsertException \"TxOut\" (SqlError {sqlState = \"23503\", sqlExecStatus = FatalError, sqlErrorMsg = \"insert or update on table \\\"tx_out\\\" violates foreign key constraint \\\"tx_out_stake_address_id_fkey\\\"\", sqlErrorDetail = \"Key (stake_address_id)=(10) is not present in table \\\"stake_address\\\".\", sqlErrorHint = \"\"})\n\n/home/martink/Source/repos/cardano-node3/state-cluster8/dbsync.stdout: \u001B[31m[db-sync-node.Subscription:Error:676]\u001B[0m [2022-08-07 02:38:42.65 UTC] Identity Application Exception: LocalAddress \"/home/martink/Source/repos/cardano-node3/state-cluster8/bft1.socket\" DbInsertException \"TxOut\" (SqlError {sqlState = \"23503\", sqlExecStatus = FatalError, sqlErrorMsg = \"insert or update on table \\\"tx_out\\\" violates foreign key constraint \\\"tx_out_stake_address_id_fkey\\\"\", sqlErrorDetail = \"Key (stake_address_id)=(10) is not present in table \\\"stake_address\\\".\", sqlErrorHint = \"\"})\n\n/home/martink/Source/repos/cardano-node3/state-cluster8/dbsync.stdout: \u001B[31m[db-sync-node.ErrorPolicy:Error:6]\u001B[0m [2022-08-07 02:38:42.65 UTC] IP LocalAddress \"/home/martink/Source/repos/cardano-node3/state-cluster8/bft1.socket\" ErrorPolicyUnhandledApplicationException (DbInsertException \"TxOut\" (SqlError {sqlState = \"23503\", sqlExecStatus = FatalError, sqlErrorMsg = \"insert or update on table \\\"tx_out\\\" violates foreign key constraint \\\"tx_out_stake_address_id_fkey\\\"\", sqlErrorDetail = \"Key (stake_address_id)=(10) is not present in table \\\"stake_address\\\".\", sqlErrorHint = \"\"}))\n\n",
    "statusTrace" : "  File \"/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/allure_commons/_allure.py\", line 200, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/home/martink/.local/python_venvs/cardano_node/lib/python3.10/site-packages/_pytest/fixtures.py\", line 941, in _teardown_yield_fixture\n    next(it)\n  File \"/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/tests/conftest.py\", line 291, in cluster_manager\n    cluster_manager_obj.on_test_stop()\n  File \"/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/utils/cluster_management.py\", line 363, in on_test_stop\n    logfiles.report_artifacts_errors(errors)\n  File \"/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/utils/logfiles.py\", line 253, in report_artifacts_errors\n    raise AssertionError(f\"Errors found in cluster log files:\\n{err_joined}\") from None\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1659840827489,
      "stop" : 1659840827489,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "testnets"
  }, {
    "name" : "tag",
    "value" : "dbsync"
  }, {
    "name" : "tag",
    "value" : "order(7)"
  }, {
    "name" : "tag",
    "value" : "long"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_pools"
  }, {
    "name" : "subSuite",
    "value" : "TestStakePool"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "4162056-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_pools"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "use_build_cmd",
    "value" : "False"
  } ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/a682e5149259fc341ff367b07bd23fcc5431b687/cardano_node_tests/tests/test_pools.py#L633",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/a682e5149259fc341ff367b07bd23fcc5431b687/cardano_node_tests/tests/test_pools.py#L633",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "9b0e0fa8ae97c293",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1659838461108,
        "stop" : 1659838461108,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "dbsync", "testnets", "order(7)", "long" ]
  },
  "source" : "2a7e27e561e1d7d8.json",
  "parameterValues" : [ "False" ]
}