{
  "uid" : "fd458dde3734393e",
  "name" : "test_past_horizon[plutus_v1--1]",
  "fullName" : "cardano_node_tests.tests.test_plutus_mint_raw.TestMintingNegative#test_past_horizon",
  "historyId" : "5deacf5ad42e506f6760d8994dc21f9c",
  "time" : {
    "start" : 1659911144537,
    "stop" : 1659911159129,
    "duration" : 14592
  },
  "description" : "Test minting a token with ttl too far in the future.\n\n        Expect failure.\n\n        * fund the token issuer and create a UTxO for collateral\n        * check that the expected amount was transferred to token issuer's address\n        * try to mint a token using a Plutus script when ttl is set too far in the future\n        * check that minting failed because of 'PastHorizon' failure\n        ",
  "descriptionHtml" : "<p>Test minting a token with ttl too far in the future.</p>\n<pre><code>    Expect failure.\n\n    * fund the token issuer and create a UTxO for collateral\n    * check that the expected amount was transferred to token issuer's address\n    * try to mint a token using a Plutus script when ttl is set too far in the future\n    * check that minting failed because of 'PastHorizon' failure\n</code></pre>\n",
  "status" : "skipped",
  "statusMessage" : "XFAIL reason: ttl > 3k/f was accepted\n\n_pytest.outcomes.XFailed: ttl > 3k/f was accepted",
  "statusTrace" : "self = <cardano_node_tests.tests.test_plutus_mint_raw.TestMintingNegative object at 0x7f7d471b55d0>, cluster = <ClusterLib: protocol=cardano, tx_era=babbage>\npayment_addrs = [AddressRecord(address='addr_test1vpn8j3jfl74slmhrmnjsvymdvrdyzq2kszuwqwntnwntevsfcevzd', vkey_file=PosixPath('test_pa...test_past_horizon_ci0_zjs_payment_addr_1.vkey'), skey_file=PosixPath('test_past_horizon_ci0_zjs_payment_addr_1.skey'))]\nttl = 400, plutus_version = 'v1'\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.skipif(\n        VERSIONS.transaction_era < VERSIONS.BABBAGE,\n        reason=\"runs only with Babbage+ TX\",\n    )\n    @pytest.mark.parametrize(\n        \"ttl\",\n        (3_000, 10_000, 100_000, 1000_000, -1),\n    )\n    @common.PARAM_PLUTUS_VERSION\n    def test_past_horizon(\n        self,\n        cluster: clusterlib.ClusterLib,\n        payment_addrs: List[clusterlib.AddressRecord],\n        ttl: int,\n        plutus_version: str,\n    ):\n        \"\"\"Test minting a token with ttl too far in the future.\n    \n        Expect failure.\n    \n        * fund the token issuer and create a UTxO for collateral\n        * check that the expected amount was transferred to token issuer's address\n        * try to mint a token using a Plutus script when ttl is set too far in the future\n        * check that minting failed because of 'PastHorizon' failure\n        \"\"\"\n        temp_template = f\"{common.get_test_id(cluster)}_{plutus_version}_{ttl}\"\n    \n        payment_addr = payment_addrs[0]\n        issuer_addr = payment_addrs[1]\n    \n        lovelace_amount = 2_000_000\n        token_amount = 5\n        fee_txsize = 600_000\n    \n        plutus_v_record = plutus_common.MINTING_PLUTUS[plutus_version]\n    \n        minting_cost = plutus_common.compute_cost(\n            execution_cost=plutus_v_record.execution_cost,\n            protocol_params=cluster.get_protocol_params(),\n        )\n    \n        # Step 1: fund the token issuer\n    \n        mint_utxos, collateral_utxos, __ = _fund_issuer(\n            cluster_obj=cluster,\n            temp_template=temp_template,\n            payment_addr=payment_addr,\n            issuer_addr=issuer_addr,\n            minting_cost=minting_cost,\n            amount=lovelace_amount,\n            fee_txsize=fee_txsize,\n        )\n    \n        # Step 2: try to mint the \"qacoin\"\n    \n        policyid = cluster.get_policyid(plutus_v_record.script_file)\n        asset_name = f\"qacoin{clusterlib.get_rand_str(4)}\".encode(\"utf-8\").hex()\n        token = f\"{policyid}.{asset_name}\"\n        mint_txouts = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=token_amount, coin=token),\n        ]\n    \n        plutus_mint_data = [\n            clusterlib.Mint(\n                txouts=mint_txouts,\n                script_file=plutus_v_record.script_file,\n                collaterals=collateral_utxos,\n                execution_units=(\n                    plutus_v_record.execution_cost.per_time,\n                    plutus_v_record.execution_cost.per_space,\n                ),\n                redeemer_cbor_file=plutus_common.REDEEMER_42_CBOR,\n            )\n        ]\n    \n        tx_files_step2 = clusterlib.TxFiles(\n            signing_key_files=[issuer_addr.skey_file],\n        )\n        txouts_step2 = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=lovelace_amount),\n            *mint_txouts,\n        ]\n    \n        # ttl == -1 means we'll use 3k/f + 100 slots for ttl\n        if ttl == -1:\n            ttl = (\n                round(3 * cluster.genesis[\"securityParam\"] / cluster.genesis[\"activeSlotsCoeff\"])\n                + 100\n            )\n    \n        cluster.wait_for_new_block()\n        tx_raw_output_step2 = cluster.build_raw_tx_bare(\n            out_file=f\"{temp_template}_step2_tx.body\",\n            txins=mint_utxos,\n            txouts=txouts_step2,\n            mint=plutus_mint_data,\n            tx_files=tx_files_step2,\n            fee=minting_cost.fee + fee_txsize,\n            invalid_hereafter=cluster.get_slot_no() + ttl,\n        )\n        tx_signed_step2 = cluster.sign_tx(\n            tx_body_file=tx_raw_output_step2.out_file,\n            signing_key_files=tx_files_step2.signing_key_files,\n            tx_name=f\"{temp_template}_step2\",\n        )\n    \n        err = \"\"\n        try:\n            cluster.submit_tx(tx_file=tx_signed_step2, txins=mint_utxos)\n        except clusterlib.CLIError as exc:\n            err = str(exc)\n        else:\n>           pytest.xfail(\"ttl > 3k/f was accepted\")\nE           _pytest.outcomes.XFailed: ttl > 3k/f was accepted\n\n/home/martink/Source/repos/cardano-node-tests2/cardano_node_tests/tests/test_plutus_mint_raw.py:1580: XFailed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1659911137572,
      "stop" : 1659911137572,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1659908973725,
      "stop" : 1659908973725,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1659908973674,
      "stop" : 1659908973725,
      "duration" : 51
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1659908973674,
      "stop" : 1659908973674,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1659908973674,
      "stop" : 1659908973674,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1659910943164,
      "stop" : 1659910943164,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "payment_addrs",
    "time" : {
      "start" : 1659911137854,
      "stop" : 1659911144536,
      "duration" : 6682
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster",
    "time" : {
      "start" : 1659911137573,
      "stop" : 1659911137854,
      "duration" : 281
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1659908973674,
      "stop" : 1659908973674,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1659908973674,
      "stop" : 1659908973674,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1659911137572,
      "stop" : 1659911137572,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1659911137572,
      "stop" : 1659911137573,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1659911159161,
      "stop" : 1659911159161,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1659915471492,
      "stop" : 1659915471495,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1659915471501,
      "stop" : 1659915471501,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1659911159150,
      "stop" : 1659911159161,
      "duration" : 11
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='runs only with Babbage+ TX')"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_plutus_mint_raw"
  }, {
    "name" : "subSuite",
    "value" : "TestMintingNegative"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "1773811-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_plutus_mint_raw"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "plutus_version",
    "value" : "'v1'"
  }, {
    "name" : "ttl",
    "value" : "-1"
  } ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/76ea460cdfb030e9f80185a76d5ad2a2222bda4f/cardano_node_tests/tests/test_plutus_mint_raw.py#L1467",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/76ea460cdfb030e9f80185a76d5ad2a2222bda4f/cardano_node_tests/tests/test_plutus_mint_raw.py#L1467",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "622b0e457cd93c0",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1659908969368,
        "stop" : 1659908969368,
        "duration" : 0
      }
    } ],
    "categories" : [ ],
    "tags" : [ "smoke", "@pytest.mark.skipif(False, reason='runs only with Babbage+ TX')" ]
  },
  "source" : "fd458dde3734393e.json",
  "parameterValues" : [ "'v1'", "-1" ]
}