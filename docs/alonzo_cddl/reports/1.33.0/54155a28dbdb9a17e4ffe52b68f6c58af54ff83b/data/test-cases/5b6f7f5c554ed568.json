{
  "uid" : "5b6f7f5c554ed568",
  "name" : "test_minting_context_equivalance",
  "fullName" : "cardano_node_tests.tests.test_plutus_mint_build.TestBuildMinting#test_minting_context_equivalance",
  "historyId" : "48e94817a6deed9f3c63369071ffcd9b",
  "time" : {
    "start" : 1646055124635,
    "stop" : 1646055129784,
    "duration" : 5149
  },
  "description" : "Test context equivalence while minting a token.\n\n        Uses `cardano-cli transaction build` command for building the transactions.\n\n        * fund the token issuer and create a UTxO for collateral\n        * check that the expected amount was transferred to token issuer's address\n        * generate a dummy redeemer and a dummy Tx\n        * derive the correct redeemer from the dummy Tx\n        * mint the token using the derived redeemer\n        * check that the token was minted and collateral UTxO was not spent\n        * (optional) check transactions in db-sync\n        ",
  "descriptionHtml" : "<p>Test context equivalence while minting a token.</p>\n<pre><code>    Uses `cardano-cli transaction build` command for building the transactions.\n\n    * fund the token issuer and create a UTxO for collateral\n    * check that the expected amount was transferred to token issuer's address\n    * generate a dummy redeemer and a dummy Tx\n    * derive the correct redeemer from the dummy Tx\n    * mint the token using the derived redeemer\n    * check that the token was minted and collateral UTxO was not spent\n    * (optional) check transactions in db-sync\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: An error occurred while running `['create-script-context', '--generate-tx', 'test_minting_context_equivalance_ci0_nzz_dummy_tx.signed', '--out-file', 'test_minting_context_equivalance_ci0_nzz_script_context.redeemer', '--cardano-mode', '--testnet-magic', '42']`: create-script-context: Error creating redeemer from: test_minting_context_equivalance_ci0_nzz_dummy_tx.signed Error: ReadTxBodyError (FileError \"test_minting_context_equivalance_ci0_nzz_dummy_tx.signed\" (TextEnvelopeTypeError [TextEnvelopeType \"Tx AlonzoEra\"] (TextEnvelopeType \"Witnessed Tx AlonzoEra\")))\nCallStack (from HasCallStack):\n  error, called at app/create-script-context.hs:69:21 in main:Main",
  "statusTrace" : "self = <cardano_node_tests.tests.test_plutus_mint_build.TestBuildMinting object at 0x7fb7b7a13520>, cluster = <ClusterLib: protocol=cardano, tx_era=>\npayment_addrs = [AddressRecord(address='addr_test1vz2epxte4r6d36dcjrn3dv0h6uyscp3yqq2nmq3a7z8gwcg6l8vk2', vkey_file=PosixPath('plutus_...0als9g', vkey_file=PosixPath('plutus_payment_ci0_duwg_1.vkey'), skey_file=PosixPath('plutus_payment_ci0_duwg_1.skey'))]\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.skipif(\n        not distutils.spawn.find_executable(\"create-script-context\"),\n        reason=\"cannot find `create-script-context` on the PATH\",\n    )\n    @pytest.mark.dbsync\n    @pytest.mark.testnets\n    def test_minting_context_equivalance(\n        self, cluster: clusterlib.ClusterLib, payment_addrs: List[clusterlib.AddressRecord]\n    ):\n        \"\"\"Test context equivalence while minting a token.\n    \n        Uses `cardano-cli transaction build` command for building the transactions.\n    \n        * fund the token issuer and create a UTxO for collateral\n        * check that the expected amount was transferred to token issuer's address\n        * generate a dummy redeemer and a dummy Tx\n        * derive the correct redeemer from the dummy Tx\n        * mint the token using the derived redeemer\n        * check that the token was minted and collateral UTxO was not spent\n        * (optional) check transactions in db-sync\n        \"\"\"\n        # pylint: disable=too-many-locals\n        temp_template = common.get_test_id(cluster)\n        payment_addr = payment_addrs[0]\n        issuer_addr = payment_addrs[1]\n    \n        lovelace_amount = 5000_000\n        script_fund = 1000_000_000\n        collateral_fund = 1500_000_000\n        token_amount = 5\n    \n        issuer_init_balance = cluster.get_address_balance(issuer_addr.address)\n    \n        # Step 1: fund the token issuer\n    \n        tx_files_step1 = clusterlib.TxFiles(\n            signing_key_files=[payment_addr.skey_file],\n        )\n        txouts_step1 = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=script_fund),\n            # for collateral\n            clusterlib.TxOut(address=issuer_addr.address, amount=collateral_fund),\n        ]\n        tx_output_step1 = cluster.build_tx(\n            src_address=payment_addr.address,\n            tx_name=f\"{temp_template}_step1\",\n            tx_files=tx_files_step1,\n            txouts=txouts_step1,\n            fee_buffer=2_000_000,\n            # don't join 'change' and 'collateral' txouts, we need separate UTxOs\n            join_txouts=False,\n        )\n        tx_signed_step1 = cluster.sign_tx(\n            tx_body_file=tx_output_step1.out_file,\n            signing_key_files=tx_files_step1.signing_key_files,\n            tx_name=f\"{temp_template}_step1\",\n        )\n        cluster.submit_tx(tx_file=tx_signed_step1, txins=tx_output_step1.txins)\n    \n        issuer_step1_balance = cluster.get_address_balance(issuer_addr.address)\n        assert (\n            issuer_step1_balance == issuer_init_balance + script_fund + collateral_fund\n        ), f\"Incorrect balance for token issuer address `{issuer_addr.address}`\"\n    \n        # Step 2: mint the \"qacoin\"\n    \n        invalid_hereafter = cluster.get_slot_no() + 1000\n    \n        txid_step1 = cluster.get_txid(tx_body_file=tx_output_step1.out_file)\n        mint_utxos = cluster.get_utxo(txin=f\"{txid_step1}#1\")\n        collateral_utxo = clusterlib.UTXOData(\n            utxo_hash=txid_step1, utxo_ix=2, amount=collateral_fund, address=issuer_addr.address\n        )\n    \n        policyid = cluster.get_policyid(plutus_mint.MINTING_CONTEXT_EQUIVALENCE_PLUTUS)\n        asset_name = f\"qacoin{clusterlib.get_rand_str(4)}\".encode(\"utf-8\").hex()\n        token = f\"{policyid}.{asset_name}\"\n        mint_txouts = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=token_amount, coin=token)\n        ]\n    \n        tx_files_step2 = clusterlib.TxFiles(\n            signing_key_files=[issuer_addr.skey_file, plutus_mint.SIGNING_KEY_GOLDEN],\n        )\n        txouts_step2 = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=lovelace_amount),\n            *mint_txouts,\n        ]\n    \n        # generate a dummy redeemer in order to create a txbody from which\n        # we can generate a tx and then derive the correct redeemer\n        redeemer_file_dummy = Path(f\"{temp_template}_dummy_script_context.redeemer\")\n        clusterlib_utils.create_script_context(\n            cluster_obj=cluster, redeemer_file=redeemer_file_dummy\n        )\n    \n        plutus_mint_data_dummy = [\n            clusterlib.Mint(\n                txouts=mint_txouts,\n                script_file=plutus_mint.MINTING_CONTEXT_EQUIVALENCE_PLUTUS,\n                collaterals=[collateral_utxo],\n                redeemer_file=redeemer_file_dummy,\n            )\n        ]\n    \n        tx_output_dummy = cluster.build_tx(\n            src_address=payment_addr.address,\n            tx_name=f\"{temp_template}_dummy\",\n            tx_files=tx_files_step2,\n            txins=mint_utxos,\n            txouts=txouts_step2,\n            mint=plutus_mint_data_dummy,\n            required_signers=[plutus_mint.SIGNING_KEY_GOLDEN],\n            invalid_before=1,\n            invalid_hereafter=invalid_hereafter,\n            script_valid=False,\n        )\n        assert tx_output_dummy\n    \n        tx_file_dummy = cluster.sign_tx(\n            tx_body_file=tx_output_dummy.out_file,\n            signing_key_files=tx_files_step2.signing_key_files,\n            tx_name=f\"{temp_template}_dummy\",\n        )\n    \n        # generate the \"real\" redeemer\n        redeemer_file = Path(f\"{temp_template}_script_context.redeemer\")\n>       clusterlib_utils.create_script_context(\n            cluster_obj=cluster, redeemer_file=redeemer_file, tx_file=tx_file_dummy\n        )\n\n/home/martink/Source/repos/cardano-node-tests2/cardano_node_tests/tests/test_plutus_mint_build.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/martink/Source/repos/cardano-node-tests2/cardano_node_tests/utils/clusterlib_utils.py:884: in create_script_context\n    helpers.run_command(cmd_args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncommand = ['create-script-context', '--generate-tx', 'test_minting_context_equivalance_ci0_nzz_dummy_tx.signed', '--out-file', 'test_minting_context_equivalance_ci0_nzz_script_context.redeemer', '--cardano-mode', ...], workdir = '', ignore_fail = False, shell = False\n\n    def run_command(\n        command: Union[str, list],\n        workdir: FileType = \"\",\n        ignore_fail: bool = False,\n        shell: bool = False,\n    ) -> bytes:\n        \"\"\"Run command.\"\"\"\n        cmd: Union[str, list]\n        if isinstance(command, str):\n            cmd = command if shell else command.split()\n        else:\n            cmd = command\n    \n        # pylint: disable=consider-using-with\n        if workdir:\n            with change_cwd(workdir):\n                p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)\n        else:\n            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)\n        stdout, stderr = p.communicate()\n    \n        if not ignore_fail and p.returncode != 0:\n            err_dec = stderr.decode()\n            err_dec = err_dec or stdout.decode()\n>           raise AssertionError(f\"An error occurred while running `{command}`: {err_dec}\")\nE           AssertionError: An error occurred while running `['create-script-context', '--generate-tx', 'test_minting_context_equivalance_ci0_nzz_dummy_tx.signed', '--out-file', 'test_minting_context_equivalance_ci0_nzz_script_context.redeemer', '--cardano-mode', '--testnet-magic', '42']`: create-script-context: Error creating redeemer from: test_minting_context_equivalance_ci0_nzz_dummy_tx.signed Error: ReadTxBodyError (FileError \"test_minting_context_equivalance_ci0_nzz_dummy_tx.signed\" (TextEnvelopeTypeError [TextEnvelopeType \"Tx AlonzoEra\"] (TextEnvelopeType \"Witnessed Tx AlonzoEra\")))\nE           CallStack (from HasCallStack):\nE             error, called at app/create-script-context.hs:69:21 in main:Main\n\n/home/martink/Source/repos/cardano-node-tests2/cardano_node_tests/utils/helpers.py:114: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cluster",
    "time" : {
      "start" : 1646055108406,
      "stop" : 1646055108566,
      "duration" : 160
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "payment_addrs",
    "time" : {
      "start" : 1646055108566,
      "stop" : 1646055124634,
      "duration" : 16068
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1646053580530,
      "stop" : 1646053580531,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1646055077385,
      "stop" : 1646055077385,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1646053580530,
      "stop" : 1646053580530,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1646055108406,
      "stop" : 1646055108406,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1646053580530,
      "stop" : 1646053580530,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1646055108406,
      "stop" : 1646055108406,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1646055108406,
      "stop" : 1646055108406,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1646053580530,
      "stop" : 1646053580530,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1646053580531,
      "stop" : 1646053580531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1646053580530,
      "stop" : 1646053580530,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1646058239673,
      "stop" : 1646058239677,
      "duration" : 4
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1646055129877,
      "stop" : 1646055129877,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1646055129870,
      "stop" : 1646055129877,
      "duration" : 7
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1646058239682,
      "stop" : 1646058239682,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "testnets"
  }, {
    "name" : "tag",
    "value" : "dbsync"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='cannot find `create-script-context` on the PATH')"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_plutus_mint_build"
  }, {
    "name" : "subSuite",
    "value" : "TestBuildMinting"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "1024832-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_plutus_mint_build"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/feeeb6d42b1c61594b0eebe50360e382d1882198/cardano_node_tests/tests/test_plutus_mint_build.py#L312",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/feeeb6d42b1c61594b0eebe50360e382d1882198/cardano_node_tests/tests/test_plutus_mint_build.py#L312",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "d968d7c9adddb793",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1646053577481,
        "stop" : 1646053577481,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.skipif(False, reason='cannot find `create-script-context` on the PATH')", "dbsync", "testnets" ]
  },
  "source" : "5b6f7f5c554ed568.json",
  "parameterValues" : [ ]
}