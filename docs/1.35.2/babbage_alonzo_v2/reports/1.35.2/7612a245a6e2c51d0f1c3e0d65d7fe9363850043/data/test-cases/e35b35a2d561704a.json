{
  "uid" : "e35b35a2d561704a",
  "name" : "test_multisig_no_required_atleast",
  "fullName" : "cardano_node_tests.tests.test_scripts.TestBasic#test_multisig_no_required_atleast",
  "historyId" : "abae474d629fbfd57a0d6a3c08224e8a",
  "time" : {
    "start" : 1658623640978,
    "stop" : 1658623644838,
    "duration" : 3860
  },
  "description" : "Send funds from script address using the *atLeast* script with no required witnesses.",
  "descriptionHtml" : "<p>Send funds from script address using the <em>atLeast</em> script with no required witnesses.</p>\n",
  "status" : "skipped",
  "statusMessage" : "XFAIL reason: See cardano-node issue #3835\n\n_pytest.outcomes.XFailed: See cardano-node issue #3835",
  "statusTrace" : "self = <cardano_node_tests.tests.test_scripts.TestBasic object at 0x7f75a488c0d0>, cluster = <ClusterLib: protocol=cardano, tx_era=alonzo>\npayment_addrs = [AddressRecord(address='addr_test1vrr6rcausex8wck9ljexet98u95ycnwk2qmf4p59a3ftrlch0zdxz', vkey_file=PosixPath('multi_a...k4ysk3r4caztsy4twaw', vkey_file=PosixPath('multi_addr_ci0_5.vkey'), skey_file=PosixPath('multi_addr_ci0_5.skey')), ...]\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.dbsync\n    def test_multisig_no_required_atleast(\n        self, cluster: clusterlib.ClusterLib, payment_addrs: List[clusterlib.AddressRecord]\n    ):\n        \"\"\"Send funds from script address using the *atLeast* script with no required witnesses.\"\"\"\n        temp_template = common.get_test_id(cluster)\n    \n        payment_vkey_files = [p.vkey_file for p in payment_addrs]\n        payment_skey_files = [p.skey_file for p in payment_addrs]\n    \n        # create multisig script\n        multisig_script = cluster.build_multisig_script(\n            script_name=temp_template,\n            script_type_arg=clusterlib.MultiSigTypeArgs.AT_LEAST,\n            payment_vkey_files=payment_vkey_files,\n            required=0,\n        )\n    \n        # create script address\n        script_address = cluster.gen_payment_addr(\n            addr_name=temp_template, payment_script_file=multisig_script\n        )\n    \n        # send funds to script address\n        tx_out_to = multisig_tx(\n            cluster_obj=cluster,\n            temp_template=f\"{temp_template}_to\",\n            src_address=payment_addrs[0].address,\n            dst_address=script_address,\n            amount=3_000_000,\n            payment_skey_files=[payment_skey_files[0]],\n        )\n    \n        # send funds from script address\n        try:\n>           tx_out_from = multisig_tx(\n                cluster_obj=cluster,\n                temp_template=f\"{temp_template}_from\",\n                src_address=script_address,\n                dst_address=payment_addrs[0].address,\n                amount=1_000_000,\n                payment_skey_files=[],\n                multisig_script=multisig_script,\n            )\n\n/home/martink/Source/repos/cardano-node-tests4/cardano_node_tests/tests/test_scripts.py:637: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncluster_obj = <ClusterLib: protocol=cardano, tx_era=alonzo>, temp_template = 'test_multisig_no_required_atleast_ci0_tns_from', src_address = 'addr_test1wp79wzamzswgsxte7y0nx5uvqxm8w8s3hp7fruk5frhrrdgftedhl'\ndst_address = 'addr_test1vrr6rcausex8wck9ljexet98u95ycnwk2qmf4p59a3ftrlch0zdxz', amount = 1000000, payment_skey_files = [], multisig_script = PosixPath('test_multisig_no_required_atleast_ci0_tns_multisig.script')\ninvalid_hereafter = None, invalid_before = None, use_build_cmd = False\n\n    def multisig_tx(\n        cluster_obj: clusterlib.ClusterLib,\n        temp_template: str,\n        src_address: str,\n        dst_address: str,\n        amount: int,\n        payment_skey_files: List[Path],\n        multisig_script: Optional[Path] = None,\n        invalid_hereafter: Optional[int] = None,\n        invalid_before: Optional[int] = None,\n        use_build_cmd: bool = False,\n    ) -> clusterlib.TxRawOutput:\n        \"\"\"Build and submit multisig transaction.\"\"\"\n        # record initial balances\n        src_init_balance = cluster_obj.get_address_balance(src_address)\n        dst_init_balance = cluster_obj.get_address_balance(dst_address)\n    \n        # create TX body\n        script_txins = (\n            # empty `txins` means Tx inputs will be selected automatically by ClusterLib magic\n            [clusterlib.ScriptTxIn(txins=[], script_file=multisig_script)]\n            if multisig_script\n            else []\n        )\n        destinations = [clusterlib.TxOut(address=dst_address, amount=amount)]\n        witness_count = len(payment_skey_files)\n    \n        if use_build_cmd:\n            tx_raw_output = cluster_obj.build_tx(\n                src_address=src_address,\n                tx_name=temp_template,\n                txouts=destinations,\n                script_txins=script_txins,\n                fee_buffer=2_000_000,\n                invalid_hereafter=invalid_hereafter,\n                invalid_before=invalid_before,\n                witness_override=witness_count,\n            )\n        else:\n            ttl = cluster_obj.calculate_tx_ttl()\n            fee = cluster_obj.calculate_tx_fee(\n                src_address=src_address,\n                tx_name=temp_template,\n                txouts=destinations,\n                script_txins=script_txins,\n                ttl=ttl,\n                witness_count_add=witness_count,\n            )\n            tx_raw_output = cluster_obj.build_raw_tx(\n                src_address=src_address,\n                tx_name=temp_template,\n                txouts=destinations,\n                script_txins=script_txins,\n                fee=fee,\n                ttl=ttl,\n                invalid_hereafter=invalid_hereafter,\n                invalid_before=invalid_before,\n            )\n    \n        # create witness file for each key\n        witness_files = [\n            cluster_obj.witness_tx(\n                tx_body_file=tx_raw_output.out_file,\n                witness_name=f\"{temp_template}_skey{idx}\",\n                signing_key_files=[skey],\n            )\n            for idx, skey in enumerate(payment_skey_files)\n        ]\n    \n        # sign TX using witness files\n>       tx_witnessed_file = cluster_obj.assemble_tx(\n            tx_body_file=tx_raw_output.out_file,\n            witness_files=witness_files,\n            tx_name=temp_template,\n        )\n\n/home/martink/Source/repos/cardano-node-tests4/cardano_node_tests/tests/test_scripts.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ClusterLib: protocol=cardano, tx_era=alonzo>, tx_body_file = PosixPath('test_multisig_no_required_atleast_ci0_tns_from_tx.body'), witness_files = []\ntx_name = 'test_multisig_no_required_atleast_ci0_tns_from', destination_dir = PosixPath('.')\n\n    def assemble_tx(\n        self,\n        tx_body_file: FileType,\n        witness_files: OptionalFiles,\n        tx_name: str,\n        destination_dir: FileType = \".\",\n    ) -> Path:\n        \"\"\"Assemble a tx body and witness(es) to form a signed transaction.\n    \n        Args:\n            tx_body_file: A path to file with transaction body.\n            witness_files: A list of paths to transaction witness files.\n            tx_name: A name of the transaction.\n            destination_dir: A path to directory for storing artifacts (optional).\n    \n        Returns:\n            Path: A path to signed transaction file.\n        \"\"\"\n        destination_dir = Path(destination_dir).expanduser()\n        out_file = destination_dir / f\"{tx_name}_tx.witnessed\"\n        clusterlib_helpers._check_files_exist(out_file, clusterlib_obj=self)\n    \n>       self.cli(\n            [\n                \"transaction\",\n                \"assemble\",\n                \"--tx-body-file\",\n                str(tx_body_file),\n                \"--out-file\",\n                str(out_file),\n                *helpers._prepend_flag(\"--witness-file\", witness_files),\n            ]\n        )\n\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:2405: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ClusterLib: protocol=cardano, tx_era=alonzo>\ncli_args = ['transaction', 'assemble', '--tx-body-file', 'test_multisig_no_required_atleast_ci0_tns_from_tx.body', '--out-file', 'test_multisig_no_required_atleast_ci0_tns_from_tx.witnessed']\n\n    def cli(self, cli_args: List[str]) -> structs.CLIOut:\n        \"\"\"Run the `cardano-cli` command.\n    \n        Args:\n            cli_args: A list of arguments for cardano-cli.\n    \n        Returns:\n            structs.CLIOut: A tuple containing command stdout and stderr.\n        \"\"\"\n        cmd = [\"cardano-cli\", *cli_args]\n        coverage.record_cli_coverage(cli_args=cmd, coverage_dict=self.cli_coverage)\n>       return self.cli_base(cmd)\n\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:197: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ClusterLib: protocol=cardano, tx_era=alonzo>, cli_args = ['cardano-cli', 'transaction', 'assemble', '--tx-body-file', 'test_multisig_no_required_atleast_ci0_tns_from_tx.body', '--out-file', ...]\n\n    def cli_base(self, cli_args: List[str]) -> structs.CLIOut:\n        \"\"\"Run a command.\n    \n        Args:\n            cli_args: A list consisting of command and it's arguments.\n    \n        Returns:\n            structs.CLIOut: A tuple containing command stdout and stderr.\n        \"\"\"\n        cmd_str = \" \".join(cli_args)\n        LOGGER.debug(\"Running `%s`\", cmd_str)\n        clusterlib_helpers._write_cli_log(clusterlib_obj=self, command=cmd_str)\n    \n        # re-run the command when running into\n        # Network.Socket.connect: <socket: X>: resource exhausted (Resource temporarily unavailable)\n        # or\n        # MuxError (MuxIOException writev: resource vanished (Broken pipe)) \"(sendAll errored)\"\n        for __ in range(3):\n            with subprocess.Popen(cli_args, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as p:\n                stdout, stderr = p.communicate()\n    \n                if p.returncode == 0:\n                    break\n    \n            stderr_dec = stderr.decode()\n            err_msg = (\n                f\"An error occurred running a CLI command `{cmd_str}` on path \"\n                f\"`{Path.cwd()}`: {stderr_dec}\"\n            )\n            if \"resource exhausted\" in stderr_dec or \"resource vanished\" in stderr_dec:\n                LOGGER.error(err_msg)\n                time.sleep(0.4)\n                continue\n>           raise exceptions.CLIError(err_msg)\nE           cardano_clusterlib.exceptions.CLIError: An error occurred running a CLI command `cardano-cli transaction assemble --tx-body-file test_multisig_no_required_atleast_ci0_tns_from_tx.body --out-file test_multisig_no_required_atleast_ci0_tns_from_tx.witnessed` on path `/home/martink/Source/repos/cardano-node-tests4/tmp/pytest-of-martink/pytest-49/popen-gw7/test_scripts_py`: Missing: (--witness-file FILE)\nE           \nE           Usage: cardano-cli transaction assemble --tx-body-file FILE\nE                       (--witness-file FILE)\nE                       --out-file FILE\nE           \nE             Assemble a tx body and witness(es) to form a transaction\n\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:180: CLIError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <cardano_node_tests.tests.test_scripts.TestBasic object at 0x7f75a488c0d0>, cluster = <ClusterLib: protocol=cardano, tx_era=alonzo>\npayment_addrs = [AddressRecord(address='addr_test1vrr6rcausex8wck9ljexet98u95ycnwk2qmf4p59a3ftrlch0zdxz', vkey_file=PosixPath('multi_a...k4ysk3r4caztsy4twaw', vkey_file=PosixPath('multi_addr_ci0_5.vkey'), skey_file=PosixPath('multi_addr_ci0_5.skey')), ...]\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.dbsync\n    def test_multisig_no_required_atleast(\n        self, cluster: clusterlib.ClusterLib, payment_addrs: List[clusterlib.AddressRecord]\n    ):\n        \"\"\"Send funds from script address using the *atLeast* script with no required witnesses.\"\"\"\n        temp_template = common.get_test_id(cluster)\n    \n        payment_vkey_files = [p.vkey_file for p in payment_addrs]\n        payment_skey_files = [p.skey_file for p in payment_addrs]\n    \n        # create multisig script\n        multisig_script = cluster.build_multisig_script(\n            script_name=temp_template,\n            script_type_arg=clusterlib.MultiSigTypeArgs.AT_LEAST,\n            payment_vkey_files=payment_vkey_files,\n            required=0,\n        )\n    \n        # create script address\n        script_address = cluster.gen_payment_addr(\n            addr_name=temp_template, payment_script_file=multisig_script\n        )\n    \n        # send funds to script address\n        tx_out_to = multisig_tx(\n            cluster_obj=cluster,\n            temp_template=f\"{temp_template}_to\",\n            src_address=payment_addrs[0].address,\n            dst_address=script_address,\n            amount=3_000_000,\n            payment_skey_files=[payment_skey_files[0]],\n        )\n    \n        # send funds from script address\n        try:\n            tx_out_from = multisig_tx(\n                cluster_obj=cluster,\n                temp_template=f\"{temp_template}_from\",\n                src_address=script_address,\n                dst_address=payment_addrs[0].address,\n                amount=1_000_000,\n                payment_skey_files=[],\n                multisig_script=multisig_script,\n            )\n        except clusterlib.CLIError as err:\n            if \"Missing: (--witness-file FILE)\" in str(err):\n>               pytest.xfail(\"See cardano-node issue #3835\")\nE               _pytest.outcomes.XFailed: See cardano-node issue #3835\n\n/home/martink/Source/repos/cardano-node-tests4/cardano_node_tests/tests/test_scripts.py:648: XFailed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1658623640688,
      "stop" : 1658623640688,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1658621756999,
      "stop" : 1658621756999,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1658621757000,
      "stop" : 1658621757000,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1658621757000,
      "stop" : 1658621757000,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster",
    "time" : {
      "start" : 1658623640689,
      "stop" : 1658623640976,
      "duration" : 287
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1658623616422,
      "stop" : 1658623616422,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "payment_addrs",
    "time" : {
      "start" : 1658623640977,
      "stop" : 1658623640977,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1658623640688,
      "stop" : 1658623640688,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1658623640688,
      "stop" : 1658623640689,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1658621757402,
      "stop" : 1658621757402,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1658621757000,
      "stop" : 1658621757402,
      "duration" : 402
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1658621757000,
      "stop" : 1658621757000,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1658623644964,
      "stop" : 1658623644964,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1658623841226,
      "stop" : 1658623841226,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1658623644960,
      "stop" : 1658623644963,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1658623841224,
      "stop" : 1658623841225,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "testnets"
  }, {
    "name" : "tag",
    "value" : "dbsync"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_scripts"
  }, {
    "name" : "subSuite",
    "value" : "TestBasic"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "27388-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_scripts"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/ed48848e8881877ef3425b7a9c3fa5bb9fb2ced8/cardano_node_tests/tests/test_scripts.py#L601",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/ed48848e8881877ef3425b7a9c3fa5bb9fb2ced8/cardano_node_tests/tests/test_scripts.py#L601",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "c94cb7dda3ab1bdb",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1658621753169,
        "stop" : 1658621753169,
        "duration" : 0
      }
    } ],
    "categories" : [ ],
    "tags" : [ "dbsync", "smoke", "testnets" ]
  },
  "source" : "e35b35a2d561704a.json",
  "parameterValues" : [ ]
}