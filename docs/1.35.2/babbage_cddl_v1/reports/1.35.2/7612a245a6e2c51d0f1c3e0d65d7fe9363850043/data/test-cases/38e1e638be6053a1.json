{
  "uid" : "38e1e638be6053a1",
  "name" : "test_update_stake_pool_metadata[build]",
  "fullName" : "cardano_node_tests.tests.test_pools.TestStakePool#test_update_stake_pool_metadata",
  "historyId" : "ef9d6c271177f5159ef07882072967e9",
  "time" : {
    "start" : 1658769992236,
    "stop" : 1658770006220,
    "duration" : 13984
  },
  "description" : "Update stake pool metadata.\n\n        * register pool\n        * update the pool metadata by resubmitting the pool registration certificate\n        * check that the pool metadata hash was correctly updated on chain\n        ",
  "descriptionHtml" : "<p>Update stake pool metadata.</p>\n<pre><code>    * register pool\n    * update the pool metadata by resubmitting the pool registration certificate\n    * check that the pool metadata hash was correctly updated on chain\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "KeyError: 'cost'",
  "statusTrace" : "self = <cardano_node_tests.tests.test_pools.TestStakePool object at 0x7fbf3e3fb1c0>, cluster_manager = <cardano_node_tests.utils.cluster_management.ClusterManager object at 0x7fbf3e200130>\ncluster = <ClusterLib: protocol=cardano, tx_era=babbage>, use_build_cmd = True, request = <FixtureRequest for <Function test_update_stake_pool_metadata[build]>>\n\n    @allure.link(helpers.get_vcs_link())\n    @common.PARAM_USE_BUILD_CMD\n    @pytest.mark.dbsync\n    def test_update_stake_pool_metadata(\n        self,\n        cluster_manager: cluster_management.ClusterManager,\n        cluster: clusterlib.ClusterLib,\n        use_build_cmd: bool,\n        request: FixtureRequest,\n    ):\n        \"\"\"Update stake pool metadata.\n    \n        * register pool\n        * update the pool metadata by resubmitting the pool registration certificate\n        * check that the pool metadata hash was correctly updated on chain\n        \"\"\"\n        rand_str = clusterlib.get_rand_str(4)\n        temp_template = f\"{common.get_test_id(cluster)}_{rand_str}_{use_build_cmd}\"\n        no_of_addr = 3\n    \n        pool_name = f\"pool_{rand_str}\"\n        pool_metadata = {\n            \"name\": pool_name,\n            \"description\": \"Shelley QA E2E test Test\",\n            \"ticker\": \"QA1\",\n            \"homepage\": \"www.test1.com\",\n        }\n        pool_metadata_file = helpers.write_json(\n            f\"{pool_name}_registration_metadata.json\", pool_metadata\n        )\n    \n        pool_metadata_updated = {\n            \"name\": f\"{pool_name}_U\",\n            \"description\": \"pool description update\",\n            \"ticker\": \"QA22\",\n            \"homepage\": \"www.qa22.com\",\n        }\n        pool_metadata_updated_file = helpers.write_json(\n            f\"{pool_name}_registration_metadata_updated.json\",\n            pool_metadata_updated,\n        )\n    \n        pool_data = clusterlib.PoolData(\n            pool_name=pool_name,\n            pool_pledge=4567,\n            pool_cost=cluster.get_protocol_params().get(\"minPoolCost\", 500),\n            pool_margin=0.01,\n            pool_metadata_url=\"https://init_location.com\",\n            pool_metadata_hash=cluster.gen_pool_metadata_hash(pool_metadata_file),\n        )\n    \n        pool_data_updated = pool_data._replace(\n            pool_metadata_url=\"https://www.updated_location.com\",\n            pool_metadata_hash=cluster.gen_pool_metadata_hash(pool_metadata_updated_file),\n        )\n    \n        # create pool owners\n        pool_owners = clusterlib_utils.create_pool_users(\n            cluster_obj=cluster,\n            name_template=temp_template,\n            no_of_addr=no_of_addr,\n        )\n    \n        # fund source address\n        clusterlib_utils.fund_from_faucet(\n            pool_owners[0].payment,\n            cluster_obj=cluster,\n            faucet_data=cluster_manager.cache.addrs_data[\"user1\"],\n            amount=900_000_000 * no_of_addr,\n        )\n    \n        # register pool\n        pool_creation_out = _create_register_pool(\n            cluster_obj=cluster,\n            temp_template=temp_template,\n            temp_dir=Path(\".\"),\n            pool_owners=pool_owners,\n            pool_data=pool_data,\n            request=request,\n            use_build_cmd=use_build_cmd,\n        )\n    \n        # make sure the update doesn't happen close to epoch boundary\n        clusterlib_utils.wait_for_epoch_interval(\n            cluster_obj=cluster, start=10, stop=common.EPOCH_STOP_SEC_BUFFER\n        )\n    \n        # update the pool metadata by resubmitting the pool registration certificate\n        if use_build_cmd:\n            _register_stake_pool_w_build(\n                cluster_obj=cluster,\n                pool_data=pool_data_updated,\n                pool_owners=pool_owners,\n                vrf_vkey_file=pool_creation_out.vrf_key_pair.vkey_file,\n                cold_key_pair=pool_creation_out.cold_key_pair,\n                tx_name=temp_template,\n                deposit=0,  # no additional deposit, the pool is already registered\n            )\n        else:\n            __, tx_raw_output = cluster.register_stake_pool(\n                pool_data=pool_data_updated,\n                pool_owners=pool_owners,\n                vrf_vkey_file=pool_creation_out.vrf_key_pair.vkey_file,\n                cold_key_pair=pool_creation_out.cold_key_pair,\n                tx_name=temp_template,\n                deposit=0,  # no additional deposit, the pool is already registered\n            )\n            dbsync_utils.check_tx(cluster_obj=cluster, tx_raw_output=tx_raw_output)\n    \n        # check that pool is going to be updated with correct data\n        future_params = cluster.get_pool_params(pool_creation_out.stake_pool_id).future_pool_params\n>       assert not clusterlib_utils.check_pool_data(\n            pool_params=future_params, pool_creation_data=pool_data_updated\n        )\n\n/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/tests/test_pools.py:1341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npool_params = {}\npool_creation_data = PoolData(pool_name='pool_tgzy', pool_pledge=4567, pool_cost=0, pool_margin=0.01, pool_metadata_url='https://www.update...5e08e9d2f2313233fec3bc24bb216e3a21fedd01a368d91c6d793e0ae4e', pool_relay_dns='', pool_relay_ipv4='', pool_relay_port=0)\n\n    def check_pool_data(  # noqa: C901\n        pool_params: dict, pool_creation_data: clusterlib.PoolData\n    ) -> str:\n        \"\"\"Check that actual pool state corresponds with pool creation data.\"\"\"\n        errors_list = []\n    \n>       if pool_params[\"cost\"] != pool_creation_data.pool_cost:\nE       KeyError: 'cost'\n\n/home/martink/Source/repos/cardano-node-tests3/cardano_node_tests/utils/clusterlib_utils.py:319: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "session_autouse",
    "time" : {
      "start" : 1658767766582,
      "stop" : 1658767766582,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1658769991949,
      "stop" : 1658769991949,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1658767766480,
      "stop" : 1658767766480,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1658767766481,
      "stop" : 1658767766481,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1658769991948,
      "stop" : 1658769991948,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1658767766481,
      "stop" : 1658767766582,
      "duration" : 101
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1658769991949,
      "stop" : 1658769991949,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1658767766481,
      "stop" : 1658767766481,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1658767766480,
      "stop" : 1658767766481,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster",
    "time" : {
      "start" : 1658769991949,
      "stop" : 1658769992234,
      "duration" : 285
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1658769991948,
      "stop" : 1658769991949,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1658770006447,
      "stop" : 1658770006451,
      "duration" : 4
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1658771228995,
      "stop" : 1658771228995,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1658771228991,
      "stop" : 1658771228994,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1658770006452,
      "stop" : 1658770006452,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "testnets"
  }, {
    "name" : "tag",
    "value" : "dbsync"
  }, {
    "name" : "tag",
    "value" : "long"
  }, {
    "name" : "tag",
    "value" : "order(7)"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='cannot use `build` with cluster era 'babbage' and TX era 'babbage'')"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_pools"
  }, {
    "name" : "subSuite",
    "value" : "TestStakePool"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "3647753-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_pools"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "use_build_cmd",
    "value" : "True"
  } ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/ed48848e8881877ef3425b7a9c3fa5bb9fb2ced8/cardano_node_tests/tests/test_pools.py#L1230",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/ed48848e8881877ef3425b7a9c3fa5bb9fb2ced8/cardano_node_tests/tests/test_pools.py#L1230",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "2e368b53e0812404",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1658767762294,
        "stop" : 1658767762294,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "dbsync", "testnets", "@pytest.mark.skipif(False, reason='cannot use `build` with cluster era 'babbage' and TX era 'babbage'')", "order(7)", "long" ]
  },
  "source" : "38e1e638be6053a1.json",
  "parameterValues" : [ "True" ]
}