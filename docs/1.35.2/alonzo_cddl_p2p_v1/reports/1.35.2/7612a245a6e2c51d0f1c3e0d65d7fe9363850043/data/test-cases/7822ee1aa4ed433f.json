{
  "uid" : "7822ee1aa4ed433f",
  "name" : "test_pay_multi_stake_addrs",
  "fullName" : "cardano_node_tests.tests.test_mir_certs.TestMIRCerts#test_pay_multi_stake_addrs",
  "historyId" : "7870a00778569a584de6ac41191034c1",
  "time" : {
    "start" : 1658756515757,
    "stop" : 1658756521546,
    "duration" : 5789
  },
  "description" : "Send funds from the reserves and treasury pots to multiple stake addresses in single TX.\n\n        * generate an MIR certificates for transferring from treasury for each stake address\n        * generate an MIR certificates for transferring from reserves for each stake address\n        * submit a TX with all the MIR certificates generated in previous steps\n        * check that the expected amount was added to all stake address reward accounts\n        * (optional) check transaction in db-sync\n        ",
  "descriptionHtml" : "<p>Send funds from the reserves and treasury pots to multiple stake addresses in single TX.</p>\n<pre><code>    * generate an MIR certificates for transferring from treasury for each stake address\n    * generate an MIR certificates for transferring from reserves for each stake address\n    * submit a TX with all the MIR certificates generated in previous steps\n    * check that the expected amount was added to all stake address reward accounts\n    * (optional) check transaction in db-sync\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "cardano_clusterlib.exceptions.CLIError: An error occurred running a CLI command `cardano-cli transaction submit --testnet-magic 42 --tx-file test_pay_multi_stake_addrs_ci1_waj_tx.signed --cardano-mode` on path `/home/martink/Source/repos/cardano-node-tests6/tmp/pytest-of-martink/pytest-6/popen-gw5/test_mir_certs_py`: Command failed: transaction submit  Error: Error while submitting tx: ShelleyTxValidationError ShelleyBasedEraAlonzo (ApplyTxError [UtxowFailure (WrappedShelleyEraFailure (UtxoFailure (ValueNotConservedUTxO (Value 0 (fromList [])) (Value 999401203 (fromList []))))),UtxowFailure (WrappedShelleyEraFailure (UtxoFailure (BadInputsUTxO (fromList [TxIn (TxId {_unTxId = SafeHash \"43a809f1f954b727109635b1375f33e41ca0c8fe1012eff74e7511a525d7146d\"}) (TxIx 0)]))))])",
  "statusTrace" : "self = <cardano_node_tests.tests.test_mir_certs.TestMIRCerts object at 0x7f3bd40ad570>, cluster_manager = <cardano_node_tests.utils.cluster_management.ClusterManager object at 0x7f3bd405d1e0>\ncluster_pots = <ClusterLib: protocol=cardano, tx_era=>\nregistered_users = [PoolUser(payment=AddressRecord(address='addr_test1qzzggg4fdgnwuu68uxtf60zwjrspq5zvjh0j750d0mzmrp8l7ces2mx9knpnhfknfze...ey_file=PosixPath('test_mir_certs_ci1_addr2_stake.vkey'), skey_file=PosixPath('test_mir_certs_ci1_addr2_stake.skey')))]\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.dbsync\n    def test_pay_multi_stake_addrs(\n        self,\n        cluster_manager: cluster_management.ClusterManager,\n        cluster_pots: clusterlib.ClusterLib,\n        registered_users: List[clusterlib.PoolUser],\n    ):\n        \"\"\"Send funds from the reserves and treasury pots to multiple stake addresses in single TX.\n    \n        * generate an MIR certificates for transferring from treasury for each stake address\n        * generate an MIR certificates for transferring from reserves for each stake address\n        * submit a TX with all the MIR certificates generated in previous steps\n        * check that the expected amount was added to all stake address reward accounts\n        * (optional) check transaction in db-sync\n        \"\"\"\n        cluster = cluster_pots\n        temp_template = common.get_test_id(cluster)\n        amount_treasury = 50_000_000\n        amount_reserves = 60_000_000\n    \n        init_reward_u0 = cluster.get_stake_addr_info(\n            registered_users[0].stake.address\n        ).reward_account_balance\n        init_reward_u1 = cluster.get_stake_addr_info(\n            registered_users[1].stake.address\n        ).reward_account_balance\n    \n        mir_cert_treasury_u0 = cluster.gen_mir_cert_stake_addr(\n            stake_addr=registered_users[0].stake.address,\n            reward=amount_treasury,\n            tx_name=f\"{temp_template}_treasury_u0\",\n            use_treasury=True,\n        )\n        mir_cert_reserves_u0 = cluster.gen_mir_cert_stake_addr(\n            stake_addr=registered_users[0].stake.address,\n            reward=amount_reserves,\n            tx_name=f\"{temp_template}_reserves_u0\",\n        )\n        mir_cert_treasury_u1 = cluster.gen_mir_cert_stake_addr(\n            stake_addr=registered_users[1].stake.address,\n            reward=amount_treasury,\n            tx_name=f\"{temp_template}_treasury_u1\",\n            use_treasury=True,\n        )\n        mir_cert_reserves_u1 = cluster.gen_mir_cert_stake_addr(\n            stake_addr=registered_users[1].stake.address,\n            reward=amount_reserves,\n            tx_name=f\"{temp_template}_reserves_u1\",\n        )\n    \n        tx_files = clusterlib.TxFiles(\n            certificate_files=[\n                mir_cert_treasury_u0,\n                mir_cert_reserves_u0,\n                mir_cert_treasury_u1,\n                mir_cert_reserves_u1,\n            ],\n            signing_key_files=[\n                registered_users[0].payment.skey_file,\n                *cluster.genesis_keys.delegate_skeys,\n            ],\n        )\n    \n        # send the transaction at the beginning of an epoch\n        if cluster.time_from_epoch_start() > (cluster.epoch_length_sec // 6):\n            cluster.wait_for_new_epoch()\n    \n        LOGGER.info(\n            f\"Submitting MIR cert for transferring funds from treasury and reserves to \"\n            f\"multiple stake addresses in epoch {cluster.get_epoch()} \"\n            f\"on cluster instance {cluster_manager.cluster_instance_num}\"\n        )\n>       tx_raw_output = cluster.send_tx(\n            src_address=registered_users[0].payment.address,\n            tx_name=temp_template,\n            tx_files=tx_files,\n        )\n\n/home/martink/Source/repos/cardano-node-tests6/cardano_node_tests/tests/test_mir_certs.py:797: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:2607: in send_tx\n    self.submit_tx(\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:2478: in submit_tx\n    raise err\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:2457: in submit_tx\n    self.submit_tx_bare(tx_file)\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:2426: in submit_tx_bare\n    self.cli(\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:197: in cli\n    return self.cli_base(cmd)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ClusterLib: protocol=cardano, tx_era=>, cli_args = ['cardano-cli', 'transaction', 'submit', '--testnet-magic', '42', '--tx-file', ...]\n\n    def cli_base(self, cli_args: List[str]) -> structs.CLIOut:\n        \"\"\"Run a command.\n    \n        Args:\n            cli_args: A list consisting of command and it's arguments.\n    \n        Returns:\n            structs.CLIOut: A tuple containing command stdout and stderr.\n        \"\"\"\n        cmd_str = \" \".join(cli_args)\n        LOGGER.debug(\"Running `%s`\", cmd_str)\n        clusterlib_helpers._write_cli_log(clusterlib_obj=self, command=cmd_str)\n    \n        # re-run the command when running into\n        # Network.Socket.connect: <socket: X>: resource exhausted (Resource temporarily unavailable)\n        # or\n        # MuxError (MuxIOException writev: resource vanished (Broken pipe)) \"(sendAll errored)\"\n        for __ in range(3):\n            with subprocess.Popen(cli_args, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as p:\n                stdout, stderr = p.communicate()\n    \n                if p.returncode == 0:\n                    break\n    \n            stderr_dec = stderr.decode()\n            err_msg = (\n                f\"An error occurred running a CLI command `{cmd_str}` on path \"\n                f\"`{Path.cwd()}`: {stderr_dec}\"\n            )\n            if \"resource exhausted\" in stderr_dec or \"resource vanished\" in stderr_dec:\n                LOGGER.error(err_msg)\n                time.sleep(0.4)\n                continue\n>           raise exceptions.CLIError(err_msg)\nE           cardano_clusterlib.exceptions.CLIError: An error occurred running a CLI command `cardano-cli transaction submit --testnet-magic 42 --tx-file test_pay_multi_stake_addrs_ci1_waj_tx.signed --cardano-mode` on path `/home/martink/Source/repos/cardano-node-tests6/tmp/pytest-of-martink/pytest-6/popen-gw5/test_mir_certs_py`: Command failed: transaction submit  Error: Error while submitting tx: ShelleyTxValidationError ShelleyBasedEraAlonzo (ApplyTxError [UtxowFailure (WrappedShelleyEraFailure (UtxoFailure (ValueNotConservedUTxO (Value 0 (fromList [])) (Value 999401203 (fromList []))))),UtxowFailure (WrappedShelleyEraFailure (UtxoFailure (BadInputsUTxO (fromList [TxIn (TxId {_unTxId = SafeHash \"43a809f1f954b727109635b1375f33e41ca0c8fe1012eff74e7511a525d7146d\"}) (TxIx 0)]))))])\n\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:180: CLIError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1658753444455,
      "stop" : 1658753444455,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "registered_users",
    "time" : {
      "start" : 1658756511302,
      "stop" : 1658756515756,
      "duration" : 4454
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pool_users",
    "time" : {
      "start" : 1658756505144,
      "stop" : 1658756511302,
      "duration" : 6158
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1658756504838,
      "stop" : 1658756504838,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1658753444454,
      "stop" : 1658753444455,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1658753444556,
      "stop" : 1658753444556,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1658753444454,
      "stop" : 1658753444454,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1658756504838,
      "stop" : 1658756504838,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1658756504838,
      "stop" : 1658756504838,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1658753444455,
      "stop" : 1658753444455,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1658753444455,
      "stop" : 1658753444556,
      "duration" : 101
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1658756504838,
      "stop" : 1658756504838,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_pots",
    "time" : {
      "start" : 1658756504838,
      "stop" : 1658756505144,
      "duration" : 306
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Send funds from the reserves and treasury pots to multiple stake addresses in single TX.\n\n        * generate an MIR certificates for transferring from treasury for each stake address\n        * generate an MIR certificates for transferring from reserves for each stake address\n        * submit a TX with all the MIR certificates generated in previous steps\n        * check that the expected amount was added to all stake address reward accounts\n        * (optional) check transaction in db-sync\n        ",
    "status" : "broken",
    "statusMessage" : "cardano_clusterlib.exceptions.CLIError: An error occurred running a CLI command `cardano-cli transaction submit --testnet-magic 42 --tx-file test_pay_multi_stake_addrs_ci1_waj_tx.signed --cardano-mode` on path `/home/martink/Source/repos/cardano-node-tests6/tmp/pytest-of-martink/pytest-6/popen-gw5/test_mir_certs_py`: Command failed: transaction submit  Error: Error while submitting tx: ShelleyTxValidationError ShelleyBasedEraAlonzo (ApplyTxError [UtxowFailure (WrappedShelleyEraFailure (UtxoFailure (ValueNotConservedUTxO (Value 0 (fromList [])) (Value 999401203 (fromList []))))),UtxowFailure (WrappedShelleyEraFailure (UtxoFailure (BadInputsUTxO (fromList [TxIn (TxId {_unTxId = SafeHash \"43a809f1f954b727109635b1375f33e41ca0c8fe1012eff74e7511a525d7146d\"}) (TxIx 0)]))))])",
    "statusTrace" : "self = <cardano_node_tests.tests.test_mir_certs.TestMIRCerts object at 0x7f3bd40ad570>, cluster_manager = <cardano_node_tests.utils.cluster_management.ClusterManager object at 0x7f3bd405d1e0>\ncluster_pots = <ClusterLib: protocol=cardano, tx_era=>\nregistered_users = [PoolUser(payment=AddressRecord(address='addr_test1qzzggg4fdgnwuu68uxtf60zwjrspq5zvjh0j750d0mzmrp8l7ces2mx9knpnhfknfze...ey_file=PosixPath('test_mir_certs_ci1_addr2_stake.vkey'), skey_file=PosixPath('test_mir_certs_ci1_addr2_stake.skey')))]\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.dbsync\n    def test_pay_multi_stake_addrs(\n        self,\n        cluster_manager: cluster_management.ClusterManager,\n        cluster_pots: clusterlib.ClusterLib,\n        registered_users: List[clusterlib.PoolUser],\n    ):\n        \"\"\"Send funds from the reserves and treasury pots to multiple stake addresses in single TX.\n    \n        * generate an MIR certificates for transferring from treasury for each stake address\n        * generate an MIR certificates for transferring from reserves for each stake address\n        * submit a TX with all the MIR certificates generated in previous steps\n        * check that the expected amount was added to all stake address reward accounts\n        * (optional) check transaction in db-sync\n        \"\"\"\n        cluster = cluster_pots\n        temp_template = common.get_test_id(cluster)\n        amount_treasury = 50_000_000\n        amount_reserves = 60_000_000\n    \n        init_reward_u0 = cluster.get_stake_addr_info(\n            registered_users[0].stake.address\n        ).reward_account_balance\n        init_reward_u1 = cluster.get_stake_addr_info(\n            registered_users[1].stake.address\n        ).reward_account_balance\n    \n        mir_cert_treasury_u0 = cluster.gen_mir_cert_stake_addr(\n            stake_addr=registered_users[0].stake.address,\n            reward=amount_treasury,\n            tx_name=f\"{temp_template}_treasury_u0\",\n            use_treasury=True,\n        )\n        mir_cert_reserves_u0 = cluster.gen_mir_cert_stake_addr(\n            stake_addr=registered_users[0].stake.address,\n            reward=amount_reserves,\n            tx_name=f\"{temp_template}_reserves_u0\",\n        )\n        mir_cert_treasury_u1 = cluster.gen_mir_cert_stake_addr(\n            stake_addr=registered_users[1].stake.address,\n            reward=amount_treasury,\n            tx_name=f\"{temp_template}_treasury_u1\",\n            use_treasury=True,\n        )\n        mir_cert_reserves_u1 = cluster.gen_mir_cert_stake_addr(\n            stake_addr=registered_users[1].stake.address,\n            reward=amount_reserves,\n            tx_name=f\"{temp_template}_reserves_u1\",\n        )\n    \n        tx_files = clusterlib.TxFiles(\n            certificate_files=[\n                mir_cert_treasury_u0,\n                mir_cert_reserves_u0,\n                mir_cert_treasury_u1,\n                mir_cert_reserves_u1,\n            ],\n            signing_key_files=[\n                registered_users[0].payment.skey_file,\n                *cluster.genesis_keys.delegate_skeys,\n            ],\n        )\n    \n        # send the transaction at the beginning of an epoch\n        if cluster.time_from_epoch_start() > (cluster.epoch_length_sec // 6):\n            cluster.wait_for_new_epoch()\n    \n        LOGGER.info(\n            f\"Submitting MIR cert for transferring funds from treasury and reserves to \"\n            f\"multiple stake addresses in epoch {cluster.get_epoch()} \"\n            f\"on cluster instance {cluster_manager.cluster_instance_num}\"\n        )\n>       tx_raw_output = cluster.send_tx(\n            src_address=registered_users[0].payment.address,\n            tx_name=temp_template,\n            tx_files=tx_files,\n        )\n\n/home/martink/Source/repos/cardano-node-tests6/cardano_node_tests/tests/test_mir_certs.py:797: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:2607: in send_tx\n    self.submit_tx(\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:2478: in submit_tx\n    raise err\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:2457: in submit_tx\n    self.submit_tx_bare(tx_file)\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:2426: in submit_tx_bare\n    self.cli(\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:197: in cli\n    return self.cli_base(cmd)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ClusterLib: protocol=cardano, tx_era=>, cli_args = ['cardano-cli', 'transaction', 'submit', '--testnet-magic', '42', '--tx-file', ...]\n\n    def cli_base(self, cli_args: List[str]) -> structs.CLIOut:\n        \"\"\"Run a command.\n    \n        Args:\n            cli_args: A list consisting of command and it's arguments.\n    \n        Returns:\n            structs.CLIOut: A tuple containing command stdout and stderr.\n        \"\"\"\n        cmd_str = \" \".join(cli_args)\n        LOGGER.debug(\"Running `%s`\", cmd_str)\n        clusterlib_helpers._write_cli_log(clusterlib_obj=self, command=cmd_str)\n    \n        # re-run the command when running into\n        # Network.Socket.connect: <socket: X>: resource exhausted (Resource temporarily unavailable)\n        # or\n        # MuxError (MuxIOException writev: resource vanished (Broken pipe)) \"(sendAll errored)\"\n        for __ in range(3):\n            with subprocess.Popen(cli_args, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as p:\n                stdout, stderr = p.communicate()\n    \n                if p.returncode == 0:\n                    break\n    \n            stderr_dec = stderr.decode()\n            err_msg = (\n                f\"An error occurred running a CLI command `{cmd_str}` on path \"\n                f\"`{Path.cwd()}`: {stderr_dec}\"\n            )\n            if \"resource exhausted\" in stderr_dec or \"resource vanished\" in stderr_dec:\n                LOGGER.error(err_msg)\n                time.sleep(0.4)\n                continue\n>           raise exceptions.CLIError(err_msg)\nE           cardano_clusterlib.exceptions.CLIError: An error occurred running a CLI command `cardano-cli transaction submit --testnet-magic 42 --tx-file test_pay_multi_stake_addrs_ci1_waj_tx.signed --cardano-mode` on path `/home/martink/Source/repos/cardano-node-tests6/tmp/pytest-of-martink/pytest-6/popen-gw5/test_mir_certs_py`: Command failed: transaction submit  Error: Error while submitting tx: ShelleyTxValidationError ShelleyBasedEraAlonzo (ApplyTxError [UtxowFailure (WrappedShelleyEraFailure (UtxoFailure (ValueNotConservedUTxO (Value 0 (fromList [])) (Value 999401203 (fromList []))))),UtxowFailure (WrappedShelleyEraFailure (UtxoFailure (BadInputsUTxO (fromList [TxIn (TxId {_unTxId = SafeHash \"43a809f1f954b727109635b1375f33e41ca0c8fe1012eff74e7511a525d7146d\"}) (TxIx 0)]))))])\n\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib_klass.py:180: CLIError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d7ab2cbc0402974b",
      "name" : "log",
      "source" : "d7ab2cbc0402974b.txt",
      "type" : "text/plain",
      "size" : 418
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1658756567400,
      "stop" : 1658756567400,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1658756522046,
      "stop" : 1658756522046,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1658756567397,
      "stop" : 1658756567399,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1658756521685,
      "stop" : 1658756522046,
      "duration" : 361
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "dbsync"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_mir_certs"
  }, {
    "name" : "subSuite",
    "value" : "TestMIRCerts"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "2012988-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_mir_certs"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/ed48848e8881877ef3425b7a9c3fa5bb9fb2ced8/cardano_node_tests/tests/test_mir_certs.py#L724",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/ed48848e8881877ef3425b7a9c3fa5bb9fb2ced8/cardano_node_tests/tests/test_mir_certs.py#L724",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "5e32d057b816c591",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1658753440227,
        "stop" : 1658753440227,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "dbsync" ]
  },
  "source" : "7822ee1aa4ed433f.json",
  "parameterValues" : [ ]
}