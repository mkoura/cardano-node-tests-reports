{
  "uid" : "4e6c0fcbcadc826b",
  "name" : "test_minting_two_tokens[reference_script]",
  "fullName" : "cardano_node_tests.tests.test_plutus_v2_mint_raw.TestMinting#test_minting_two_tokens",
  "historyId" : "d3356d28f07e53376b4c67faa79b3f1c",
  "time" : {
    "start" : 1658776678028,
    "stop" : 1658776736654,
    "duration" : 58626
  },
  "description" : "Test minting two tokens with a single Plutus script.\n\n        * fund the token issuer and create a UTxO for collateral and possibly reference script\n        * check that the expected amount was transferred to token issuer's address\n        * mint the tokens using a Plutus script\n        * check that the tokens were minted and collateral UTxO was not spent\n        ",
  "descriptionHtml" : "<p>Test minting two tokens with a single Plutus script.</p>\n<pre><code>    * fund the token issuer and create a UTxO for collateral and possibly reference script\n    * check that the expected amount was transferred to token issuer's address\n    * mint the tokens using a Plutus script\n    * check that the tokens were minted and collateral UTxO was not spent\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: reference inputs are not the expected",
  "statusTrace" : "self = <cardano_node_tests.tests.test_plutus_v2_mint_raw.TestMinting object at 0x7f323001fbe0>, cluster = <ClusterLib: protocol=cardano, tx_era=babbage>\npayment_addrs = [AddressRecord(address='addr_test1vp056r2n0h99rut7ywfmaufuqfjpcxxj2pfme4skd7wfw5gkgkc64', vkey_file=PosixPath('test_mi..._two_tokens_ci0_zzz_payment_addr_1.vkey'), skey_file=PosixPath('test_minting_two_tokens_ci0_zzz_payment_addr_1.skey'))]\nuse_reference_script = True, request = <FixtureRequest for <Function test_minting_two_tokens[reference_script]>>\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.parametrize(\n        \"use_reference_script\", (True, False), ids=(\"reference_script\", \"script_file\")\n    )\n    def test_minting_two_tokens(\n        self,\n        cluster: clusterlib.ClusterLib,\n        payment_addrs: List[clusterlib.AddressRecord],\n        use_reference_script: bool,\n        request: FixtureRequest,\n    ):\n        \"\"\"Test minting two tokens with a single Plutus script.\n    \n        * fund the token issuer and create a UTxO for collateral and possibly reference script\n        * check that the expected amount was transferred to token issuer's address\n        * mint the tokens using a Plutus script\n        * check that the tokens were minted and collateral UTxO was not spent\n        \"\"\"\n        # pylint: disable=too-many-locals\n        temp_template = f\"{common.get_test_id(cluster)}_{request.node.callspec.id}\"\n    \n        payment_addr = payment_addrs[0]\n        issuer_addr = payment_addrs[1]\n    \n        lovelace_amount = 2_000_000\n        token_amount = 5\n        fee_txsize = 600_000\n    \n        if use_reference_script:\n            execution_cost = plutus_common.MINTING_V2_REF_COST\n        else:\n            execution_cost = plutus_common.MINTING_V2_COST\n    \n        minting_cost = plutus_common.compute_cost(\n            execution_cost=execution_cost,\n            protocol_params=cluster.get_protocol_params(),\n        )\n    \n        # Step 1: fund the token issuer\n    \n        mint_utxos, collateral_utxos, reference_utxo, __ = _fund_issuer(\n            cluster_obj=cluster,\n            temp_template=temp_template,\n            payment_addr=payment_addr,\n            issuer_addr=issuer_addr,\n            minting_cost=minting_cost,\n            amount=lovelace_amount,\n            fee_txsize=fee_txsize,\n            collateral_utxo_num=2,\n            reference_script=plutus_common.MINTING_PLUTUS_V2,\n        )\n        assert reference_utxo or not use_reference_script, \"No reference script UTxO\"\n    \n        issuer_fund_balance = cluster.get_address_balance(issuer_addr.address)\n    \n        # Step 2: mint the \"qacoin\"\n    \n        policyid = cluster.get_policyid(plutus_common.MINTING_PLUTUS_V2)\n        asset_name_a = f\"qacoina{clusterlib.get_rand_str(4)}\".encode(\"utf-8\").hex()\n        token_a = f\"{policyid}.{asset_name_a}\"\n        asset_name_b = f\"qacoinb{clusterlib.get_rand_str(4)}\".encode(\"utf-8\").hex()\n        token_b = f\"{policyid}.{asset_name_b}\"\n        mint_txouts = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=token_amount, coin=token_a),\n            clusterlib.TxOut(address=issuer_addr.address, amount=token_amount, coin=token_b),\n        ]\n    \n        plutus_mint_data = [\n            clusterlib.Mint(\n                txouts=mint_txouts,\n                script_file=plutus_common.MINTING_PLUTUS_V2 if not use_reference_script else \"\",\n                reference_txin=reference_utxo if use_reference_script else None,\n                collaterals=collateral_utxos,\n                execution_units=(\n                    execution_cost.per_time,\n                    execution_cost.per_space,\n                ),\n                redeemer_cbor_file=plutus_common.REDEEMER_42_CBOR,\n                policyid=policyid,\n            )\n        ]\n    \n        tx_files_step2 = clusterlib.TxFiles(\n            signing_key_files=[issuer_addr.skey_file],\n        )\n        txouts_step2 = [\n            clusterlib.TxOut(address=issuer_addr.address, amount=lovelace_amount),\n            *mint_txouts,\n        ]\n        tx_raw_output_step2 = cluster.build_raw_tx_bare(\n            out_file=f\"{temp_template}_step2_tx.body\",\n            txins=mint_utxos,\n            txouts=txouts_step2,\n            mint=plutus_mint_data,\n            tx_files=tx_files_step2,\n            fee=minting_cost.fee + fee_txsize,\n            # ttl is optional in this test\n            invalid_hereafter=cluster.get_slot_no() + 200,\n        )\n        tx_signed_step2 = cluster.sign_tx(\n            tx_body_file=tx_raw_output_step2.out_file,\n            signing_key_files=tx_files_step2.signing_key_files,\n            tx_name=f\"{temp_template}_step2\",\n        )\n        cluster.submit_tx(tx_file=tx_signed_step2, txins=mint_utxos)\n    \n        assert (\n            cluster.get_address_balance(issuer_addr.address)\n            == issuer_fund_balance - tx_raw_output_step2.fee\n        ), f\"Incorrect balance for token issuer address `{issuer_addr.address}`\"\n    \n        token_utxo_a = cluster.get_utxo(address=issuer_addr.address, coins=[token_a])\n        assert (\n            token_utxo_a and token_utxo_a[0].amount == token_amount\n        ), \"The 'token a' was not minted\"\n    \n        token_utxo_b = cluster.get_utxo(address=issuer_addr.address, coins=[token_b])\n        assert (\n            token_utxo_b and token_utxo_b[0].amount == token_amount\n        ), \"The 'token b' was not minted\"\n    \n        # check tx view\n>       tx_view.check_tx_view(cluster_obj=cluster, tx_raw_output=tx_raw_output_step2)\n\n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/tests/test_plutus_v2_mint_raw.py:273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncluster_obj = <ClusterLib: protocol=cardano, tx_era=babbage>\ntx_raw_output = TxRawOutput(txins=[UTXOData(utxo_hash='1e7b3d39fed220f285e747fffb43391630afacb9324cc261d3cb7eee31d3fb4b', utxo_ix=0, a...hdrawals=[], change_address='', return_collateral_txouts=(), total_collateral_amount=None, readonly_reference_txins=())\n\n    def check_tx_view(  # noqa: C901\n        cluster_obj: clusterlib.ClusterLib, tx_raw_output: clusterlib.TxRawOutput\n    ) -> dict:\n        \"\"\"Check output of the `transaction view` command.\"\"\"\n        # pylint: disable=too-many-branches,too-many-locals,too-many-statements\n    \n        tx_view_raw = cluster_obj.view_tx(tx_body_file=tx_raw_output.out_file)\n        tx_loaded: dict = load_tx_view(tx_view=tx_view_raw)\n    \n        # check inputs\n        loaded_txins = set(tx_loaded.get(\"inputs\") or [])\n        _tx_raw_script_txins = list(\n            itertools.chain.from_iterable(r.txins for r in tx_raw_output.script_txins)\n        )\n        tx_raw_script_txins = {f\"{r.utxo_hash}#{r.utxo_ix}\" for r in _tx_raw_script_txins}\n        tx_raw_simple_txins = {f\"{r.utxo_hash}#{r.utxo_ix}\" for r in tx_raw_output.txins}\n        tx_raw_txins = tx_raw_simple_txins.union(tx_raw_script_txins)\n    \n        if tx_raw_txins != loaded_txins:\n            raise AssertionError(f\"txins: {tx_raw_txins} != {loaded_txins}\")\n    \n        # check outputs\n        tx_loaded_outputs = tx_loaded.get(\"outputs\") or []\n        loaded_txouts: Set[Tuple[str, int, str]] = set()\n        for txout in tx_loaded_outputs:\n            address = txout[\"address\"]\n            for amount in _load_coins_data(txout[\"amount\"]):\n                loaded_txouts.add((address, amount[0], amount[1]))\n    \n        tx_raw_txouts = {(r.address, r.amount, r.coin) for r in tx_raw_output.txouts}\n    \n        if not tx_raw_txouts.issubset(loaded_txouts):\n            raise AssertionError(f\"txouts: {tx_raw_txouts} not in {loaded_txouts}\")\n    \n        # check fee\n        fee = int(tx_loaded.get(\"fee\", \"\").split()[0] or 0)\n        # pylint: disable=consider-using-in\n        if (\n            tx_raw_output.fee != -1 and tx_raw_output.fee != fee\n        ):  # for `transaction build` the `tx_raw_output.fee` can be -1\n            raise AssertionError(f\"fee: {tx_raw_output.fee} != {fee}\")\n    \n        # check validity intervals\n        validity_range = tx_loaded.get(\"validity range\") or {}\n    \n        loaded_invalid_before = validity_range.get(\"lower bound\")\n        if tx_raw_output.invalid_before != loaded_invalid_before:\n            raise AssertionError(\n                f\"invalid before: {tx_raw_output.invalid_before} != {loaded_invalid_before}\"\n            )\n    \n        loaded_invalid_hereafter = validity_range.get(\"upper bound\") or validity_range.get(\n            \"time to live\"\n        )\n        if tx_raw_output.invalid_hereafter != loaded_invalid_hereafter:\n            raise AssertionError(\n                f\"invalid hereafter: {tx_raw_output.invalid_hereafter} != {loaded_invalid_hereafter}\"\n            )\n    \n        # check minting and burning\n        loaded_mint = set(_load_assets(assets=tx_loaded.get(\"mint\") or {}))\n        mint_txouts = list(itertools.chain.from_iterable(m.txouts for m in tx_raw_output.mint))\n        tx_raw_mint = {(r.amount, r.coin) for r in mint_txouts}\n    \n        if tx_raw_mint != loaded_mint:\n            raise AssertionError(f\"mint: {tx_raw_mint} != {loaded_mint}\")\n    \n        # check withdrawals\n        tx_loaded_withdrawals = tx_loaded.get(\"withdrawals\")\n        loaded_withdrawals = set()\n        if tx_loaded_withdrawals:\n            for withdrawal in tx_loaded_withdrawals:\n                withdrawal_key = (\n                    withdrawal.get(\"stake credential key hash\")\n                    or withdrawal.get(\"stake credential script hash\")\n                    # TODO: legacy for backwards compatibility with 1.34.1\n                    or withdrawal.get(\"credential\", {}).get(\"key hash\")\n                    or withdrawal.get(\"credential\", {}).get(\"script hash\")\n                )\n                withdrawal_amount = int(withdrawal[\"amount\"].split()[0] or 0)\n                loaded_withdrawals.add((withdrawal_key, withdrawal_amount))\n    \n        tx_raw_withdrawals = {\n            (helpers.decode_bech32(r.address)[2:], r.amount) for r in tx_raw_output.withdrawals\n        }\n    \n        if tx_raw_withdrawals != loaded_withdrawals:\n            raise AssertionError(f\"withdrawals: {tx_raw_withdrawals} != {loaded_withdrawals}\")\n    \n        # check certificates\n        tx_raw_len_certs = len(tx_raw_output.tx_files.certificate_files) + len(\n            tx_raw_output.complex_certs\n        )\n        loaded_len_certs = len(tx_loaded.get(\"certificates\") or [])\n    \n        if tx_raw_len_certs != loaded_len_certs:\n            raise AssertionError(f\"certificates: {tx_raw_len_certs} != {loaded_len_certs}\")\n    \n        for certificate in tx_loaded.get(\"certificates\") or []:\n            certificate_name = list(certificate.keys())[0]\n            certificate_fields = set(list(certificate.values())[0].keys())\n    \n            if CERTIFICATES_INFORMATION.get(certificate_name) and not certificate_fields.issubset(\n                CERTIFICATES_INFORMATION[certificate_name]\n            ):\n                raise AssertionError(\n                    f\"The output of the certificate '{certificate_name}' doesn't have \"\n                    \"the expected fields\"\n                )\n    \n        # load and check transaction era\n        loaded_tx_era: str = tx_loaded[\"era\"]\n        loaded_tx_version = getattr(VERSIONS, loaded_tx_era.upper())\n    \n        output_tx_version = (\n            getattr(VERSIONS, tx_raw_output.era.upper())\n            if tx_raw_output.era\n            else VERSIONS.DEFAULT_TX_ERA\n        )\n    \n        if loaded_tx_version != output_tx_version:\n            raise AssertionError(\n                f\"transaction era is not the expected: {loaded_tx_version} != {output_tx_version}\"\n            )\n    \n        # check collateral inputs, this is only available on Alonzo+ TX\n        if loaded_tx_version >= VERSIONS.ALONZO and not _check_collateral_inputs(\n            tx_raw_output=tx_raw_output, expected_collateral=tx_loaded[\"collateral inputs\"]\n        ):\n            raise AssertionError(\"collateral inputs are not the expected\")\n    \n        # check reference inputs, this is only available on Babbage+ TX\n        if loaded_tx_version >= VERSIONS.BABBAGE and not _check_reference_inputs(\n            tx_raw_output=tx_raw_output,\n            expected_reference_inputs=tx_loaded.get(\"reference inputs\") or [],\n        ):\n>           raise AssertionError(\"reference inputs are not the expected\")\nE           AssertionError: reference inputs are not the expected\n\n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/utils/tx_view.py:275: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cluster",
    "time" : {
      "start" : 1658775945712,
      "stop" : 1658775945965,
      "duration" : 253
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1658766843969,
      "stop" : 1658766843969,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1658766843967,
      "stop" : 1658766843967,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testenv_setup_teardown",
    "time" : {
      "start" : 1658766843968,
      "stop" : 1658766843968,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "function_autouse",
    "time" : {
      "start" : 1658775945712,
      "stop" : 1658775945712,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testfile_temp_dir",
    "time" : {
      "start" : 1658775945712,
      "stop" : 1658775945712,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1658766843967,
      "stop" : 1658766843967,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1658766843968,
      "stop" : 1658766843968,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1658766843968,
      "stop" : 1658766843968,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir",
    "time" : {
      "start" : 1658775945712,
      "stop" : 1658775945712,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "payment_addrs",
    "time" : {
      "start" : 1658775945965,
      "stop" : 1658776678028,
      "duration" : 732063
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1658775945712,
      "stop" : 1658775945712,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "testenv_setup_teardown::0",
    "time" : {
      "start" : 1658781197852,
      "stop" : 1658781197853,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1658781197854,
      "stop" : 1658781197854,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cd_testfile_temp_dir::0",
    "time" : {
      "start" : 1658776736704,
      "stop" : 1658776736704,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1658776736703,
      "stop" : 1658776736704,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "testnets"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='runs only with Babbage+ TX; needs PlutusV2 cost model')"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_plutus_v2_mint_raw"
  }, {
    "name" : "subSuite",
    "value" : "TestMinting"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "3626964-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_plutus_v2_mint_raw"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "use_reference_script",
    "value" : "True"
  } ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/ed48848e8881877ef3425b7a9c3fa5bb9fb2ced8/cardano_node_tests/tests/test_plutus_v2_mint_raw.py#L151",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/ed48848e8881877ef3425b7a9c3fa5bb9fb2ced8/cardano_node_tests/tests/test_plutus_v2_mint_raw.py#L151",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "7fa3c34daaac2d37",
      "status" : "skipped",
      "statusDetails" : "Skipped: collected, not run",
      "time" : {
        "start" : 1658766839480,
        "stop" : 1658766839480,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.skipif(False, reason='runs only with Babbage+ TX; needs PlutusV2 cost model')", "smoke", "testnets" ]
  },
  "source" : "4e6c0fcbcadc826b.json",
  "parameterValues" : [ "True" ]
}