{
  "uid" : "3fe9a9dc19023c7e",
  "name" : "test_addr_delegation_deregistration[build_raw]",
  "fullName" : "cardano_node_tests.tests.test_staking.TestDelegateAddr#test_addr_delegation_deregistration",
  "historyId" : "fb78fb4158e860ab1002130d397018e1",
  "time" : {
    "start" : 1630660284284,
    "stop" : 1630660527797,
    "duration" : 243513
  },
  "description" : "Submit delegation and deregistration certificates in single TX.\n\n        * create stake address registration cert\n        * create stake address deregistration cert\n        * register stake address\n        * create stake address delegation cert\n        * delegate and deregister stake address in single TX\n        * check that the balance for source address was correctly updated and that the key\n          deposit was returned\n        * check that the stake address was NOT delegated\n        ",
  "descriptionHtml" : "<p>Submit delegation and deregistration certificates in single TX.</p>\n<pre><code>    * create stake address registration cert\n    * create stake address deregistration cert\n    * register stake address\n    * create stake address delegation cert\n    * delegate and deregister stake address in single TX\n    * check that the balance for source address was correctly updated and that the key\n      deposit was returned\n    * check that the stake address was NOT delegated\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "cardano_clusterlib.clusterlib.CLIError: Timeout waiting for 200 sec for 1 block(s).",
  "statusTrace" : "self = <cardano_node_tests.tests.test_staking.TestDelegateAddr object at 0x7f91ce071d90>, cluster_and_pool = (<ClusterLib: protocol=cardano, tx_era=alonzo>, 'pool18yslg3q320jex6gsmetukxvzm7a20qd90wsll9anlkrfua38flr')\npool_users = [PoolUser(payment=AddressRecord(address='addr_test1qzslne347eutzwkpstzfpu0p355wnq0dutmflps8x0yry0gh9pw5e909d0uupq2hmhk...'test_staking_pool_users_ci0_addr1_stake.vkey'), skey_file=PosixPath('test_staking_pool_users_ci0_addr1_stake.skey')))]\npool_users_disposable = [PoolUser(payment=AddressRecord(address='addr_test1qru0q67s9em4th7uqq9wwufchvuj7rqlvsygh27gj9fwkapakn5sjct28h033k6k05v...'test_staking_pool_users_ppj_addr1_stake.vkey'), skey_file=PosixPath('test_staking_pool_users_ppj_addr1_stake.skey')))]\nuse_build_cmd = False\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.parametrize(\n        \"use_build_cmd\",\n        (\n            False,\n            pytest.param(\n                True,\n                marks=pytest.mark.skipif(\n                    VERSIONS.transaction_era < VERSIONS.ALONZO, reason=\"runs only with Alonzo+ TX\"\n                ),\n            ),\n        ),\n        ids=(\"build_raw\", \"build\"),\n    )\n    @pytest.mark.dbsync\n    def test_addr_delegation_deregistration(\n        self,\n        cluster_and_pool: Tuple[clusterlib.ClusterLib, str],\n        pool_users: List[clusterlib.PoolUser],\n        pool_users_disposable: List[clusterlib.PoolUser],\n        use_build_cmd: bool,\n    ):\n        \"\"\"Submit delegation and deregistration certificates in single TX.\n    \n        * create stake address registration cert\n        * create stake address deregistration cert\n        * register stake address\n        * create stake address delegation cert\n        * delegate and deregister stake address in single TX\n        * check that the balance for source address was correctly updated and that the key\n          deposit was returned\n        * check that the stake address was NOT delegated\n        \"\"\"\n        cluster, pool_id = cluster_and_pool\n        temp_template = f\"{helpers.get_func_name()}_{use_build_cmd}\"\n    \n        user_registered = pool_users_disposable[0]\n        user_payment = pool_users[0].payment\n        src_init_balance = cluster.get_address_balance(user_payment.address)\n    \n        # create stake address registration cert\n        stake_addr_reg_cert_file = cluster.gen_stake_addr_registration_cert(\n            addr_name=f\"{temp_template}_addr0\", stake_vkey_file=user_registered.stake.vkey_file\n        )\n    \n        # create stake address deregistration cert\n        stake_addr_dereg_cert = cluster.gen_stake_addr_deregistration_cert(\n            addr_name=f\"{temp_template}_addr0\", stake_vkey_file=user_registered.stake.vkey_file\n        )\n    \n        # register stake address\n        tx_files = clusterlib.TxFiles(\n            certificate_files=[stake_addr_reg_cert_file],\n            signing_key_files=[user_payment.skey_file],\n        )\n        tx_raw_output_reg = cluster.send_tx(\n            src_address=user_payment.address,\n            tx_name=f\"{temp_template}_reg\",\n            tx_files=tx_files,\n        )\n    \n        tx_db_reg = dbsync_utils.check_tx(cluster_obj=cluster, tx_raw_output=tx_raw_output_reg)\n        if tx_db_reg:\n            assert user_registered.stake.address in tx_db_reg.stake_registration\n    \n        # check that the balance for source address was correctly updated\n        assert (\n            cluster.get_address_balance(user_payment.address)\n            == src_init_balance - tx_raw_output_reg.fee - cluster.get_address_deposit()\n        ), f\"Incorrect balance for source address `{user_payment.address}`\"\n    \n        src_registered_balance = cluster.get_address_balance(user_payment.address)\n    \n        # create stake address delegation cert\n        stake_addr_deleg_cert_file = cluster.gen_stake_addr_delegation_cert(\n            addr_name=f\"{temp_template}_addr0\",\n            stake_vkey_file=user_registered.stake.vkey_file,\n            stake_pool_id=pool_id,\n        )\n    \n>       clusterlib_utils.wait_for_epoch_interval(\n            cluster_obj=cluster, start=0, stop=-10, force_epoch=False\n        )\n\n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/tests/test_staking.py:719: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/utils/clusterlib_utils.py:735: in wait_for_epoch_interval\n    cluster_obj.wait_for_new_block()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ClusterLib: protocol=cardano, tx_era=alonzo>, new_blocks = 1\n\n    def wait_for_new_block(self, new_blocks: int = 1) -> None:\n        \"\"\"Wait for new block(s) to be created.\n    \n        Args:\n            new_blocks: A number of new blocks to wait for (optional).\n        \"\"\"\n        if new_blocks < 1:\n            return\n    \n        LOGGER.debug(f\"Waiting for {new_blocks} new block(s) to be created.\")\n        timeout_no_of_slots = 200 * new_blocks\n        initial_block = self.get_block_no()\n        expected_block = initial_block + new_blocks\n    \n        LOGGER.debug(f\"Initial block no: {initial_block}\")\n        for __ in range(timeout_no_of_slots):\n            time.sleep(self.slot_length)\n            this_block = self.get_block_no()\n            if this_block >= expected_block:\n                break\n        else:\n>           raise CLIError(\n                f\"Timeout waiting for {timeout_no_of_slots * self.slot_length} sec for \"\n                f\"{new_blocks} block(s).\"\n            )\nE           cardano_clusterlib.clusterlib.CLIError: Timeout waiting for 200 sec for 1 block(s).\n\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib.py:3087: CLIError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cluster_cleanup",
    "time" : {
      "start" : 1630659822290,
      "stop" : 1630659822291,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pool_users_disposable",
    "time" : {
      "start" : 1630660284168,
      "stop" : 1630660284283,
      "duration" : 115
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "temp_dir",
    "time" : {
      "start" : 1630660266261,
      "stop" : 1630660266261,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pool_users",
    "time" : {
      "start" : 1630660266529,
      "stop" : 1630660284168,
      "duration" : 17639
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster",
    "time" : {
      "start" : 1630660266528,
      "stop" : 1630660266529,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager",
    "time" : {
      "start" : 1630660266261,
      "stop" : 1630660266261,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "tmp_path_factory",
    "time" : {
      "start" : 1630659822290,
      "stop" : 1630659822290,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1630659822290,
      "stop" : 1630659822290,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_and_pool",
    "time" : {
      "start" : 1630660266261,
      "stop" : 1630660266528,
      "duration" : 267
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_temp_dir",
    "time" : {
      "start" : 1630659822291,
      "stop" : 1630659822291,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "session_autouse",
    "time" : {
      "start" : 1630659822291,
      "stop" : 1630659822291,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn",
    "time" : {
      "start" : 1630659822290,
      "stop" : 1630659822290,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "change_dir",
    "time" : {
      "start" : 1630659822290,
      "stop" : 1630659822290,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Submit delegation and deregistration certificates in single TX.\n\n        * create stake address registration cert\n        * create stake address deregistration cert\n        * register stake address\n        * create stake address delegation cert\n        * delegate and deregister stake address in single TX\n        * check that the balance for source address was correctly updated and that the key\n          deposit was returned\n        * check that the stake address was NOT delegated\n        ",
    "status" : "broken",
    "statusMessage" : "cardano_clusterlib.clusterlib.CLIError: Timeout waiting for 200 sec for 1 block(s).",
    "statusTrace" : "self = <cardano_node_tests.tests.test_staking.TestDelegateAddr object at 0x7f91ce071d90>, cluster_and_pool = (<ClusterLib: protocol=cardano, tx_era=alonzo>, 'pool18yslg3q320jex6gsmetukxvzm7a20qd90wsll9anlkrfua38flr')\npool_users = [PoolUser(payment=AddressRecord(address='addr_test1qzslne347eutzwkpstzfpu0p355wnq0dutmflps8x0yry0gh9pw5e909d0uupq2hmhk...'test_staking_pool_users_ci0_addr1_stake.vkey'), skey_file=PosixPath('test_staking_pool_users_ci0_addr1_stake.skey')))]\npool_users_disposable = [PoolUser(payment=AddressRecord(address='addr_test1qru0q67s9em4th7uqq9wwufchvuj7rqlvsygh27gj9fwkapakn5sjct28h033k6k05v...'test_staking_pool_users_ppj_addr1_stake.vkey'), skey_file=PosixPath('test_staking_pool_users_ppj_addr1_stake.skey')))]\nuse_build_cmd = False\n\n    @allure.link(helpers.get_vcs_link())\n    @pytest.mark.parametrize(\n        \"use_build_cmd\",\n        (\n            False,\n            pytest.param(\n                True,\n                marks=pytest.mark.skipif(\n                    VERSIONS.transaction_era < VERSIONS.ALONZO, reason=\"runs only with Alonzo+ TX\"\n                ),\n            ),\n        ),\n        ids=(\"build_raw\", \"build\"),\n    )\n    @pytest.mark.dbsync\n    def test_addr_delegation_deregistration(\n        self,\n        cluster_and_pool: Tuple[clusterlib.ClusterLib, str],\n        pool_users: List[clusterlib.PoolUser],\n        pool_users_disposable: List[clusterlib.PoolUser],\n        use_build_cmd: bool,\n    ):\n        \"\"\"Submit delegation and deregistration certificates in single TX.\n    \n        * create stake address registration cert\n        * create stake address deregistration cert\n        * register stake address\n        * create stake address delegation cert\n        * delegate and deregister stake address in single TX\n        * check that the balance for source address was correctly updated and that the key\n          deposit was returned\n        * check that the stake address was NOT delegated\n        \"\"\"\n        cluster, pool_id = cluster_and_pool\n        temp_template = f\"{helpers.get_func_name()}_{use_build_cmd}\"\n    \n        user_registered = pool_users_disposable[0]\n        user_payment = pool_users[0].payment\n        src_init_balance = cluster.get_address_balance(user_payment.address)\n    \n        # create stake address registration cert\n        stake_addr_reg_cert_file = cluster.gen_stake_addr_registration_cert(\n            addr_name=f\"{temp_template}_addr0\", stake_vkey_file=user_registered.stake.vkey_file\n        )\n    \n        # create stake address deregistration cert\n        stake_addr_dereg_cert = cluster.gen_stake_addr_deregistration_cert(\n            addr_name=f\"{temp_template}_addr0\", stake_vkey_file=user_registered.stake.vkey_file\n        )\n    \n        # register stake address\n        tx_files = clusterlib.TxFiles(\n            certificate_files=[stake_addr_reg_cert_file],\n            signing_key_files=[user_payment.skey_file],\n        )\n        tx_raw_output_reg = cluster.send_tx(\n            src_address=user_payment.address,\n            tx_name=f\"{temp_template}_reg\",\n            tx_files=tx_files,\n        )\n    \n        tx_db_reg = dbsync_utils.check_tx(cluster_obj=cluster, tx_raw_output=tx_raw_output_reg)\n        if tx_db_reg:\n            assert user_registered.stake.address in tx_db_reg.stake_registration\n    \n        # check that the balance for source address was correctly updated\n        assert (\n            cluster.get_address_balance(user_payment.address)\n            == src_init_balance - tx_raw_output_reg.fee - cluster.get_address_deposit()\n        ), f\"Incorrect balance for source address `{user_payment.address}`\"\n    \n        src_registered_balance = cluster.get_address_balance(user_payment.address)\n    \n        # create stake address delegation cert\n        stake_addr_deleg_cert_file = cluster.gen_stake_addr_delegation_cert(\n            addr_name=f\"{temp_template}_addr0\",\n            stake_vkey_file=user_registered.stake.vkey_file,\n            stake_pool_id=pool_id,\n        )\n    \n>       clusterlib_utils.wait_for_epoch_interval(\n            cluster_obj=cluster, start=0, stop=-10, force_epoch=False\n        )\n\n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/tests/test_staking.py:719: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/martink/Source/repos/cardano-node-tests1/cardano_node_tests/utils/clusterlib_utils.py:735: in wait_for_epoch_interval\n    cluster_obj.wait_for_new_block()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ClusterLib: protocol=cardano, tx_era=alonzo>, new_blocks = 1\n\n    def wait_for_new_block(self, new_blocks: int = 1) -> None:\n        \"\"\"Wait for new block(s) to be created.\n    \n        Args:\n            new_blocks: A number of new blocks to wait for (optional).\n        \"\"\"\n        if new_blocks < 1:\n            return\n    \n        LOGGER.debug(f\"Waiting for {new_blocks} new block(s) to be created.\")\n        timeout_no_of_slots = 200 * new_blocks\n        initial_block = self.get_block_no()\n        expected_block = initial_block + new_blocks\n    \n        LOGGER.debug(f\"Initial block no: {initial_block}\")\n        for __ in range(timeout_no_of_slots):\n            time.sleep(self.slot_length)\n            this_block = self.get_block_no()\n            if this_block >= expected_block:\n                break\n        else:\n>           raise CLIError(\n                f\"Timeout waiting for {timeout_no_of_slots * self.slot_length} sec for \"\n                f\"{new_blocks} block(s).\"\n            )\nE           cardano_clusterlib.clusterlib.CLIError: Timeout waiting for 200 sec for 1 block(s).\n\n/home/martink/Source/repos/cardano-clusterlib/cardano_clusterlib/clusterlib.py:3087: CLIError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b37386f3e25c061a",
      "name" : "log",
      "source" : "b37386f3e25c061a.txt",
      "type" : "text/plain",
      "size" : 152
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "cluster_cleanup::0",
    "time" : {
      "start" : 1630660527903,
      "stop" : 1630660527903,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "temp_dir::0",
    "time" : {
      "start" : 1630660527902,
      "stop" : 1630660527902,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "cluster_manager::0",
    "time" : {
      "start" : 1630660527901,
      "stop" : 1630660527902,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "close_dbconn::0",
    "time" : {
      "start" : 1630660527904,
      "stop" : 1630660527904,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "testnets"
  }, {
    "name" : "tag",
    "value" : "dbsync"
  }, {
    "name" : "tag",
    "value" : "order(3)"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('temp_dir')"
  }, {
    "name" : "parentSuite",
    "value" : "cardano_node_tests.tests"
  }, {
    "name" : "suite",
    "value" : "test_staking"
  }, {
    "name" : "subSuite",
    "value" : "TestDelegateAddr"
  }, {
    "name" : "host",
    "value" : "bender-3900x"
  }, {
    "name" : "thread",
    "value" : "4107008-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cardano_node_tests.tests.test_staking"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "use_build_cmd",
    "value" : "False"
  } ],
  "links" : [ {
    "name" : "https://github.com/input-output-hk/cardano-node-tests/blob/f9b500fbdf38bbf96a078d004740bb0323c9cbba/cardano_node_tests/tests/test_staking.py#L639",
    "url" : "https://github.com/input-output-hk/cardano-node-tests/blob/f9b500fbdf38bbf96a078d004740bb0323c9cbba/cardano_node_tests/tests/test_staking.py#L639",
    "type" : "link"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "order(3)", "@pytest.mark.usefixtures('temp_dir')", "dbsync", "testnets" ]
  },
  "source" : "3fe9a9dc19023c7e.json",
  "parameterValues" : [ "False" ]
}